{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/image/scene-describe.png","path":"image/scene-describe.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/block-inline-elemet.png","path":"image/back-2-font-xinfa-1/block-inline-elemet.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/child1-float.png","path":"image/back-2-font-xinfa-1/child1-float.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/clear-float-parent.png","path":"image/back-2-font-xinfa-1/clear-float-parent.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/add-clear-left-1.png","path":"image/back-2-font-xinfa-1/add-clear-left-1.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/clear-float-1.png","path":"image/back-2-font-xinfa-1/clear-float-1.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/clear-left.png","path":"image/back-2-font-xinfa-1/clear-left.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/div-float-1.png","path":"image/back-2-font-xinfa-1/div-float-1.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/div-float-after.png","path":"image/back-2-font-xinfa-1/div-float-after.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/div-show-height.png","path":"image/back-2-font-xinfa-1/div-show-height.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/div-show.png","path":"image/back-2-font-xinfa-1/div-show.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/first-child.png","path":"image/back-2-font-xinfa-1/first-child.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/float-layout-show-2.png","path":"image/back-2-font-xinfa-1/float-layout-show-2.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/float-layout-show-1.png","path":"image/back-2-font-xinfa-1/float-layout-show-1.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/float-layout.png","path":"image/back-2-font-xinfa-1/float-layout.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/float-problem-nofloat.png","path":"image/back-2-font-xinfa-1/float-problem-nofloat.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/float-problem.png","path":"image/back-2-font-xinfa-1/float-problem.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/float-right.png","path":"image/back-2-font-xinfa-1/float-right.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/html-css-show.png","path":"image/back-2-font-xinfa-1/html-css-show.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/inline-element-error.jpg","path":"image/back-2-font-xinfa-1/inline-element-error.jpg","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/inline-element-error.png","path":"image/back-2-font-xinfa-1/inline-element-error.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/origin-parent-height.png","path":"image/back-2-font-xinfa-1/origin-parent-height.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/parent-check.png","path":"image/back-2-font-xinfa-1/parent-check.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/parent-child2.png","path":"image/back-2-font-xinfa-1/parent-child2.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/parrent-height.png","path":"image/back-2-font-xinfa-1/parrent-height.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/second-check-child.png","path":"image/back-2-font-xinfa-1/second-check-child.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/box.png","path":"image/backend-enter-font-end/box.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/absolute-layout.png","path":"image/backend-enter-font-end/absolute-layout.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/composition.png","path":"image/backend-enter-font-end/composition.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-head-first.png","path":"image/backend-enter-font-end/douban-head-first.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-head-second.png","path":"image/backend-enter-font-end/douban-head-second.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-head.png","path":"image/backend-enter-font-end/douban-head.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-min.png","path":"image/backend-enter-font-end/douban-min.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-min-first.png","path":"image/backend-enter-font-end/douban-min-first.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-part-2-first.png","path":"image/backend-enter-font-end/douban-part-2-first.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-part-2.png","path":"image/backend-enter-font-end/douban-part-2.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-part-3-first.png","path":"image/backend-enter-font-end/douban-part-3-first.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-part-3.png","path":"image/backend-enter-font-end/douban-part-3.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/emoj1.jpeg","path":"image/backend-enter-font-end/emoj1.jpeg","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/emoj3.jpeg","path":"image/backend-enter-font-end/emoj3.jpeg","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/emoj4.jpeg","path":"image/backend-enter-font-end/emoj4.jpeg","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-part-1.png","path":"image/backend-enter-font-end/douban-part-1.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/layout-direction.png","path":"image/backend-enter-font-end/layout-direction.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/float-layout.png","path":"image/backend-enter-font-end/float-layout.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/know.gif","path":"image/backend-enter-font-end/know.gif","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/margin.png","path":"image/backend-enter-font-end/margin.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/padding.png","path":"image/backend-enter-font-end/padding.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/secene-sum.png","path":"image/backend-enter-font-end/secene-sum.png","modified":0,"renderable":0},{"_id":"source/image/dive-into-kotlin/java-re.png","path":"image/dive-into-kotlin/java-re.png","modified":0,"renderable":0},{"_id":"source/image/dive-into-kotlin/kotlin-re.png","path":"image/dive-into-kotlin/kotlin-re.png","modified":0,"renderable":0},{"_id":"source/image/graduation/data-category.png","path":"image/graduation/data-category.png","modified":0,"renderable":0},{"_id":"source/image/graduation/interactive.png","path":"image/graduation/interactive.png","modified":0,"renderable":0},{"_id":"source/image/graduation/java-version.png","path":"image/graduation/java-version.png","modified":0,"renderable":0},{"_id":"source/image/graduation/macro-data-structure.png","path":"image/graduation/macro-data-structure.png","modified":0,"renderable":0},{"_id":"source/image/graduation/node-and-npm.png","path":"image/graduation/node-and-npm.png","modified":0,"renderable":0},{"_id":"source/image/graduation/play-swa-demo-dir-struct.png","path":"image/graduation/play-swa-demo-dir-struct.png","modified":0,"renderable":0},{"_id":"source/image/graduation/play-swagger-template.png","path":"image/graduation/play-swagger-template.png","modified":0,"renderable":0},{"_id":"source/image/graduation/play-swa-dir-struct.png","path":"image/graduation/play-swa-dir-struct.png","modified":0,"renderable":0},{"_id":"source/image/graduation/node-npm-vue.png","path":"image/graduation/node-npm-vue.png","modified":0,"renderable":0},{"_id":"source/image/graduation/sbt-command-demo.png","path":"image/graduation/sbt-command-demo.png","modified":0,"renderable":0},{"_id":"source/image/graduation/suber-model-data-structure.png","path":"image/graduation/suber-model-data-structure.png","modified":0,"renderable":0},{"_id":"source/image/graduation/server-run.png","path":"image/graduation/server-run.png","modified":0,"renderable":0},{"_id":"source/image/dive-into-kotlin/compiler.png","path":"image/dive-into-kotlin/compiler.png","modified":0,"renderable":0},{"_id":"source/image/graduation/super-model-data-structure.png","path":"image/graduation/super-model-data-structure.png","modified":0,"renderable":0},{"_id":"source/image/graduation/test-request-result.png","path":"image/graduation/test-request-result.png","modified":0,"renderable":0},{"_id":"source/image/graduation/vue-init.png","path":"image/graduation/vue-init.png","modified":0,"renderable":0},{"_id":"source/image/graduation/scala-version.png","path":"image/graduation/scala-version.png","modified":0,"renderable":0},{"_id":"source/image/graduation/vue-install.png","path":"image/graduation/vue-install.png","modified":0,"renderable":0},{"_id":"source/image/graduation/whole-project-data-structure.png","path":"image/graduation/whole-project-data-structure.png","modified":0,"renderable":0},{"_id":"source/image/graduation/vue-resource.png","path":"image/graduation/vue-resource.png","modified":0,"renderable":0},{"_id":"source/image/graduation/sbt-h.png","path":"image/graduation/sbt-h.png","modified":0,"renderable":0},{"_id":"source/image/java2Scala-1-oop/scala-unified-types.png","path":"image/java2Scala-1-oop/scala-unified-types.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"source/image/back-2-font-xinfa-1/div-span-show.jpg","path":"image/back-2-font-xinfa-1/div-span-show.jpg","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/simple-html.jpg","path":"image/back-2-font-xinfa-1/simple-html.jpg","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-middle-first.png","path":"image/backend-enter-font-end/douban-middle-first.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-middle.png","path":"image/backend-enter-font-end/douban-middle.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-middle-second.png","path":"image/backend-enter-font-end/douban-middle-second.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/mobile-layout.png","path":"image/backend-enter-font-end/mobile-layout.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/good.gif","path":"image/backend-enter-font-end/good.gif","modified":0,"renderable":0},{"_id":"source/image/graduation/api-doc-show.png","path":"image/graduation/api-doc-show.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/youyu.gif","path":"image/backend-enter-font-end/youyu.gif","modified":0,"renderable":0},{"_id":"source/image/graduation/route-test-result.png","path":"image/graduation/route-test-result.png","modified":0,"renderable":0},{"_id":"source/image/graduation/test-api-result.png","path":"image/graduation/test-api-result.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/douban-index.png","path":"image/back-2-font-xinfa-1/douban-index.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/float-layout.jpg","path":"image/back-2-font-xinfa-1/float-layout.jpg","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-box.png","path":"image/backend-enter-font-end/douban-box.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-part.png","path":"image/backend-enter-font-end/douban-part.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"source/image/back-2-font-xinfa-1/block-element.jpg","path":"image/back-2-font-xinfa-1/block-element.jpg","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/float-right.jpg","path":"image/back-2-font-xinfa-1/float-right.jpg","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-index-first.png","path":"image/backend-enter-font-end/douban-index-first.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-index-second.png","path":"image/backend-enter-font-end/douban-index-second.png","modified":0,"renderable":0},{"_id":"source/image/backend-enter-font-end/douban-index.png","path":"image/backend-enter-font-end/douban-index.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"source/image/back-2-font-xinfa-1/block-inline-elemet.jpg","path":"image/back-2-font-xinfa-1/block-inline-elemet.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"source/image/backend-enter-font-end/douban-index- second.png","path":"image/backend-enter-font-end/douban-index- second.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"source/survey/web-Semantic/1006.4567.pdf","path":"survey/web-Semantic/1006.4567.pdf","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"source/image/back-2-font-xinfa-1/line.png","path":"image/back-2-font-xinfa-1/line.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/tianmao-2.png","path":"image/back-2-font-xinfa-1/tianmao-2.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"source/image/back-2-font-xinfa-1/douban-1.png","path":"image/back-2-font-xinfa-1/douban-1.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/douban-2.png","path":"image/back-2-font-xinfa-1/douban-2.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/tianmao-1.png","path":"image/back-2-font-xinfa-1/tianmao-1.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/image/backend-enter-font-end/desk.png","path":"image/backend-enter-font-end/desk.png","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/douban-1.jpg","path":"image/back-2-font-xinfa-1/douban-1.jpg","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/tianmao-2.jpg","path":"image/back-2-font-xinfa-1/tianmao-2.jpg","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/douban-2.jpg","path":"image/back-2-font-xinfa-1/douban-2.jpg","modified":0,"renderable":0},{"_id":"source/image/back-2-font-xinfa-1/tianmao-1.jpg","path":"image/back-2-font-xinfa-1/tianmao-1.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1518941557529},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1518941557529},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1518941557529},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1518941557529},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1518941557529},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1518941557529},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1518941557529},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1518941557529},{"_id":"themes/next/bower.json","hash":"6d6ae7531cf3fedc97c58cdad664f5793eb3cc88","modified":1518941557529},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1518941557529},{"_id":"themes/next/package.json","hash":"93a74dbc0fe3a1208a02e9cec3c15c2375339cc1","modified":1518941557533},{"_id":"source/about/index.md","hash":"e6c95a5e668040121e2d76176ab8d18d0a81625d","modified":1539417986666},{"_id":"source/categories/index.md","hash":"9a5b1eea3c3c27b19eb0e1bfa0b2595920877cbf","modified":1518941557445},{"_id":"source/image/scene-describe.png","hash":"4de9641df9839cf840a054d6937faaf8a8ba931b","modified":1518941557517},{"_id":"source/tags/index.md","hash":"d2ba8c7a409e0dff2846350592033e880efb86c4","modified":1518941557517},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1518941557529},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1518941557529},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1518941557529},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1518941557529},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1518941557529},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1518941557529},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1518941557529},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1518941557529},{"_id":"themes/next/README.md","hash":"aa2fb15ef016074b10755323c99025df506d5ca3","modified":1518941557529},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1518941557529},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1518941557529},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1518941557529},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1518941557529},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1518941557529},{"_id":"themes/next/_config.yml","hash":"d80fb5e9e1c2b642d530257c995d2262e0c6707e","modified":1539510652357},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1518941557529},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1518941557529},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1518941557529},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1518941557529},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1518941557529},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1518941557533},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1518941557533},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1518941557533},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1518941557533},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1518941557533},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1518941557533},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1518941557533},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1518941557533},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1518941557533},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1518941557549},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1518941557549},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1518941557549},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518941557537},{"_id":"source/_drafts/xinfa-1/back-2-font-xinfa-1-4.0.md","hash":"f26c901bff6f742ed21cfbbc467fe09de7064277","modified":1518941557445},{"_id":"source/_drafts/quill/README.md","hash":"9137aa347e3499c3259856b1d536a707d73b4d86","modified":1518941557445},{"_id":"source/_drafts/xinfa-1/back-2-font-xinfa-1-2.0.md","hash":"8a102c4d8d831451eb801856db761e8028fbecec","modified":1518941557445},{"_id":"source/_drafts/xinfa-1/back-2-font-xinfa-1-5.0.md","hash":"4f392dc8c542a358a47c1b1f47568a11c8c40510","modified":1518941557445},{"_id":"source/_drafts/xinfa-1/back-2-font-xinfa-1.md","hash":"cee1d9684db7ebcb0b1deaa29af8076fff7ec9a5","modified":1518941557445},{"_id":"source/_drafts/xinfa-1/back-2-font-xinfa-1.thinking","hash":"394fea2e96d6ff728e24f469ff6a2f41401541c2","modified":1518941557445},{"_id":"source/image/back-2-font-xinfa-1/block-inline-elemet.png","hash":"1dedeb87ec4513cbce1d45914964ac3815229b97","modified":1518941557445},{"_id":"source/image/back-2-font-xinfa-1/child1-float.png","hash":"baeacf90a98eb2e406eab9b42a942b9331aec2e8","modified":1518941557445},{"_id":"source/image/back-2-font-xinfa-1/clear-float-parent.png","hash":"d5d0f329cce7fe8902fa65c2b82bccd660e8ea87","modified":1518941557445},{"_id":"source/image/back-2-font-xinfa-1/add-clear-left-1.png","hash":"16b1b6a5418ae1e4bdfcac0180e4009488d0258a","modified":1518941557445},{"_id":"source/image/back-2-font-xinfa-1/clear-float-1.png","hash":"41fea2e4a26095b4dcfc2cac92b5ac161dbce9e2","modified":1518941557445},{"_id":"source/image/back-2-font-xinfa-1/clear-left.png","hash":"53d0765c80659c2dd75c82d5b4a87dc194980d1f","modified":1518941557445},{"_id":"source/image/back-2-font-xinfa-1/div-float-1.png","hash":"23d08363928340aac4e980e53bd84e177a4b5517","modified":1518941557445},{"_id":"source/image/back-2-font-xinfa-1/div-float-after.png","hash":"4822c8fcd062a62144bd429636280a5affdd43e5","modified":1518941557449},{"_id":"source/image/back-2-font-xinfa-1/div-show-height.png","hash":"e53a1b48a0f69ca3c8e250dfd68c46e9090b12bf","modified":1518941557449},{"_id":"source/image/back-2-font-xinfa-1/div-show.png","hash":"5775cfe5ddebd646892190368da1784594568be6","modified":1518941557449},{"_id":"source/image/back-2-font-xinfa-1/first-child.png","hash":"191259fcfbbd8a2956795b72adfa4b41141a77c6","modified":1518941557473},{"_id":"source/image/back-2-font-xinfa-1/float-layout-show-2.png","hash":"4ae1219b9da943021c73310c83d5f6e35df7e9ac","modified":1518941557473},{"_id":"source/image/back-2-font-xinfa-1/float-layout-show-1.png","hash":"8a68d665cac40dbdf48ab39ee5b2d17bdd489540","modified":1518941557473},{"_id":"source/image/back-2-font-xinfa-1/float-layout.png","hash":"c7a7fd5eb4946faf5ab804546af6128e42f4f37c","modified":1518941557473},{"_id":"source/image/back-2-font-xinfa-1/float-problem-nofloat.png","hash":"d1336164a5e63da78c273de7c14fe7f39bb610f6","modified":1518941557473},{"_id":"source/image/back-2-font-xinfa-1/float-problem.png","hash":"f8b5d7d296552f66b6b568c860b3fd7c14d96e8a","modified":1518941557473},{"_id":"source/image/back-2-font-xinfa-1/float-right.png","hash":"b1ffb63b008bafa5e54d006110930a64823759c9","modified":1518941557473},{"_id":"source/image/back-2-font-xinfa-1/html-css-show.png","hash":"8e0b5cd1385224ff4e8f2e5901042581d922d2f3","modified":1518941557473},{"_id":"source/image/back-2-font-xinfa-1/inline-element-error.jpg","hash":"b68dd5c0a56a5382ea339bb754a8e54641eb3250","modified":1518941557477},{"_id":"source/image/back-2-font-xinfa-1/inline-element-error.png","hash":"e2a6b067eca590a58d22244d975141263e821d2c","modified":1518941557477},{"_id":"source/image/back-2-font-xinfa-1/origin-parent-height.png","hash":"0d4e5dc1fb9facd2519e94bd1571594081337d08","modified":1518941557477},{"_id":"source/image/back-2-font-xinfa-1/parent-check.png","hash":"d20d845d8916a8218e485fb83ed3ed9bd8220fbf","modified":1518941557477},{"_id":"source/image/back-2-font-xinfa-1/parent-child2.png","hash":"1ab8a4e6becc6de0d6a8b486e582212a11ba3c91","modified":1518941557477},{"_id":"source/image/back-2-font-xinfa-1/parrent-height.png","hash":"8c4f0868229e94e3056eb60744c0ad40bfbd5cfe","modified":1518941557477},{"_id":"source/image/back-2-font-xinfa-1/second-check-child.png","hash":"8279caf635bd17f11145112ecc225b34a7381ff2","modified":1518941557477},{"_id":"source/image/backend-enter-font-end/box.png","hash":"e4cb841c53b5139ff338184ae5b97c37cf9972b2","modified":1518941557501},{"_id":"source/image/backend-enter-font-end/absolute-layout.png","hash":"767ffe1a18b8c713a469461d8585029eabcd736e","modified":1518941557501},{"_id":"source/image/backend-enter-font-end/composition.png","hash":"55dc0a4d7faa83803c15e7d5878288575ddde58a","modified":1518941557501},{"_id":"source/image/backend-enter-font-end/douban-head-first.png","hash":"ecd1339991a032f179cce3ea93efff32a178eec6","modified":1518941557505},{"_id":"source/image/backend-enter-font-end/douban-head-second.png","hash":"610a913c3ab4001fadd9efd6cf7fcc9856668778","modified":1518941557505},{"_id":"source/image/backend-enter-font-end/douban-head.png","hash":"5c841959462a41db70b8e3abc454141584aca2ee","modified":1518941557505},{"_id":"source/image/backend-enter-font-end/douban-min.png","hash":"bfe1bc9e78f586c2f6418bbfb04e1172815f4f7a","modified":1518941557513},{"_id":"source/image/backend-enter-font-end/douban-min-first.png","hash":"ca556b4d5b6604015d2f92b311700315580fc3d1","modified":1518941557513},{"_id":"source/image/backend-enter-font-end/douban-part-2-first.png","hash":"e893d174a68a88b612bb007834b6064fd802804b","modified":1518941557513},{"_id":"source/image/backend-enter-font-end/douban-part-2.png","hash":"6c7c965f474f40d9957cc027bf81bd5644638c93","modified":1518941557513},{"_id":"source/image/backend-enter-font-end/douban-part-3-first.png","hash":"6a1304ec690ded0cd7957dbfd0cb0bb422c3f4fa","modified":1518941557513},{"_id":"source/image/backend-enter-font-end/douban-part-3.png","hash":"35f6395511779e9a633140a6e378f4c4dada5e2b","modified":1518941557513},{"_id":"source/image/backend-enter-font-end/emoj1.jpeg","hash":"fed27aebd07a53aff8f64e3a902a7c83cbdf6907","modified":1518941557517},{"_id":"source/image/backend-enter-font-end/emoj3.jpeg","hash":"82e8b7250352652e25bc0914f5fcc8edeb8b47da","modified":1518941557517},{"_id":"source/image/backend-enter-font-end/emoj4.jpeg","hash":"02e7ef87e7659fd1f1ccd6b3d9560307b921f801","modified":1518941557517},{"_id":"source/image/backend-enter-font-end/douban-part-1.png","hash":"1d90cb82df5d5aff7766125590bb459fc8b088ad","modified":1518941557513},{"_id":"source/image/backend-enter-font-end/layout-direction.png","hash":"fdfd555cee18c76acb26ef5df4da55ffff58bada","modified":1518941557517},{"_id":"source/image/backend-enter-font-end/float-layout.png","hash":"3a31dce4121c7702950320c061765569562e7893","modified":1518941557517},{"_id":"source/image/backend-enter-font-end/know.gif","hash":"5b5fa21fa722a723fbeedbcb758d397fcd26973e","modified":1518941557517},{"_id":"source/image/backend-enter-font-end/margin.png","hash":"32dd16e9998ff0b9c00531f83b1ca3d1f411158b","modified":1518941557517},{"_id":"source/image/backend-enter-font-end/padding.png","hash":"3be02582eee72c46c6f3c407f17957f418d806ec","modified":1518941557517},{"_id":"source/image/backend-enter-font-end/secene-sum.png","hash":"70bc16bc19d785130b4fdac129ca14383de2a7b6","modified":1518941557517},{"_id":"source/image/dive-into-kotlin/java-re.png","hash":"e91a6d4626ddfd618466b305b2350e4f33d0d0d2","modified":1530802717647},{"_id":"source/image/dive-into-kotlin/kotlin-re.png","hash":"160f4ba96aae5a5d840bd371fd3d0b60a5423f62","modified":1530802695700},{"_id":"source/image/graduation/data-category.png","hash":"d92a56e7e223830b3ac775c6c687f01416c6fd71","modified":1527819608572},{"_id":"source/image/graduation/interactive.png","hash":"e60fddf4cdfff7dc5b4075ef560d3f85ae5a36fc","modified":1527039487329},{"_id":"source/image/graduation/java-version.png","hash":"a99038ba333e06af644b5d5a78c7d3aac471d12f","modified":1527302650745},{"_id":"source/image/graduation/macro-data-structure.png","hash":"150fe062a1ca0c4e2ebd70bc002305019070356e","modified":1527823122888},{"_id":"source/image/graduation/node-and-npm.png","hash":"3d50c8e9018f640e5981f005a2db502a4761a9ba","modified":1527469217055},{"_id":"source/image/graduation/play-swa-demo-dir-struct.png","hash":"9df7450830cb8728529040ca454e1437fa2b10b5","modified":1527124380495},{"_id":"source/image/graduation/play-swagger-template.png","hash":"729eea5a6b9fbc58e584370fbdcb02556d3ae723","modified":1527304665774},{"_id":"source/image/graduation/play-swa-dir-struct.png","hash":"001a71a9eac5c976a2103b3ff1a4d0539784442b","modified":1527123428348},{"_id":"source/image/graduation/node-npm-vue.png","hash":"548e9b6c1a18861368dc2ac69cb03e9736f53dbe","modified":1527470348493},{"_id":"source/image/graduation/sbt-command-demo.png","hash":"4e87a3367cd43397d61eb934269592a3392da900","modified":1527305608778},{"_id":"source/image/graduation/suber-model-data-structure.png","hash":"136ead7d9fd066271e96f4b73bd862c328f83d83","modified":1527823790427},{"_id":"source/image/graduation/server-run.png","hash":"e74a43a8f43eb2ffb4960c7494a94652e901f933","modified":1527904145319},{"_id":"source/image/dive-into-kotlin/compiler.png","hash":"ed91f093df924fb44e22b488ed8663cca813a848","modified":1531137240120},{"_id":"source/image/graduation/super-model-data-structure.png","hash":"7b3a6a60b32959cf821ac1a12e728947b19e22d2","modified":1527824492427},{"_id":"source/image/graduation/test-request-result.png","hash":"052553b094139ee8488c80f747de19f1eecfb89e","modified":1527904770650},{"_id":"source/image/graduation/vue-init.png","hash":"7c11c7382d377cec1f4f560c9c14f65d8d43d897","modified":1527470649475},{"_id":"source/image/graduation/scala-version.png","hash":"e4eab48a07339daa2612e9dd77b6182dbd2a753a","modified":1527302671609},{"_id":"source/image/graduation/vue-install.png","hash":"6e33a4bccd4de0765bb0017afbd6ed20a251437f","modified":1527470810008},{"_id":"source/image/graduation/whole-project-data-structure.png","hash":"329f6ece2ce29f5942b1006c72d6e3c365ad5f4a","modified":1527824921604},{"_id":"source/image/graduation/vue-resource.png","hash":"0ffc1092df9897dba49719a3d9b1ba2f280b9a52","modified":1527471063655},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1518941557529},{"_id":"source/image/graduation/sbt-h.png","hash":"9d21f972045545d9f4c33d5b0528bc6caecf7658","modified":1527303171850},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1518941557529},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1518941557529},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1518941557529},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1518941557529},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1518941557529},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1518941557529},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1518941557529},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1518941557529},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1518941557529},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1518941557529},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1518941557529},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1518941557529},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1518941557529},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1518941557529},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1518941557529},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1518941557529},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1518941557529},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1518941557533},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1518941557533},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1518941557533},{"_id":"source/image/java2Scala-1-oop/scala-unified-types.png","hash":"49fa5bb583bdd823cc1322c18456432087f411b5","modified":1519223578579},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1518941557533},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1518941557533},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1518941557533},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1518941557533},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1518941557533},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1518941557533},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1518941557533},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1518941557533},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1518941557533},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1518941557533},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1518941557533},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1518941557533},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1518941557533},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1518941557537},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1518941557537},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1518941557537},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1518941557537},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1518941557537},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1518941557537},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1518941557537},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1518941557537},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1518941557537},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1518941557537},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1518941557537},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1518941557537},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1518941557537},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1518941557537},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1518941557537},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1518941557537},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1518941557537},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1518941557537},{"_id":"source/_drafts/code/xinfan-1/test.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518941557445},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1518941557537},{"_id":"source/image/back-2-font-xinfa-1/div-span-show.jpg","hash":"06d56dffe3353a6457df88ab8a0328bda440561a","modified":1518941557449},{"_id":"source/image/back-2-font-xinfa-1/simple-html.jpg","hash":"61a8b4d63e688bf1761a1fe0d909c7a768976eb3","modified":1518941557477},{"_id":"source/image/backend-enter-font-end/douban-middle-first.png","hash":"23e6df5855a9f3098c47c967e17bf8b4817aa1e7","modified":1518941557513},{"_id":"source/image/backend-enter-font-end/douban-middle.png","hash":"a73d522f8d630167f45385d042d20d3c17afe3df","modified":1518941557513},{"_id":"source/image/backend-enter-font-end/douban-middle-second.png","hash":"7f16257aad9897532b1b245995efce79771a82df","modified":1518941557513},{"_id":"source/image/backend-enter-font-end/mobile-layout.png","hash":"4b92162fcb26dedf1dad432102b4f17748241fdd","modified":1518941557517},{"_id":"source/image/backend-enter-font-end/good.gif","hash":"632435c6ef6d82235d1fc2ae4c4dd3a374fcfaf9","modified":1518941557517},{"_id":"source/image/graduation/api-doc-show.png","hash":"6c410874c33d30bcdd5c551b3124933dc5c80968","modified":1527904547219},{"_id":"source/image/backend-enter-font-end/youyu.gif","hash":"f78deeb337d5ed98e585df52ae4e86a00fbb5430","modified":1518941557517},{"_id":"source/image/graduation/route-test-result.png","hash":"b2c33f3fa6713a4cd9d9320acf8d50c8fe6dc6b4","modified":1527903143242},{"_id":"source/image/graduation/test-api-result.png","hash":"1810e293f7f74edf80f691c4133809e6939f2a12","modified":1527902239537},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518941557529},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518941557529},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518941557533},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518941557533},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518941557533},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518941557537},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518941557537},{"_id":"source/_drafts/2018/01/README.md","hash":"8b9fef0eef79902ba73e081485c3af5e767d4158","modified":1518941557445},{"_id":"source/_drafts/2018/01/sprint-4.md","hash":"639482fdae3e6147eff918e1eb9d0a941b30825c","modified":1518941557445},{"_id":"source/_drafts/2018/01/back-2-font-xinfa-1-3.0.md","hash":"b4749f8e752e17e781f7b3e8eacf34e30d68eb85","modified":1518941557445},{"_id":"source/_drafts/2018/01/back-2-font-xinfa-1-4.0.md","hash":"2fc9688e81acb924287e6ea742c47fe0bf92878c","modified":1518941557445},{"_id":"source/_drafts/code/xinfan-1/clear-float.html","hash":"e7ca93928adb7d6979fe105f7a6a340364f68b34","modified":1518941557445},{"_id":"source/_drafts/code/xinfan-1/div-show-after.html","hash":"f05410dcc76021dce3d96b86b7cd1bef2bb90e5e","modified":1518941557445},{"_id":"source/_drafts/code/xinfan-1/div-span-show.html","hash":"11fbcd16635e379945e3705a4ddd4476d66cc9d1","modified":1518941557445},{"_id":"source/_drafts/code/xinfan-1/div-show.html","hash":"c38e4a15ce49487e8c904319d98120c08012bfe9","modified":1518941557445},{"_id":"source/_drafts/code/xinfan-1/float-before.html","hash":"99a0906ba8e2a749f569d9998f79532bc451ff95","modified":1518941557445},{"_id":"source/_drafts/code/xinfan-1/float-demo-2.html","hash":"fa516d4ddbf304eb4eb5af3ffffef45e660505f0","modified":1518941557445},{"_id":"source/_drafts/code/xinfan-1/float-demo.html","hash":"09c6fb5c5ff846bbc8c5ca4a40b1044bc186f40d","modified":1518941557445},{"_id":"source/_drafts/code/xinfan-1/float-problem.html","hash":"62c6b7a55395b84baa3739145e3174317e4ef739","modified":1518941557445},{"_id":"source/_drafts/code/xinfan-1/innerline-element.html","hash":"750406f906e3faac13be827a8a2951eed791516b","modified":1518941557445},{"_id":"source/_posts/2017/12/back-2-font-koujue.md","hash":"df7187eaf6cb1f97f1a930c7eeaf19bd91c845f0","modified":1518941557445},{"_id":"source/_drafts/code/xinfan-1/parentDiv.html","hash":"df2f7e636773f353851f283c2e9b1bb72ab6835c","modified":1518941557445},{"_id":"source/_posts/2018/10/ScalaProp.md","hash":"45738f53bec57572588cd14faefb113885fb584c","modified":1539511210463},{"_id":"source/_posts/2018/10/scala-Highter-kind-type.md","hash":"9007a80aeadb4e0bbb57c0c46dbea670960da47c","modified":1540217781865},{"_id":"source/_posts/2017/12/back-2-font-xinfa-1.md","hash":"16f0a6fe33813047f00d5767a8706486e5d7d79c","modified":1518941557445},{"_id":"source/_drafts/code/xinfan-1/simple.html","hash":"eca22b7330d11e1195e79419e53737ba6ca40262","modified":1518941557445},{"_id":"source/image/back-2-font-xinfa-1/douban-index.png","hash":"b6ccd258b1e807372dbe114dddeeb5b575e82260","modified":1518941557473},{"_id":"source/image/back-2-font-xinfa-1/float-layout.jpg","hash":"ac96348c2fe8c7c051ba32c93b6469c5c410dd7c","modified":1518941557473},{"_id":"source/image/backend-enter-font-end/douban-box.png","hash":"61aad08e73299241a318aec3da1f4c234bb95649","modified":1518941557505},{"_id":"source/image/backend-enter-font-end/douban-part.png","hash":"f6f77450c246751c6c217a052d442a2c113eaa01","modified":1518941557517},{"_id":"source/_posts/2018/02/Form-Java2Scala-1-oop.md","hash":"787c17bd61fac87f01a7e2964650823ea64f8344","modified":1521988399136},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1518941557529},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1518941557529},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1518941557529},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1518941557529},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1518941557529},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1518941557529},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1518941557529},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1518941557529},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1518941557529},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1518941557529},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1518941557529},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1518941557529},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1518941557529},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1518941557529},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1518941557529},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1518941557529},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1518941557533},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1518941557533},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1518941557533},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1518941557533},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1518941557533},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1518941557529},{"_id":"source/_posts/2018/03/back-2-front-xinfa-2.md","hash":"2d085ed7f0116d7c9fccb4e22299dd20f1793ba3","modified":1522551859555},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1518941557529},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1518941557529},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1518941557529},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1518941557529},{"_id":"source/_posts/2018/06/TypeVSOptional.md","hash":"77328d2160ba181464ac2302953df40c4b523de0","modified":1529495443333},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1518941557529},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1518941557529},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1518941557529},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1518941557529},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1518941557533},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1518941557533},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1518941557533},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1518941557533},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1518941557529},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1518941557529},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1518941557533},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1518941557533},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1518941557533},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1518941557529},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1518941557533},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1518941557537},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1518941557537},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1518941557537},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1518941557541},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1518941557537},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1518941557537},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1518941557537},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1518941557537},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1518941557537},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1518941557537},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1518941557537},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1518941557537},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1518941557537},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1518941557537},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1518941557537},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1518941557537},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1518941557537},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1518941557541},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1518941557541},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1518941557541},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1518941557541},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1518941557541},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1518941557541},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1518941557541},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1518941557545},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1518941557545},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1518941557545},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1518941557545},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1518941557545},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1518941557545},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1518941557545},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1518941557541},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1518941557545},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1518941557545},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1518941557541},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1518941557545},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1518941557545},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1518941557541},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1518941557545},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1518941557545},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1518941557545},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1518941557545},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1518941557545},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1518941557545},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1518941557545},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1518941557545},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1518941557545},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1518941557545},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1518941557545},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1518941557545},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1518941557545},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1518941557545},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1518941557549},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1518941557549},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1518941557549},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1518941557549},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1518941557549},{"_id":"source/image/back-2-font-xinfa-1/block-element.jpg","hash":"3679e0beed2efb99f0d68822a2a3768455342879","modified":1518941557445},{"_id":"source/image/back-2-font-xinfa-1/float-right.jpg","hash":"2b9993bee6e7e99c4f01105bd01149bb901c5e54","modified":1518941557473},{"_id":"source/image/backend-enter-font-end/douban-index-first.png","hash":"efaac233b730d3081e57d6511ebedf44b451c1c2","modified":1518941557509},{"_id":"source/image/backend-enter-font-end/douban-index-second.png","hash":"330fdc8109a4334588ad3b778042bb2425f2faf2","modified":1518941557509},{"_id":"source/image/backend-enter-font-end/douban-index.png","hash":"f437f235e7b2bd369699c057662352fbf8d1afcb","modified":1518941557513},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1518941557529},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1518941557545},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1518941557545},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1518941557545},{"_id":"source/image/back-2-font-xinfa-1/block-inline-elemet.jpg","hash":"f386c824946c13223b8efc0ef3878340f51df1e7","modified":1518941557445},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1518941557533},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1518941557533},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1518941557533},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1518941557533},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1518941557533},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1518941557533},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1518941557533},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1518941557533},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1518941557533},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1518941557533},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1518941557533},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1518941557533},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1518941557533},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1518941557533},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1518941557533},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1518941557533},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1518941557533},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1518941557537},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1518941557537},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1518941557537},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1518941557537},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1518941557537},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1518941557537},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1518941557537},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1518941557537},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1518941557537},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1518941557537},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1518941557537},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1518941557537},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1518941557537},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1518941557541},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1518941557541},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1518941557541},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1518941557541},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1518941557541},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1518941557537},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1518941557541},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1518941557537},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1518941557541},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1518941557541},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1518941557541},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1518941557541},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1518941557541},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1518941557541},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1518941557541},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1518941557549},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1518941557541},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1518941557549},{"_id":"source/image/backend-enter-font-end/douban-index- second.png","hash":"30a89ddaa879d822e0db659cd2d5700305943531","modified":1518941557509},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1518941557537},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1518941557545},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1518941557549},{"_id":"source/survey/web-Semantic/1006.4567.pdf","hash":"fc3fc9be203aeaf72b4737c28e4f4ac1ea3dadd1","modified":1521462399565},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1518941557545},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1518941557533},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1518941557533},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1518941557533},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1518941557537},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1518941557537},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1518941557533},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1518941557537},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1518941557533},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1518941557533},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1518941557537},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1518941557541},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1518941557541},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1518941557541},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1518941557541},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1518941557537},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1518941557545},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1518941557541},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1518941557545},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1518941557537},{"_id":"source/image/back-2-font-xinfa-1/line.png","hash":"8dde9d8e5502160276a24895822731e766caefee","modified":1518941557477},{"_id":"source/image/back-2-font-xinfa-1/tianmao-2.png","hash":"3da4c2400cadef20f418a4897af1074e4ba5a752","modified":1518941557501},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1518941557541},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1518941557541},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1518941557541},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1518941557549},{"_id":"source/image/back-2-font-xinfa-1/douban-1.png","hash":"c5997b397a0ced894ab0d00feed9544094184ab9","modified":1518941557461},{"_id":"source/image/back-2-font-xinfa-1/douban-2.png","hash":"476215395d20b9f59713e6e072eced9f36e0971e","modified":1518941557473},{"_id":"source/image/back-2-font-xinfa-1/tianmao-1.png","hash":"7ca8e7fce4f91e37f4735dffd3c0f635a21e9f09","modified":1518941557489},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1518941557545},{"_id":"source/image/backend-enter-font-end/desk.png","hash":"e07f2e5e965d5e1057ca8866fec6972cc86600f0","modified":1518941557505},{"_id":"source/image/back-2-font-xinfa-1/douban-1.jpg","hash":"84cd34055dc64379333c4eec6f46f4006afd7da9","modified":1518941557457},{"_id":"source/image/back-2-font-xinfa-1/tianmao-2.jpg","hash":"39ccf825fbf24767adbdea4e5bea010b5bbb2a31","modified":1518941557501},{"_id":"source/image/back-2-font-xinfa-1/douban-2.jpg","hash":"c4ac1d76429057e966973e6dcf2e483129b8fcd3","modified":1518941557469},{"_id":"source/image/back-2-font-xinfa-1/tianmao-1.jpg","hash":"4965cd87c166338693efbd5e8d058d1ea4b8e129","modified":1518941557489}],"Category":[{"name":"前端页面重构系列","_id":"cjnkdcpk50005mc55re47r1j6"},{"name":"指导手册","_id":"cjnkdcpnf0012mc55bqnhsu8t"},{"name":"编程语言","_id":"cjnkdcpnk0018mc55d4b2dzjq"}],"Data":[],"Page":[{"title":"关于 KnewHow","date":"2018-10-13T07:25:24.000Z","_content":"\nKnewHow 是一名全栈的 Web 工程师，目前的兴趣在于 FP in Scala 和算法. 技术栈为 Scala，Vue。现在只会写写增删改查和切页面。\n\n最近根据 FP In Scala 书中的例子写了一个测试用例的生成器，我想在之后学习算法的时候，可以使用它来测试我的算法，如果有兴趣你可以去了解一下[ScalaProp。](https://github.com/KnewHow/ScalaProp)\n\n最近准备学习算法导论，想使用纯函数式的代码来解决书上的习题，这是一项非常耗时的工程，如果你有兴趣的可以和我一起，[FPAlgorithms。](https://github.com/KnewHow/FPAlgorithms)\n\n我的邮箱：how.yuangh@gmail.com 或者 948170910@qq.com\n","source":"about/index.md","raw":"---\ntitle: 关于 KnewHow\ndate: 2018-10-13 15:25:24\n---\n\nKnewHow 是一名全栈的 Web 工程师，目前的兴趣在于 FP in Scala 和算法. 技术栈为 Scala，Vue。现在只会写写增删改查和切页面。\n\n最近根据 FP In Scala 书中的例子写了一个测试用例的生成器，我想在之后学习算法的时候，可以使用它来测试我的算法，如果有兴趣你可以去了解一下[ScalaProp。](https://github.com/KnewHow/ScalaProp)\n\n最近准备学习算法导论，想使用纯函数式的代码来解决书上的习题，这是一项非常耗时的工程，如果你有兴趣的可以和我一起，[FPAlgorithms。](https://github.com/KnewHow/FPAlgorithms)\n\n我的邮箱：how.yuangh@gmail.com 或者 948170910@qq.com\n","updated":"2018-10-13T08:06:26.666Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjnkdcp9s0000mc551b64f5td","content":"<p>KnewHow 是一名全栈的 Web 工程师，目前的兴趣在于 FP in Scala 和算法. 技术栈为 Scala，Vue。现在只会写写增删改查和切页面。</p>\n<p>最近根据 FP In Scala 书中的例子写了一个测试用例的生成器，我想在之后学习算法的时候，可以使用它来测试我的算法，如果有兴趣你可以去了解一下<a href=\"https://github.com/KnewHow/ScalaProp\" target=\"_blank\" rel=\"noopener\">ScalaProp。</a></p>\n<p>最近准备学习算法导论，想使用纯函数式的代码来解决书上的习题，这是一项非常耗时的工程，如果你有兴趣的可以和我一起，<a href=\"https://github.com/KnewHow/FPAlgorithms\" target=\"_blank\" rel=\"noopener\">FPAlgorithms。</a></p>\n<p>我的邮箱：how.yuangh@gmail.com 或者 948170910@qq.com</p>\n","site":{"data":{}},"excerpt":"","more":"<p>KnewHow 是一名全栈的 Web 工程师，目前的兴趣在于 FP in Scala 和算法. 技术栈为 Scala，Vue。现在只会写写增删改查和切页面。</p>\n<p>最近根据 FP In Scala 书中的例子写了一个测试用例的生成器，我想在之后学习算法的时候，可以使用它来测试我的算法，如果有兴趣你可以去了解一下<a href=\"https://github.com/KnewHow/ScalaProp\" target=\"_blank\" rel=\"noopener\">ScalaProp。</a></p>\n<p>最近准备学习算法导论，想使用纯函数式的代码来解决书上的习题，这是一项非常耗时的工程，如果你有兴趣的可以和我一起，<a href=\"https://github.com/KnewHow/FPAlgorithms\" target=\"_blank\" rel=\"noopener\">FPAlgorithms。</a></p>\n<p>我的邮箱：how.yuangh@gmail.com 或者 948170910@qq.com</p>\n"},{"title":"All categories","date":"2018-01-04T02:52:51.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: All categories\ndate: 2018-01-04 10:52:51\ntype: \"categories\"\n---\n","updated":"2018-02-18T08:12:37.445Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjnkdcp9u0001mc55w35chrax","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"All tags","date":"2018-01-04T02:42:42.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2018-01-04 10:42:42\ntype: \"tags\"\n---\n","updated":"2018-02-18T08:12:37.517Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjnkdcp9w0002mc55qnuxu771","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"后端工程师入门前端页面重构（二）：心法 I","date":"2018-01-04T16:00:00.000Z","_content":"\n上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：\n\n**从左到右，从上到下，化整为零。**\n\n那么在接下来的几篇文章中，我们就来聊聊页面布局的「心法」和一些具体的「招式」。\n\n那么什么是心法呢？\n\n<!-- more -->\n\n如果说口诀是页面布局的原则，那么心法就是对页面布局中一些重要概念的认识。\n\n在上一篇文章，我们一直推荐使用高效的浮动布局，类似大家都玩过的磁铁，在磁铁的周围，所有的铁块会被磁铁所吸引。\n\n那么浮动就好比页面上的一块磁铁，它会吸引页面上的元素块，让它们朝一个方向进行组合、包含、交叠，进而完成整个页面的布局。\n\n下面就让我们来看看页面中元素有什么类型。\n\n## HTML 块状元素和行内元素\n\n在我们熟知的页面布局中，网页的标题，logo等都是有高度和宽度的。我们来看下面的豆瓣首页的切图：\n\n![豆瓣首页切图](/image/back-2-font-xinfa-1/douban-index.png)\n\n在上面的图片中，我们使用红色的线条和文字标注豆瓣 logo 的高度和宽度。不仅仅的 logo 图有高度和宽度，搜索框，热搜主题等其它元素，几乎都有高度和宽度。\n\n那么在 HTML 语言中，我们如何指定元素的高度和宽度呢？\n\n我们先来写一段 HTML：\n\n```html\n<div>这是 div 标签里面的内容</div>\n<span>这是 span 标签的内容</span>\n```\n\n然后给它们定义样式：\n\n```css\ndiv {\n  background-color: red;\n  height: 100px;\n  width: 300px;\n}\nspan {\n  background-color: green;\n  height: 100px;\n  width: 300px;\n```\n\n效果如下：\n\n![效果图](/image/back-2-font-xinfa-1/html-css-show.png)\n\n发现一个问题：\n\n**我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？**\n\n\n其实在 HTML 中，我们可以把标签分为「块状元素」和「行内元素」，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。\n\n那么这两类元素有什么区别呢？\n\n从我们的代码的效果图里面我们已经看出来一个区别了：**块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。**\n\n我们把上面元素的宽度和高度都删除，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。\n\n![效果图](/image/back-2-font-xinfa-1/block-inline-elemet.png)\n\n是不是又看出来一个区别呢？\n\n**块状元素是独占一行的，而行内元素只占本身内容的大小。**\n\n看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。\n\n![效果图](/image/back-2-font-xinfa-1/block-element.jpg)\n\n**即使我们设置了块状元素的高度和宽度，它还是独占一行的**。真的是霸道啊！\n\n然而，现实中的网页（如豆瓣），很多内容块都是拼接的，如果我们使用块状元素来表示这些内容块，如果消除它独占一行的情况呢？\n\n\n关于这个问题，似乎有两种解决方案。\n\n\n## inline-block\n\n其实在 css 的 diplay 属性中，有一个属性值 `inline-block` 可以将标签呈现出「块状元素」和「行内元素」之间的中间态，即它可以拥有宽高度的同时，也可以具备行内元素的占位属性。\n\n\n\n说了这么多，我好像还是没有教你们如何去写一个浮动布局。\n\n咳咳，下面正式开始。\n\n\n## 为什么要使用浮动布局\n\n在开始之前，我们按照套路，还是要问一个问题：为什么要使用浮动布局，仅仅是因为它是高效的？\n\n答案当然是否定的。\n\n在上面的我们分析了块状元素是独占一行的，但是在页面布局的时候，往往都是要求许多块状元素是在一行的。\n\n怎么解决这个问题呢？\n\n解决问题有两种方案：\n* 我们可以使用 CSS 把块状元素变成行内元素\n* 我们使用浮动\n\n对于第一种方案，我们直接否定！**因为它存在误差！**\n\n看下面的一段代码：\n\n{% codeblock lang:html %}\n\t<style type=\"text/css\">\n\t\t.div-1{\n\t\t\tbackground-color: red;\n\t\t\tdisplay: inline-block;\n\t\t\n\t\t}\n\n\t\t.div-2{\n\t\t\tbackground-color: green;\n\t\t\tdisplay:inline-block;\n\t\t}\n\t</style>\n\n\n\t<div class=\"div-1\">123</div>\n\t<div class=\"div-2\">123</div>\n{% endcodeblock %}\n\n上面的这段代码，我们使用块状元素 div 写了两个区块，并且使用 \n{% codeblock lang:html %}\n    display:inline-block; \n{% endcodeblock %} \n\n让块状元素 div 来作为行内元素显示，然后我们来看效果：\n\n![行内元素误差效果显示](/image/back-2-font-xinfa-1/inline-element-error.png)\n\n我们发现**虽然两个 div 可以变成行内元素在一行显示，但是它们之间还是存在空白，不能完美的相邻在一起。**\n\n因此浮动布局才是我们解决问题的理想方法。下面我们就开始来写一个浮动布局吧。\n\n## 一个简单的浮动布局\n\n首先我们画两个 div，并且设置它们的背景颜色，高度以及宽度，代码如下：\n\n{% codeblock lang:html %}\n\t<style type=\"text/css\">\n\t    .block-1{\n\t\twidth: 200px;\n\t\theight: 200px;\n\t\tbackground: red;\n\t    }\n\n\t    .block-2{\n\t\twidth: 200px;\n\t\theight: 200px;\n\t\tbackground: green;\n\t    }\n\t</style>\n\n\t<div class=\"block-1\">\n\t这是第一个区块\n\t</div>\n\n\t<div class=\"block-2\">\n\t这是第二个区块\n\t</div>\n{% endcodeblock %} \n\n打开浏览器看效果是这个样子滴：\n\n![浮动之前的效果图](/image/back-2-font-xinfa-1/float-layout.png)\n\n这个效果很正常嘛。 div 作为很霸道的块状元素，当然占据一整行，两个 div 就分别占据两行喽。\n\n下面我们就要使用浮动了，注意看清楚哦！\n\n我们只要在上面代码中 div 的 class 选择器里面添加如下代码即可实现浮动。\n\n{% codeblock lang:html %}\n    float: left;\n{% endcodeblock %}\n\n来来来，代码走一波！\n\n{% codeblock lang:html %}\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n                float: left;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n                float: left;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n{% endcodeblock %}\n\n然后我们用浏览器打开看效果：\n\n![简单浮动效果图](/image/back-2-font-xinfa-1/float-layout-show-1.png)\n\n我们发现两个原本很难相邻在一起的块状元素，竟然完美的 **无缝** 的相邻在一起。\n\n是不是很简单呢？我们只要添加 「 float: left;」即可实现浮动。你们学会了吗？\n\n现在让我们重新来看一下「 float: left;」这段代码。\n\n我们都知道「 float 」这个字是指定使用浮动的关键字，但是「 left 」是干嘛用的？难道还是指定 right？\n\n当然可以啦。left 的意思是指定左浮动，意思是让元素悬浮在浏览器的左边，right是相反的意思，让元素悬浮在浏览器右边。\n\n## 父元素高度问题\n在实际开发中，我们经常需要标签的嵌套使用，下面我们来模拟一下场景，代码如下：\n{% codeblock lang:html %}\n\t<style type=\"text/css\">\n\t    .block-1{\n\t\twidth: 200px;\n\t\theight: 200px;\n\t\tfloat: left;\n\t\tbackground: red;\n\t    }\n\n\t    .block-2{\n\t\twidth: 200px;\n\t\theight: 200px;\n\t\tfloat: left;\n\t\tbackground: green;\n\t    }\n\t</style>\n\n\t<div class=\"parent\">\n\t    <div class=\"block-1\">\n\t\t我是第一个子元素\n\t    </div>\n\n\t    <div class=\"block-2\">\n\t\t我是第二个子元素\n\t    </div>\n\t</div>\n{% endcodeblock %}\n\n\n这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。\n\n![](/image/back-2-font-xinfa-1/second-check-child.png)\n\n子元素宽度和高度都是 OK 的。\n\n我们再来看看它父元素高度和宽度。\n\n![](/image/back-2-font-xinfa-1/parent-check.png)\n\n我去！父元素的高度竟然是 **０**！！　我是不是安装了假的浏览器？\n\n\n## 清除浮动\n还是嵌套的使用元素标签，代码如下：\n{% codeblock lang:html %}\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n            }\n        </style>\n\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n        </div>\n{% endcodeblock %}\n\n不用看效果图我们都知道：**子元素高度正常，父元素高度为0。**\n现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做？\n\n这就要使用到另个招式： 「清除浮动」。\n\n我们只要在第三块区块的「.third」中添加\n{% codeblock lang:html %}\n    clear: left;\n{% endcodeblock %} \n\n即可。\n\n话不多说，让我们先看效果。\n\n![添加 clear: left;的效果图](/image/back-2-font-xinfa-1/add-clear-left-1.png)\n\n真的把第三个区块给压下来了！\n\n\n\n还是按照上面的套路，我们来分析「 clear: left; 」这段代码：\n\n它用到的关键字是「 clear 」，它的含义是清除。\n\n而 「 left 」 代表是左边。\n\n那么它合起来的意思是：**清除左边的浮动元素**。\n\n说到更明白一点就是：**不让当前元素的左边有浮动元素。**\n\n当前元素是第三个区块，它的左边有两个浮动元素 first 和second 。\n\n那这段代码的意思就是：**不让第三个区块左边有浮动元素**，那浏览器这么处理呢？\n\n浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到 **下一行** 来吧！”\n\n于是第三个区块就到了下一行啦。\n\n虽然有点复杂，但是按照上面思路进行一步步分解，是不是就变的很简单呢？\n\n让我们再来拓展一下，clear 除了可以设置为 left，还可以设置为 「 right 」 和 「 both 」。\n\n我相信不用我说你们也明白了吧！\n\nright 就是不让当前元素 **右边** 存在浮动元素嘛。\n\n那 both 就是不让当前元素的 **两边** 出现浮动元素喽。\n\n说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！\n\n这个有点尴尬！\n\n## 父元素高度真的需要吗？\n\n那么，在解决之前，按照我们的套路，我们要问一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。\n\n我的实习导师告诉我：“这是不行的。**浮动布局的占位空间往往是我们理想的父元素高度。**”\n\n他说的太抽象，我们来说的直白一点：\n\n「在布局中我们往往使用 **浮动布局** 来实现某一块区域的布局」。\n\n「然后我们最好用一个DIV去 **包裹** 整个浮动布局，用于和其它的布局区分开」。\n\n「最后我们要求这个父DIV和高度要和浮动布局的 **高度** 一样」。\n\n对于上面的三点内容，前两点在我们的代码中已经做到了。\n\n想要解决第三个问题，就得使用我们上面讲的招式- **清除浮动**。\n\n我们在父区块最后面增加一个空的DIV，将它设置它为「 clear:both 」。\n\n为什么要这么使用呢，具体的原因我也讲不清楚，大概是这样的吧：\n\n因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受 **任何** 浮动元素干扰,我们必须清除浮动对它的干扰。\n\n来来来，代码走一波！\n\n{% codeblock lang:html %}\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n            .last{\n                clear: both;\n            }\n        </style>\n\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n            <div class=\"last\">\n    \n            </div>\n        </div>\n{% endcodeblock %}\n\n然后我们会发现，父元素竟然有高度了，而且和浮动布局的高度是一样的！\n\n![父元素有高度了](/image/back-2-font-xinfa-1/parrent-height.png)\n\n哈哈，到了这里，我们已经完全解决父元素高度为 0 的问题，那么我想问：\n\n上面的解决方法是最好的吗？\n\n\n## 清除浮动－最佳实践\n\n按照套路，我们得问一个问题：上面的解决方案有问题吗？\n\n回答是肯定的！\n\n因为按照上面的方法，我们需要在 **手动** 在每个父区块最后添加一个空的 DIV，这样的做法是 **低效的**！\n\n因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。\n\n我们可不可以在某个地方统一定义，然后全局使用呢？\n\n回答是当然可以啦。\n\n这个要使用到另一个新的招式-CSS 的「伪类」,伪类的具体用法可以参考[W3C的CSS伪类教程。](http://www.w3school.com.cn/css/css_pseudo_elements.asp)\n\n我们这里使用的是「after」伪类，它可以自动的在某个父元素的最后一行添加最后一个子元素，并且设置属性。\n\n上面的话有点拗口，来来来，我们直接上代码分析：\n\n{% codeblock lang:html %}\n    .parent:after{\n        /*设置最后一个元素的内容为空*/\n        content: \"\";\n        /*设置最后一个元素为清除两边浮动*/\n        clear: both;\n        /*设置最后一个元素为块状元素*/\n        display: block;\n    }\n\n{% endcodeblock %}\n\n上面的代码会自动在「parent」作用的标签的最后一行添加一个子元素，并且设置该元素为「块状元素」「内容为空」以及「清除浮动」。\n\n只要把父元素的 class属性设置值为 「parent」，那么就可以直接使用啦。\n\n来来来，让我们完整的敲一次代码！\n\n{% codeblock lang:html %}\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n    \n            /*\n              伪类\n             */\n            .parent:after{\n                /*设置最后一个元素的内容为空*/\n                content: \"\";\n                /*设置最后一个元素为清除两边浮动*/\n                clear: both;\n                /*设置最后一个元素为块状元素*/\n                display: block;\n            }\n        </style>\n\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n    \n        </div>\n{% endcodeblock %}\n\n![使用最佳实践-伪类后的效果图](/image/back-2-font-xinfa-1/div-float-after.png)\n\n## 心法小结\n\n\n最后，我们再来回顾一下文章介绍的一些心法：\n\n**1. HTML 分为块状元素和行内元素的，块状元素是独占一行的**\n\n**2. 浮动布局是解决多个块状元素在同一行的最佳方法**\n\n**3. 在嵌套的标签中使用浮动时，如果不使用清除浮动，父元素的高度会为0**\n\n**4. 清除浮动 + after伪类 是浮动布局的一个最佳实践**\n\n文章中的一些招式可能说的太粗糙，先不用捉急，我们先学心法，招式到后面再专门的学习。\n\n我会在下一篇博文继续介绍心法 II。\n\n","source":"_drafts/xinfa-1/back-2-font-xinfa-1-4.0.md","raw":"\n---\ntitle: 后端工程师入门前端页面重构（二）：心法 I\ndate: 2018/01/05\ncategories: 前端页面重构系列\ntags:\n- 前端\n---\n\n上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：\n\n**从左到右，从上到下，化整为零。**\n\n那么在接下来的几篇文章中，我们就来聊聊页面布局的「心法」和一些具体的「招式」。\n\n那么什么是心法呢？\n\n<!-- more -->\n\n如果说口诀是页面布局的原则，那么心法就是对页面布局中一些重要概念的认识。\n\n在上一篇文章，我们一直推荐使用高效的浮动布局，类似大家都玩过的磁铁，在磁铁的周围，所有的铁块会被磁铁所吸引。\n\n那么浮动就好比页面上的一块磁铁，它会吸引页面上的元素块，让它们朝一个方向进行组合、包含、交叠，进而完成整个页面的布局。\n\n下面就让我们来看看页面中元素有什么类型。\n\n## HTML 块状元素和行内元素\n\n在我们熟知的页面布局中，网页的标题，logo等都是有高度和宽度的。我们来看下面的豆瓣首页的切图：\n\n![豆瓣首页切图](/image/back-2-font-xinfa-1/douban-index.png)\n\n在上面的图片中，我们使用红色的线条和文字标注豆瓣 logo 的高度和宽度。不仅仅的 logo 图有高度和宽度，搜索框，热搜主题等其它元素，几乎都有高度和宽度。\n\n那么在 HTML 语言中，我们如何指定元素的高度和宽度呢？\n\n我们先来写一段 HTML：\n\n```html\n<div>这是 div 标签里面的内容</div>\n<span>这是 span 标签的内容</span>\n```\n\n然后给它们定义样式：\n\n```css\ndiv {\n  background-color: red;\n  height: 100px;\n  width: 300px;\n}\nspan {\n  background-color: green;\n  height: 100px;\n  width: 300px;\n```\n\n效果如下：\n\n![效果图](/image/back-2-font-xinfa-1/html-css-show.png)\n\n发现一个问题：\n\n**我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？**\n\n\n其实在 HTML 中，我们可以把标签分为「块状元素」和「行内元素」，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。\n\n那么这两类元素有什么区别呢？\n\n从我们的代码的效果图里面我们已经看出来一个区别了：**块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。**\n\n我们把上面元素的宽度和高度都删除，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。\n\n![效果图](/image/back-2-font-xinfa-1/block-inline-elemet.png)\n\n是不是又看出来一个区别呢？\n\n**块状元素是独占一行的，而行内元素只占本身内容的大小。**\n\n看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。\n\n![效果图](/image/back-2-font-xinfa-1/block-element.jpg)\n\n**即使我们设置了块状元素的高度和宽度，它还是独占一行的**。真的是霸道啊！\n\n然而，现实中的网页（如豆瓣），很多内容块都是拼接的，如果我们使用块状元素来表示这些内容块，如果消除它独占一行的情况呢？\n\n\n关于这个问题，似乎有两种解决方案。\n\n\n## inline-block\n\n其实在 css 的 diplay 属性中，有一个属性值 `inline-block` 可以将标签呈现出「块状元素」和「行内元素」之间的中间态，即它可以拥有宽高度的同时，也可以具备行内元素的占位属性。\n\n\n\n说了这么多，我好像还是没有教你们如何去写一个浮动布局。\n\n咳咳，下面正式开始。\n\n\n## 为什么要使用浮动布局\n\n在开始之前，我们按照套路，还是要问一个问题：为什么要使用浮动布局，仅仅是因为它是高效的？\n\n答案当然是否定的。\n\n在上面的我们分析了块状元素是独占一行的，但是在页面布局的时候，往往都是要求许多块状元素是在一行的。\n\n怎么解决这个问题呢？\n\n解决问题有两种方案：\n* 我们可以使用 CSS 把块状元素变成行内元素\n* 我们使用浮动\n\n对于第一种方案，我们直接否定！**因为它存在误差！**\n\n看下面的一段代码：\n\n{% codeblock lang:html %}\n\t<style type=\"text/css\">\n\t\t.div-1{\n\t\t\tbackground-color: red;\n\t\t\tdisplay: inline-block;\n\t\t\n\t\t}\n\n\t\t.div-2{\n\t\t\tbackground-color: green;\n\t\t\tdisplay:inline-block;\n\t\t}\n\t</style>\n\n\n\t<div class=\"div-1\">123</div>\n\t<div class=\"div-2\">123</div>\n{% endcodeblock %}\n\n上面的这段代码，我们使用块状元素 div 写了两个区块，并且使用 \n{% codeblock lang:html %}\n    display:inline-block; \n{% endcodeblock %} \n\n让块状元素 div 来作为行内元素显示，然后我们来看效果：\n\n![行内元素误差效果显示](/image/back-2-font-xinfa-1/inline-element-error.png)\n\n我们发现**虽然两个 div 可以变成行内元素在一行显示，但是它们之间还是存在空白，不能完美的相邻在一起。**\n\n因此浮动布局才是我们解决问题的理想方法。下面我们就开始来写一个浮动布局吧。\n\n## 一个简单的浮动布局\n\n首先我们画两个 div，并且设置它们的背景颜色，高度以及宽度，代码如下：\n\n{% codeblock lang:html %}\n\t<style type=\"text/css\">\n\t    .block-1{\n\t\twidth: 200px;\n\t\theight: 200px;\n\t\tbackground: red;\n\t    }\n\n\t    .block-2{\n\t\twidth: 200px;\n\t\theight: 200px;\n\t\tbackground: green;\n\t    }\n\t</style>\n\n\t<div class=\"block-1\">\n\t这是第一个区块\n\t</div>\n\n\t<div class=\"block-2\">\n\t这是第二个区块\n\t</div>\n{% endcodeblock %} \n\n打开浏览器看效果是这个样子滴：\n\n![浮动之前的效果图](/image/back-2-font-xinfa-1/float-layout.png)\n\n这个效果很正常嘛。 div 作为很霸道的块状元素，当然占据一整行，两个 div 就分别占据两行喽。\n\n下面我们就要使用浮动了，注意看清楚哦！\n\n我们只要在上面代码中 div 的 class 选择器里面添加如下代码即可实现浮动。\n\n{% codeblock lang:html %}\n    float: left;\n{% endcodeblock %}\n\n来来来，代码走一波！\n\n{% codeblock lang:html %}\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n                float: left;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n                float: left;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n{% endcodeblock %}\n\n然后我们用浏览器打开看效果：\n\n![简单浮动效果图](/image/back-2-font-xinfa-1/float-layout-show-1.png)\n\n我们发现两个原本很难相邻在一起的块状元素，竟然完美的 **无缝** 的相邻在一起。\n\n是不是很简单呢？我们只要添加 「 float: left;」即可实现浮动。你们学会了吗？\n\n现在让我们重新来看一下「 float: left;」这段代码。\n\n我们都知道「 float 」这个字是指定使用浮动的关键字，但是「 left 」是干嘛用的？难道还是指定 right？\n\n当然可以啦。left 的意思是指定左浮动，意思是让元素悬浮在浏览器的左边，right是相反的意思，让元素悬浮在浏览器右边。\n\n## 父元素高度问题\n在实际开发中，我们经常需要标签的嵌套使用，下面我们来模拟一下场景，代码如下：\n{% codeblock lang:html %}\n\t<style type=\"text/css\">\n\t    .block-1{\n\t\twidth: 200px;\n\t\theight: 200px;\n\t\tfloat: left;\n\t\tbackground: red;\n\t    }\n\n\t    .block-2{\n\t\twidth: 200px;\n\t\theight: 200px;\n\t\tfloat: left;\n\t\tbackground: green;\n\t    }\n\t</style>\n\n\t<div class=\"parent\">\n\t    <div class=\"block-1\">\n\t\t我是第一个子元素\n\t    </div>\n\n\t    <div class=\"block-2\">\n\t\t我是第二个子元素\n\t    </div>\n\t</div>\n{% endcodeblock %}\n\n\n这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。\n\n![](/image/back-2-font-xinfa-1/second-check-child.png)\n\n子元素宽度和高度都是 OK 的。\n\n我们再来看看它父元素高度和宽度。\n\n![](/image/back-2-font-xinfa-1/parent-check.png)\n\n我去！父元素的高度竟然是 **０**！！　我是不是安装了假的浏览器？\n\n\n## 清除浮动\n还是嵌套的使用元素标签，代码如下：\n{% codeblock lang:html %}\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n            }\n        </style>\n\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n        </div>\n{% endcodeblock %}\n\n不用看效果图我们都知道：**子元素高度正常，父元素高度为0。**\n现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做？\n\n这就要使用到另个招式： 「清除浮动」。\n\n我们只要在第三块区块的「.third」中添加\n{% codeblock lang:html %}\n    clear: left;\n{% endcodeblock %} \n\n即可。\n\n话不多说，让我们先看效果。\n\n![添加 clear: left;的效果图](/image/back-2-font-xinfa-1/add-clear-left-1.png)\n\n真的把第三个区块给压下来了！\n\n\n\n还是按照上面的套路，我们来分析「 clear: left; 」这段代码：\n\n它用到的关键字是「 clear 」，它的含义是清除。\n\n而 「 left 」 代表是左边。\n\n那么它合起来的意思是：**清除左边的浮动元素**。\n\n说到更明白一点就是：**不让当前元素的左边有浮动元素。**\n\n当前元素是第三个区块，它的左边有两个浮动元素 first 和second 。\n\n那这段代码的意思就是：**不让第三个区块左边有浮动元素**，那浏览器这么处理呢？\n\n浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到 **下一行** 来吧！”\n\n于是第三个区块就到了下一行啦。\n\n虽然有点复杂，但是按照上面思路进行一步步分解，是不是就变的很简单呢？\n\n让我们再来拓展一下，clear 除了可以设置为 left，还可以设置为 「 right 」 和 「 both 」。\n\n我相信不用我说你们也明白了吧！\n\nright 就是不让当前元素 **右边** 存在浮动元素嘛。\n\n那 both 就是不让当前元素的 **两边** 出现浮动元素喽。\n\n说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！\n\n这个有点尴尬！\n\n## 父元素高度真的需要吗？\n\n那么，在解决之前，按照我们的套路，我们要问一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。\n\n我的实习导师告诉我：“这是不行的。**浮动布局的占位空间往往是我们理想的父元素高度。**”\n\n他说的太抽象，我们来说的直白一点：\n\n「在布局中我们往往使用 **浮动布局** 来实现某一块区域的布局」。\n\n「然后我们最好用一个DIV去 **包裹** 整个浮动布局，用于和其它的布局区分开」。\n\n「最后我们要求这个父DIV和高度要和浮动布局的 **高度** 一样」。\n\n对于上面的三点内容，前两点在我们的代码中已经做到了。\n\n想要解决第三个问题，就得使用我们上面讲的招式- **清除浮动**。\n\n我们在父区块最后面增加一个空的DIV，将它设置它为「 clear:both 」。\n\n为什么要这么使用呢，具体的原因我也讲不清楚，大概是这样的吧：\n\n因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受 **任何** 浮动元素干扰,我们必须清除浮动对它的干扰。\n\n来来来，代码走一波！\n\n{% codeblock lang:html %}\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n            .last{\n                clear: both;\n            }\n        </style>\n\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n            <div class=\"last\">\n    \n            </div>\n        </div>\n{% endcodeblock %}\n\n然后我们会发现，父元素竟然有高度了，而且和浮动布局的高度是一样的！\n\n![父元素有高度了](/image/back-2-font-xinfa-1/parrent-height.png)\n\n哈哈，到了这里，我们已经完全解决父元素高度为 0 的问题，那么我想问：\n\n上面的解决方法是最好的吗？\n\n\n## 清除浮动－最佳实践\n\n按照套路，我们得问一个问题：上面的解决方案有问题吗？\n\n回答是肯定的！\n\n因为按照上面的方法，我们需要在 **手动** 在每个父区块最后添加一个空的 DIV，这样的做法是 **低效的**！\n\n因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。\n\n我们可不可以在某个地方统一定义，然后全局使用呢？\n\n回答是当然可以啦。\n\n这个要使用到另一个新的招式-CSS 的「伪类」,伪类的具体用法可以参考[W3C的CSS伪类教程。](http://www.w3school.com.cn/css/css_pseudo_elements.asp)\n\n我们这里使用的是「after」伪类，它可以自动的在某个父元素的最后一行添加最后一个子元素，并且设置属性。\n\n上面的话有点拗口，来来来，我们直接上代码分析：\n\n{% codeblock lang:html %}\n    .parent:after{\n        /*设置最后一个元素的内容为空*/\n        content: \"\";\n        /*设置最后一个元素为清除两边浮动*/\n        clear: both;\n        /*设置最后一个元素为块状元素*/\n        display: block;\n    }\n\n{% endcodeblock %}\n\n上面的代码会自动在「parent」作用的标签的最后一行添加一个子元素，并且设置该元素为「块状元素」「内容为空」以及「清除浮动」。\n\n只要把父元素的 class属性设置值为 「parent」，那么就可以直接使用啦。\n\n来来来，让我们完整的敲一次代码！\n\n{% codeblock lang:html %}\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n    \n            /*\n              伪类\n             */\n            .parent:after{\n                /*设置最后一个元素的内容为空*/\n                content: \"\";\n                /*设置最后一个元素为清除两边浮动*/\n                clear: both;\n                /*设置最后一个元素为块状元素*/\n                display: block;\n            }\n        </style>\n\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n    \n        </div>\n{% endcodeblock %}\n\n![使用最佳实践-伪类后的效果图](/image/back-2-font-xinfa-1/div-float-after.png)\n\n## 心法小结\n\n\n最后，我们再来回顾一下文章介绍的一些心法：\n\n**1. HTML 分为块状元素和行内元素的，块状元素是独占一行的**\n\n**2. 浮动布局是解决多个块状元素在同一行的最佳方法**\n\n**3. 在嵌套的标签中使用浮动时，如果不使用清除浮动，父元素的高度会为0**\n\n**4. 清除浮动 + after伪类 是浮动布局的一个最佳实践**\n\n文章中的一些招式可能说的太粗糙，先不用捉急，我们先学心法，招式到后面再专门的学习。\n\n我会在下一篇博文继续介绍心法 II。\n\n","slug":"xinfa-1/back-2-font-xinfa-1-4.0","published":0,"updated":"2018-02-18T08:12:37.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpjv0003mc554iwbxrwc","content":"<p>上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：</p>\n<p><strong>从左到右，从上到下，化整为零。</strong></p>\n<p>那么在接下来的几篇文章中，我们就来聊聊页面布局的「心法」和一些具体的「招式」。</p>\n<p>那么什么是心法呢？</p>\n<a id=\"more\"></a>\n<p>如果说口诀是页面布局的原则，那么心法就是对页面布局中一些重要概念的认识。</p>\n<p>在上一篇文章，我们一直推荐使用高效的浮动布局，类似大家都玩过的磁铁，在磁铁的周围，所有的铁块会被磁铁所吸引。</p>\n<p>那么浮动就好比页面上的一块磁铁，它会吸引页面上的元素块，让它们朝一个方向进行组合、包含、交叠，进而完成整个页面的布局。</p>\n<p>下面就让我们来看看页面中元素有什么类型。</p>\n<h2 id=\"HTML-块状元素和行内元素\"><a href=\"#HTML-块状元素和行内元素\" class=\"headerlink\" title=\"HTML 块状元素和行内元素\"></a>HTML 块状元素和行内元素</h2><p>在我们熟知的页面布局中，网页的标题，logo等都是有高度和宽度的。我们来看下面的豆瓣首页的切图：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-index.png\" alt=\"豆瓣首页切图\"></p>\n<p>在上面的图片中，我们使用红色的线条和文字标注豆瓣 logo 的高度和宽度。不仅仅的 logo 图有高度和宽度，搜索框，热搜主题等其它元素，几乎都有高度和宽度。</p>\n<p>那么在 HTML 语言中，我们如何指定元素的高度和宽度呢？</p>\n<p>我们先来写一段 HTML：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这是 div 标签里面的内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是 span 标签的内容<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后给它们定义样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/html-css-show.png\" alt=\"效果图\"></p>\n<p>发现一个问题：</p>\n<p><strong>我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？</strong></p>\n<p>其实在 HTML 中，我们可以把标签分为「块状元素」和「行内元素」，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。</p>\n<p>那么这两类元素有什么区别呢？</p>\n<p>从我们的代码的效果图里面我们已经看出来一个区别了：<strong>块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。</strong></p>\n<p>我们把上面元素的宽度和高度都删除，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-inline-elemet.png\" alt=\"效果图\"></p>\n<p>是不是又看出来一个区别呢？</p>\n<p><strong>块状元素是独占一行的，而行内元素只占本身内容的大小。</strong></p>\n<p>看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-element.jpg\" alt=\"效果图\"></p>\n<p><strong>即使我们设置了块状元素的高度和宽度，它还是独占一行的</strong>。真的是霸道啊！</p>\n<p>然而，现实中的网页（如豆瓣），很多内容块都是拼接的，如果我们使用块状元素来表示这些内容块，如果消除它独占一行的情况呢？</p>\n<p>关于这个问题，似乎有两种解决方案。</p>\n<h2 id=\"inline-block\"><a href=\"#inline-block\" class=\"headerlink\" title=\"inline-block\"></a>inline-block</h2><p>其实在 css 的 diplay 属性中，有一个属性值 <code>inline-block</code> 可以将标签呈现出「块状元素」和「行内元素」之间的中间态，即它可以拥有宽高度的同时，也可以具备行内元素的占位属性。</p>\n<p>说了这么多，我好像还是没有教你们如何去写一个浮动布局。</p>\n<p>咳咳，下面正式开始。</p>\n<h2 id=\"为什么要使用浮动布局\"><a href=\"#为什么要使用浮动布局\" class=\"headerlink\" title=\"为什么要使用浮动布局\"></a>为什么要使用浮动布局</h2><p>在开始之前，我们按照套路，还是要问一个问题：为什么要使用浮动布局，仅仅是因为它是高效的？</p>\n<p>答案当然是否定的。</p>\n<p>在上面的我们分析了块状元素是独占一行的，但是在页面布局的时候，往往都是要求许多块状元素是在一行的。</p>\n<p>怎么解决这个问题呢？</p>\n<p>解决问题有两种方案：</p>\n<ul>\n<li>我们可以使用 CSS 把块状元素变成行内元素</li>\n<li>我们使用浮动</li>\n</ul>\n<p>对于第一种方案，我们直接否定！<strong>因为它存在误差！</strong></p>\n<p>看下面的一段代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.div-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tbackground-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdisplay: inline-block;</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.div-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tbackground-color: green;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:inline-block</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div-1\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div-2\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的这段代码，我们使用块状元素 div 写了两个区块，并且使用<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display:inline-block; </span><br></pre></td></tr></table></figure> </p>\n<p>让块状元素 div 来作为行内元素显示，然后我们来看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/inline-element-error.png\" alt=\"行内元素误差效果显示\"></p>\n<p>我们发现<strong>虽然两个 div 可以变成行内元素在一行显示，但是它们之间还是存在空白，不能完美的相邻在一起。</strong></p>\n<p>因此浮动布局才是我们解决问题的理想方法。下面我们就开始来写一个浮动布局吧。</p>\n<h2 id=\"一个简单的浮动布局\"><a href=\"#一个简单的浮动布局\" class=\"headerlink\" title=\"一个简单的浮动布局\"></a>一个简单的浮动布局</h2><p>首先我们画两个 div，并且设置它们的背景颜色，高度以及宽度，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\twidth: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\theight: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\tbackground: red;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\twidth: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\theight: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\tbackground: green;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">这是第一个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">这是第二个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure> \n<p>打开浏览器看效果是这个样子滴：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout.png\" alt=\"浮动之前的效果图\"></p>\n<p>这个效果很正常嘛。 div 作为很霸道的块状元素，当然占据一整行，两个 div 就分别占据两行喽。</p>\n<p>下面我们就要使用浮动了，注意看清楚哦！</p>\n<p>我们只要在上面代码中 div 的 class 选择器里面添加如下代码即可实现浮动。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float: left;</span><br></pre></td></tr></table></figure>\n<p>来来来，代码走一波！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">    这是第一个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">    这是第二个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后我们用浏览器打开看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-1.png\" alt=\"简单浮动效果图\"></p>\n<p>我们发现两个原本很难相邻在一起的块状元素，竟然完美的 <strong>无缝</strong> 的相邻在一起。</p>\n<p>是不是很简单呢？我们只要添加 「 float: left;」即可实现浮动。你们学会了吗？</p>\n<p>现在让我们重新来看一下「 float: left;」这段代码。</p>\n<p>我们都知道「 float 」这个字是指定使用浮动的关键字，但是「 left 」是干嘛用的？难道还是指定 right？</p>\n<p>当然可以啦。left 的意思是指定左浮动，意思是让元素悬浮在浏览器的左边，right是相反的意思，让元素悬浮在浏览器右边。</p>\n<h2 id=\"父元素高度问题\"><a href=\"#父元素高度问题\" class=\"headerlink\" title=\"父元素高度问题\"></a>父元素高度问题</h2><p>在实际开发中，我们经常需要标签的嵌套使用，下面我们来模拟一下场景，代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\twidth: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\theight: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\tfloat: left;</span></span><br><span class=\"line\"><span class=\"undefined\">\tbackground: red;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\twidth: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\theight: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\tfloat: left;</span></span><br><span class=\"line\"><span class=\"undefined\">\tbackground: green;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">\t我是第一个子元素</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">\t我是第二个子元素</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/second-check-child.png\" alt=\"\"></p>\n<p>子元素宽度和高度都是 OK 的。</p>\n<p>我们再来看看它父元素高度和宽度。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parent-check.png\" alt=\"\"></p>\n<p>我去！父元素的高度竟然是 <strong>０</strong>！！　我是不是安装了假的浏览器？</p>\n<h2 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h2><p>还是嵌套的使用元素标签，代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">        第一个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">        第二个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">        第三个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>不用看效果图我们都知道：<strong>子元素高度正常，父元素高度为0。</strong><br>现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做？</p>\n<p>这就要使用到另个招式： 「清除浮动」。</p>\n<p>我们只要在第三块区块的「.third」中添加<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear: left;</span><br></pre></td></tr></table></figure> </p>\n<p>即可。</p>\n<p>话不多说，让我们先看效果。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/add-clear-left-1.png\" alt=\"添加 clear: left;的效果图\"></p>\n<p>真的把第三个区块给压下来了！</p>\n<p>还是按照上面的套路，我们来分析「 clear: left; 」这段代码：</p>\n<p>它用到的关键字是「 clear 」，它的含义是清除。</p>\n<p>而 「 left 」 代表是左边。</p>\n<p>那么它合起来的意思是：<strong>清除左边的浮动元素</strong>。</p>\n<p>说到更明白一点就是：<strong>不让当前元素的左边有浮动元素。</strong></p>\n<p>当前元素是第三个区块，它的左边有两个浮动元素 first 和second 。</p>\n<p>那这段代码的意思就是：<strong>不让第三个区块左边有浮动元素</strong>，那浏览器这么处理呢？</p>\n<p>浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到 <strong>下一行</strong> 来吧！”</p>\n<p>于是第三个区块就到了下一行啦。</p>\n<p>虽然有点复杂，但是按照上面思路进行一步步分解，是不是就变的很简单呢？</p>\n<p>让我们再来拓展一下，clear 除了可以设置为 left，还可以设置为 「 right 」 和 「 both 」。</p>\n<p>我相信不用我说你们也明白了吧！</p>\n<p>right 就是不让当前元素 <strong>右边</strong> 存在浮动元素嘛。</p>\n<p>那 both 就是不让当前元素的 <strong>两边</strong> 出现浮动元素喽。</p>\n<p>说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！</p>\n<p>这个有点尴尬！</p>\n<h2 id=\"父元素高度真的需要吗？\"><a href=\"#父元素高度真的需要吗？\" class=\"headerlink\" title=\"父元素高度真的需要吗？\"></a>父元素高度真的需要吗？</h2><p>那么，在解决之前，按照我们的套路，我们要问一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。</p>\n<p>我的实习导师告诉我：“这是不行的。<strong>浮动布局的占位空间往往是我们理想的父元素高度。</strong>”</p>\n<p>他说的太抽象，我们来说的直白一点：</p>\n<p>「在布局中我们往往使用 <strong>浮动布局</strong> 来实现某一块区域的布局」。</p>\n<p>「然后我们最好用一个DIV去 <strong>包裹</strong> 整个浮动布局，用于和其它的布局区分开」。</p>\n<p>「最后我们要求这个父DIV和高度要和浮动布局的 <strong>高度</strong> 一样」。</p>\n<p>对于上面的三点内容，前两点在我们的代码中已经做到了。</p>\n<p>想要解决第三个问题，就得使用我们上面讲的招式- <strong>清除浮动</strong>。</p>\n<p>我们在父区块最后面增加一个空的DIV，将它设置它为「 clear:both 」。</p>\n<p>为什么要这么使用呢，具体的原因我也讲不清楚，大概是这样的吧：</p>\n<p>因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受 <strong>任何</strong> 浮动元素干扰,我们必须清除浮动对它的干扰。</p>\n<p>来来来，代码走一波！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        clear: left;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.last</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        clear: both;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">        第一个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">        第二个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">        第三个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"last\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后我们会发现，父元素竟然有高度了，而且和浮动布局的高度是一样的！</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parrent-height.png\" alt=\"父元素有高度了\"></p>\n<p>哈哈，到了这里，我们已经完全解决父元素高度为 0 的问题，那么我想问：</p>\n<p>上面的解决方法是最好的吗？</p>\n<h2 id=\"清除浮动－最佳实践\"><a href=\"#清除浮动－最佳实践\" class=\"headerlink\" title=\"清除浮动－最佳实践\"></a>清除浮动－最佳实践</h2><p>按照套路，我们得问一个问题：上面的解决方案有问题吗？</p>\n<p>回答是肯定的！</p>\n<p>因为按照上面的方法，我们需要在 <strong>手动</strong> 在每个父区块最后添加一个空的 DIV，这样的做法是 <strong>低效的</strong>！</p>\n<p>因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。</p>\n<p>我们可不可以在某个地方统一定义，然后全局使用呢？</p>\n<p>回答是当然可以啦。</p>\n<p>这个要使用到另一个新的招式-CSS 的「伪类」,伪类的具体用法可以参考<a href=\"http://www.w3school.com.cn/css/css_pseudo_elements.asp\" target=\"_blank\" rel=\"noopener\">W3C的CSS伪类教程。</a></p>\n<p>我们这里使用的是「after」伪类，它可以自动的在某个父元素的最后一行添加最后一个子元素，并且设置属性。</p>\n<p>上面的话有点拗口，来来来，我们直接上代码分析：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent:after&#123;</span><br><span class=\"line\">    /*设置最后一个元素的内容为空*/</span><br><span class=\"line\">    content: \"\";</span><br><span class=\"line\">    /*设置最后一个元素为清除两边浮动*/</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">    /*设置最后一个元素为块状元素*/</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上面的代码会自动在「parent」作用的标签的最后一行添加一个子元素，并且设置该元素为「块状元素」「内容为空」以及「清除浮动」。</p>\n<p>只要把父元素的 class属性设置值为 「parent」，那么就可以直接使用啦。</p>\n<p>来来来，让我们完整的敲一次代码！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        clear: left;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    /*</span></span><br><span class=\"line\"><span class=\"undefined\">      伪类</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:after</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/*设置最后一个元素的内容为空*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">        content: \"\";</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/*设置最后一个元素为清除两边浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">        clear: both;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/*设置最后一个元素为块状元素*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">        display: block;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">        第一个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">        第二个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">        第三个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-after.png\" alt=\"使用最佳实践-伪类后的效果图\"></p>\n<h2 id=\"心法小结\"><a href=\"#心法小结\" class=\"headerlink\" title=\"心法小结\"></a>心法小结</h2><p>最后，我们再来回顾一下文章介绍的一些心法：</p>\n<p><strong>1. HTML 分为块状元素和行内元素的，块状元素是独占一行的</strong></p>\n<p><strong>2. 浮动布局是解决多个块状元素在同一行的最佳方法</strong></p>\n<p><strong>3. 在嵌套的标签中使用浮动时，如果不使用清除浮动，父元素的高度会为0</strong></p>\n<p><strong>4. 清除浮动 + after伪类 是浮动布局的一个最佳实践</strong></p>\n<p>文章中的一些招式可能说的太粗糙，先不用捉急，我们先学心法，招式到后面再专门的学习。</p>\n<p>我会在下一篇博文继续介绍心法 II。</p>\n","site":{"data":{}},"excerpt":"<p>上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：</p>\n<p><strong>从左到右，从上到下，化整为零。</strong></p>\n<p>那么在接下来的几篇文章中，我们就来聊聊页面布局的「心法」和一些具体的「招式」。</p>\n<p>那么什么是心法呢？</p>","more":"<p>如果说口诀是页面布局的原则，那么心法就是对页面布局中一些重要概念的认识。</p>\n<p>在上一篇文章，我们一直推荐使用高效的浮动布局，类似大家都玩过的磁铁，在磁铁的周围，所有的铁块会被磁铁所吸引。</p>\n<p>那么浮动就好比页面上的一块磁铁，它会吸引页面上的元素块，让它们朝一个方向进行组合、包含、交叠，进而完成整个页面的布局。</p>\n<p>下面就让我们来看看页面中元素有什么类型。</p>\n<h2 id=\"HTML-块状元素和行内元素\"><a href=\"#HTML-块状元素和行内元素\" class=\"headerlink\" title=\"HTML 块状元素和行内元素\"></a>HTML 块状元素和行内元素</h2><p>在我们熟知的页面布局中，网页的标题，logo等都是有高度和宽度的。我们来看下面的豆瓣首页的切图：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-index.png\" alt=\"豆瓣首页切图\"></p>\n<p>在上面的图片中，我们使用红色的线条和文字标注豆瓣 logo 的高度和宽度。不仅仅的 logo 图有高度和宽度，搜索框，热搜主题等其它元素，几乎都有高度和宽度。</p>\n<p>那么在 HTML 语言中，我们如何指定元素的高度和宽度呢？</p>\n<p>我们先来写一段 HTML：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这是 div 标签里面的内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是 span 标签的内容<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后给它们定义样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/html-css-show.png\" alt=\"效果图\"></p>\n<p>发现一个问题：</p>\n<p><strong>我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？</strong></p>\n<p>其实在 HTML 中，我们可以把标签分为「块状元素」和「行内元素」，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。</p>\n<p>那么这两类元素有什么区别呢？</p>\n<p>从我们的代码的效果图里面我们已经看出来一个区别了：<strong>块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。</strong></p>\n<p>我们把上面元素的宽度和高度都删除，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-inline-elemet.png\" alt=\"效果图\"></p>\n<p>是不是又看出来一个区别呢？</p>\n<p><strong>块状元素是独占一行的，而行内元素只占本身内容的大小。</strong></p>\n<p>看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-element.jpg\" alt=\"效果图\"></p>\n<p><strong>即使我们设置了块状元素的高度和宽度，它还是独占一行的</strong>。真的是霸道啊！</p>\n<p>然而，现实中的网页（如豆瓣），很多内容块都是拼接的，如果我们使用块状元素来表示这些内容块，如果消除它独占一行的情况呢？</p>\n<p>关于这个问题，似乎有两种解决方案。</p>\n<h2 id=\"inline-block\"><a href=\"#inline-block\" class=\"headerlink\" title=\"inline-block\"></a>inline-block</h2><p>其实在 css 的 diplay 属性中，有一个属性值 <code>inline-block</code> 可以将标签呈现出「块状元素」和「行内元素」之间的中间态，即它可以拥有宽高度的同时，也可以具备行内元素的占位属性。</p>\n<p>说了这么多，我好像还是没有教你们如何去写一个浮动布局。</p>\n<p>咳咳，下面正式开始。</p>\n<h2 id=\"为什么要使用浮动布局\"><a href=\"#为什么要使用浮动布局\" class=\"headerlink\" title=\"为什么要使用浮动布局\"></a>为什么要使用浮动布局</h2><p>在开始之前，我们按照套路，还是要问一个问题：为什么要使用浮动布局，仅仅是因为它是高效的？</p>\n<p>答案当然是否定的。</p>\n<p>在上面的我们分析了块状元素是独占一行的，但是在页面布局的时候，往往都是要求许多块状元素是在一行的。</p>\n<p>怎么解决这个问题呢？</p>\n<p>解决问题有两种方案：</p>\n<ul>\n<li>我们可以使用 CSS 把块状元素变成行内元素</li>\n<li>我们使用浮动</li>\n</ul>\n<p>对于第一种方案，我们直接否定！<strong>因为它存在误差！</strong></p>\n<p>看下面的一段代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.div-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tbackground-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdisplay: inline-block;</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.div-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tbackground-color: green;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:inline-block</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div-1\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div-2\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的这段代码，我们使用块状元素 div 写了两个区块，并且使用<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display:inline-block; </span><br></pre></td></tr></table></figure> </p>\n<p>让块状元素 div 来作为行内元素显示，然后我们来看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/inline-element-error.png\" alt=\"行内元素误差效果显示\"></p>\n<p>我们发现<strong>虽然两个 div 可以变成行内元素在一行显示，但是它们之间还是存在空白，不能完美的相邻在一起。</strong></p>\n<p>因此浮动布局才是我们解决问题的理想方法。下面我们就开始来写一个浮动布局吧。</p>\n<h2 id=\"一个简单的浮动布局\"><a href=\"#一个简单的浮动布局\" class=\"headerlink\" title=\"一个简单的浮动布局\"></a>一个简单的浮动布局</h2><p>首先我们画两个 div，并且设置它们的背景颜色，高度以及宽度，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\twidth: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\theight: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\tbackground: red;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\twidth: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\theight: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\tbackground: green;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">这是第一个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">这是第二个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure> \n<p>打开浏览器看效果是这个样子滴：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout.png\" alt=\"浮动之前的效果图\"></p>\n<p>这个效果很正常嘛。 div 作为很霸道的块状元素，当然占据一整行，两个 div 就分别占据两行喽。</p>\n<p>下面我们就要使用浮动了，注意看清楚哦！</p>\n<p>我们只要在上面代码中 div 的 class 选择器里面添加如下代码即可实现浮动。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float: left;</span><br></pre></td></tr></table></figure>\n<p>来来来，代码走一波！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">    这是第一个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">    这是第二个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后我们用浏览器打开看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-1.png\" alt=\"简单浮动效果图\"></p>\n<p>我们发现两个原本很难相邻在一起的块状元素，竟然完美的 <strong>无缝</strong> 的相邻在一起。</p>\n<p>是不是很简单呢？我们只要添加 「 float: left;」即可实现浮动。你们学会了吗？</p>\n<p>现在让我们重新来看一下「 float: left;」这段代码。</p>\n<p>我们都知道「 float 」这个字是指定使用浮动的关键字，但是「 left 」是干嘛用的？难道还是指定 right？</p>\n<p>当然可以啦。left 的意思是指定左浮动，意思是让元素悬浮在浏览器的左边，right是相反的意思，让元素悬浮在浏览器右边。</p>\n<h2 id=\"父元素高度问题\"><a href=\"#父元素高度问题\" class=\"headerlink\" title=\"父元素高度问题\"></a>父元素高度问题</h2><p>在实际开发中，我们经常需要标签的嵌套使用，下面我们来模拟一下场景，代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\twidth: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\theight: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\tfloat: left;</span></span><br><span class=\"line\"><span class=\"undefined\">\tbackground: red;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\twidth: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\theight: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">\tfloat: left;</span></span><br><span class=\"line\"><span class=\"undefined\">\tbackground: green;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">\t我是第一个子元素</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">\t我是第二个子元素</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/second-check-child.png\" alt=\"\"></p>\n<p>子元素宽度和高度都是 OK 的。</p>\n<p>我们再来看看它父元素高度和宽度。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parent-check.png\" alt=\"\"></p>\n<p>我去！父元素的高度竟然是 <strong>０</strong>！！　我是不是安装了假的浏览器？</p>\n<h2 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h2><p>还是嵌套的使用元素标签，代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">        第一个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">        第二个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">        第三个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>不用看效果图我们都知道：<strong>子元素高度正常，父元素高度为0。</strong><br>现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做？</p>\n<p>这就要使用到另个招式： 「清除浮动」。</p>\n<p>我们只要在第三块区块的「.third」中添加<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear: left;</span><br></pre></td></tr></table></figure> </p>\n<p>即可。</p>\n<p>话不多说，让我们先看效果。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/add-clear-left-1.png\" alt=\"添加 clear: left;的效果图\"></p>\n<p>真的把第三个区块给压下来了！</p>\n<p>还是按照上面的套路，我们来分析「 clear: left; 」这段代码：</p>\n<p>它用到的关键字是「 clear 」，它的含义是清除。</p>\n<p>而 「 left 」 代表是左边。</p>\n<p>那么它合起来的意思是：<strong>清除左边的浮动元素</strong>。</p>\n<p>说到更明白一点就是：<strong>不让当前元素的左边有浮动元素。</strong></p>\n<p>当前元素是第三个区块，它的左边有两个浮动元素 first 和second 。</p>\n<p>那这段代码的意思就是：<strong>不让第三个区块左边有浮动元素</strong>，那浏览器这么处理呢？</p>\n<p>浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到 <strong>下一行</strong> 来吧！”</p>\n<p>于是第三个区块就到了下一行啦。</p>\n<p>虽然有点复杂，但是按照上面思路进行一步步分解，是不是就变的很简单呢？</p>\n<p>让我们再来拓展一下，clear 除了可以设置为 left，还可以设置为 「 right 」 和 「 both 」。</p>\n<p>我相信不用我说你们也明白了吧！</p>\n<p>right 就是不让当前元素 <strong>右边</strong> 存在浮动元素嘛。</p>\n<p>那 both 就是不让当前元素的 <strong>两边</strong> 出现浮动元素喽。</p>\n<p>说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！</p>\n<p>这个有点尴尬！</p>\n<h2 id=\"父元素高度真的需要吗？\"><a href=\"#父元素高度真的需要吗？\" class=\"headerlink\" title=\"父元素高度真的需要吗？\"></a>父元素高度真的需要吗？</h2><p>那么，在解决之前，按照我们的套路，我们要问一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。</p>\n<p>我的实习导师告诉我：“这是不行的。<strong>浮动布局的占位空间往往是我们理想的父元素高度。</strong>”</p>\n<p>他说的太抽象，我们来说的直白一点：</p>\n<p>「在布局中我们往往使用 <strong>浮动布局</strong> 来实现某一块区域的布局」。</p>\n<p>「然后我们最好用一个DIV去 <strong>包裹</strong> 整个浮动布局，用于和其它的布局区分开」。</p>\n<p>「最后我们要求这个父DIV和高度要和浮动布局的 <strong>高度</strong> 一样」。</p>\n<p>对于上面的三点内容，前两点在我们的代码中已经做到了。</p>\n<p>想要解决第三个问题，就得使用我们上面讲的招式- <strong>清除浮动</strong>。</p>\n<p>我们在父区块最后面增加一个空的DIV，将它设置它为「 clear:both 」。</p>\n<p>为什么要这么使用呢，具体的原因我也讲不清楚，大概是这样的吧：</p>\n<p>因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受 <strong>任何</strong> 浮动元素干扰,我们必须清除浮动对它的干扰。</p>\n<p>来来来，代码走一波！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        clear: left;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.last</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        clear: both;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">        第一个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">        第二个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">        第三个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"last\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后我们会发现，父元素竟然有高度了，而且和浮动布局的高度是一样的！</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parrent-height.png\" alt=\"父元素有高度了\"></p>\n<p>哈哈，到了这里，我们已经完全解决父元素高度为 0 的问题，那么我想问：</p>\n<p>上面的解决方法是最好的吗？</p>\n<h2 id=\"清除浮动－最佳实践\"><a href=\"#清除浮动－最佳实践\" class=\"headerlink\" title=\"清除浮动－最佳实践\"></a>清除浮动－最佳实践</h2><p>按照套路，我们得问一个问题：上面的解决方案有问题吗？</p>\n<p>回答是肯定的！</p>\n<p>因为按照上面的方法，我们需要在 <strong>手动</strong> 在每个父区块最后添加一个空的 DIV，这样的做法是 <strong>低效的</strong>！</p>\n<p>因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。</p>\n<p>我们可不可以在某个地方统一定义，然后全局使用呢？</p>\n<p>回答是当然可以啦。</p>\n<p>这个要使用到另一个新的招式-CSS 的「伪类」,伪类的具体用法可以参考<a href=\"http://www.w3school.com.cn/css/css_pseudo_elements.asp\" target=\"_blank\" rel=\"noopener\">W3C的CSS伪类教程。</a></p>\n<p>我们这里使用的是「after」伪类，它可以自动的在某个父元素的最后一行添加最后一个子元素，并且设置属性。</p>\n<p>上面的话有点拗口，来来来，我们直接上代码分析：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent:after&#123;</span><br><span class=\"line\">    /*设置最后一个元素的内容为空*/</span><br><span class=\"line\">    content: \"\";</span><br><span class=\"line\">    /*设置最后一个元素为清除两边浮动*/</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">    /*设置最后一个元素为块状元素*/</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上面的代码会自动在「parent」作用的标签的最后一行添加一个子元素，并且设置该元素为「块状元素」「内容为空」以及「清除浮动」。</p>\n<p>只要把父元素的 class属性设置值为 「parent」，那么就可以直接使用啦。</p>\n<p>来来来，让我们完整的敲一次代码！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        clear: left;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    /*</span></span><br><span class=\"line\"><span class=\"undefined\">      伪类</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:after</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/*设置最后一个元素的内容为空*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">        content: \"\";</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/*设置最后一个元素为清除两边浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">        clear: both;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/*设置最后一个元素为块状元素*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">        display: block;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">        第一个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">        第二个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">        第三个区块</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-after.png\" alt=\"使用最佳实践-伪类后的效果图\"></p>\n<h2 id=\"心法小结\"><a href=\"#心法小结\" class=\"headerlink\" title=\"心法小结\"></a>心法小结</h2><p>最后，我们再来回顾一下文章介绍的一些心法：</p>\n<p><strong>1. HTML 分为块状元素和行内元素的，块状元素是独占一行的</strong></p>\n<p><strong>2. 浮动布局是解决多个块状元素在同一行的最佳方法</strong></p>\n<p><strong>3. 在嵌套的标签中使用浮动时，如果不使用清除浮动，父元素的高度会为0</strong></p>\n<p><strong>4. 清除浮动 + after伪类 是浮动布局的一个最佳实践</strong></p>\n<p>文章中的一些招式可能说的太粗糙，先不用捉急，我们先学心法，招式到后面再专门的学习。</p>\n<p>我会在下一篇博文继续介绍心法 II。</p>"},{"IMPORTANT":"This is the documentation for the latest `SNAPSHOT` version. Please refer to the website at [http://getquill.io](http://getquill.io) for the lastest release's documentation.","_content":"\n![quill](https://raw.githubusercontent.com/getquill/quill/master/quill.png)\n\nCompile-time Language Integrated Query for Scala\n\n[![Build Status](https://travis-ci.org/getquill/quill.svg?branch=master)](https://travis-ci.org/getquill/quill)\n[![Codacy Badge](https://api.codacy.com/project/badge/grade/36ab84c7ff43480489df9b7312a4bdc1)](https://www.codacy.com/app/fwbrasil/quill)\n[![codecov.io](https://codecov.io/github/getquill/quill/coverage.svg?branch=master)](https://codecov.io/github/getquill/quill?branch=master)\n[![Join the chat at https://gitter.im/getquill/quill](https://img.shields.io/badge/gitter-join%20chat-green.svg)](https://gitter.im/getquill/quill?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Dependency Status](https://www.versioneye.com/user/projects/56ea4da64e714c0035e76353/badge.svg?style=flat)](https://www.versioneye.com/user/projects/56ea4da64e714c0035e76353)\n\nQuill provides a Quoted Domain Specific Language ([QDSL](http://homepages.inf.ed.ac.uk/wadler/papers/qdsl/qdsl.pdf)) to express queries in Scala and execute them in a target language. The library's core is designed to support multiple target languages, currently featuring specializations for Structured Query Language ([SQL](https://en.wikipedia.org/wiki/SQL)) and Cassandra Query Language ([CQL](https://cassandra.apache.org/doc/cql3/CQL.html#selectStmt)).\n\n![example](https://raw.githubusercontent.com/getquill/quill/master/example.gif)\n\n1. **Boilerplate-free mapping**: The database schema is mapped using simple case classes.\n2. **Quoted DSL**: Queries are defined inside a `quote` block. Quill parses each quoted block of code (quotation) at compile time and translates them to an internal Abstract Syntax Tree (AST)\n3. **Compile-time query generation**: The `db.run` call reads the quotation's AST and translates it to the target language at compile time, emitting the query string as a compilation message. As the query string is known at compile time, the runtime overhead is very low and similar to using the database driver directly.\n4. **Compile-time query validation**: If configured, the query is verified against the database at compile time and the compilation fails if it is not valid. The query validation **does not** alter the database state.\n\nQuotation\n=========\n\nIntroduction\n------------\n\nThe QDSL allows the user to write plain Scala code, leveraging scala's syntax and type system. Quotations are created using the `quote` method and can contain any excerpt of code that uses supported operations. To create quotations, first import `quote` and some other auxiliary methods:\n\n```scala\nimport io.getquill._\n```\n\nA quotation can be a simple value:\n\n```scala\nval pi = quote(3.14159)\n```\n\nAnd be used within another quotation:\n\n```scala\ncase class Circle(radius: Float)\n\nval areas = quote {\n  query[Circle].map(c => pi * c.radius * c.radius)\n}\n```\n\nQuotations can also contain high-order functions and inline values:\n\n```scala\nval area = quote {\n  (c: Circle) => {\n    val r2 = c.radius * c.radius\n    pi * r2\n  }\n}\n```\n\n```scala\nval areas = quote {\n  query[Circle].map(c => area(c))\n}\n```\n\nQuotations can contain values defined outside of the quotation:\n```scala\nval pi = 3.14159\nval areas = quote {\n  query[Circle].map(c => pi * c.radius * c.radius)\n}\n```\n\nQuill's normalization engine applies reduction steps before translating the quotation to the target language. The correspondent normalized quotation for both versions of the `areas` query is:\n\n```scala\nval areas = quote {\n  query[Circle].map(c => 3.14159 * c.radius * c.radius)\n}\n```\n\nScala doesn't have support for high-order functions with type parameters. Quill supports anonymous classes with an apply method for this purpose:\n\n```scala\nval existsAny = quote {\n  new {\n    def apply[T](xs: Query[T])(p: T => Boolean) =\n    \txs.filter(p(_)).nonEmpty\n  }\n}\n\nval q = quote {\n  query[Circle].filter { c1 =>\n    existsAny(query[Circle])(c2 => c2.radius > c1.radius)\n  }\n}\n```\n\nMirror sources\n--------------\n\nSources represent the database and provide an execution interface for queries. Quill provides mirror sources for test purposes. Please refer to [sources](#sources) for information on how to create normal sources.\n\nInstead of running the query, mirror sources return a structure with the information that would be used to run the query. There are three mirror source configurations:\n\n- `io.getquill.MirrorSourceConfig`: Mirrors the quotation AST\n- `io.getquill.SqlMirrorSourceConfig`: Mirrors the SQL query\n- `io.getquill.CassandraMirrorSourceConfig`: Mirrors the CQL query\n\nThis documentation uses the SQL mirror in its examples under the `db` name:\n\n```scala\nimport io.getquill._\n\nlazy val db = source(new SqlMirrorSourceConfig(\"testSource\"))\n```\n\nCompile-time quotations\n-----------------------\n\nQuotations are both compile-time and runtime values. Quill uses a type refinement to store the quotation's AST as an annotation available at compile-time and the `q.ast` method exposes the AST as runtime value.\n\nIt is important to avoid giving explicit types to quotations when possible. For instance, this quotation can't be read at compile-time as the type refinement is lost:\n\n```scala\n// Avoid type widening (Quoted[Query[Circle]]), or else the quotation will be dynamic.\nval q: Quoted[Query[Circle]] = quote {\n  query[Circle].filter(c => c.radius > 10)\n}\n\ndb.run(q) // Dynamic query\n```\n\nQuill falls back to runtime normalization and query generation if the quotation's AST can be read at compile-time. Please refer to [dynamic queries](#dynamic-queries) for more information\n\nBindings\n--------\n\nQuotations are designed to be self-contained, without references to runtime values outside their scope. There are two mechanisms to explicitly bind runtime values to a quotation execution.\n\n#### Lifted values\n\nA runtime value can be lifted to a quotation through the method `lift`:\n\n```scala\ndef biggerThan(i: Float) = quote {\n  query[Circle].filter(r => r.radius > lift(i))\n}\ndb.run(biggerThan(10)) // SELECT r.radius FROM Circle r WHERE r.radius > ?\n```\n\n#### Parametrized quotations\n\nA quotation can be defined as a function:\n\n```scala\nval biggerThan = quote {\n  (i: Int) =>\n    query[Circle].filter(r => r.radius > i)\n}\n```\n\nAnd a runtime value can be specified when running it:\n\n```scala\ndb.run(biggerThan)(10) // SELECT r.radius FROM Circle r WHERE r.radius > ?\n```\n\nSchema\n------\n\nThe database schema is represented by case classes. By default, quill uses the class and field names as the database identifiers:\n\n```scala\ncase class Circle(radius: Float)\n\nval q = quote {\n  query[Circle].filter(c => c.radius > 1)\n}\n\ndb.run(q) // SELECT c.radius FROM Circle c WHERE c.radius > 1\n```\n\nAlternatively, the identifiers can be customized:\n\n```scala\nval circles = quote {\n  query[Circle].schema(_.entity(\"circle_table\").columns(_.radius -> \"radius_column\"))\n}\n\nval q = quote {\n  circles.filter(c => c.radius > 1)\n}\n\ndb.run(q)\n// SELECT c.radius_column FROM circle_table c WHERE c.radius_column > 1\n```\n\nIf multiple tables require custom identifiers, it is good practice to define a `schema` object with all table queries to be reused across multiple queries:\n\n```scala\ncase class Circle(radius: Int)\ncase class Rectangle(length: Int, width: Int)\nobject schema {\n  val circles = quote {\n    query[Circle].schema(\n        _.entity(\"circle_table\")\n        .columns(_.radius -> \"radius_column\"))\n  }\n  val rectangles = quote {\n    query[Rectangle].schema(\n        _.entity(\"rectangle_table\")\n        .columns(\n          _.length -> \"length_column\",\n          _.width -> \"width_column\"))\n  }\n}\n```\n\nIt is possible to define a column that is a key generated by the database. It will be ignored during insertions and returned as the result.\nNote that it accepts only values that can be read as `Long`.\n```scala\ncase class Product(id: Long, description: String, sku: Long)\n\nval q = quote {\n  query[Product].schema(_.generated(_.id)).insert\n}\n\ndb.run(q)\n// INSERT INTO Product (description,sku) VALUES (?, ?)\n```\n\nQueries\n-------\n\nThe overall abstraction of quill queries is use database tables as if they were in-memory collections. Scala for-comprehensions provide syntatic sugar to deal with this kind of monadic operations:\n\n```scala\ncase class Person(id: Int, name: String, age: Int)\ncase class Contact(personId: Int, phone: String)\n\nval q = quote {\n  for {\n    p <- query[Person] if(p.id == 999)\n    c <- query[Contact] if(c.personId == p.id)\n  } yield {\n    (p.name, c.phone)\n  }\n}\n\ndb.run(q)\n// SELECT p.name, c.phone FROM Person p, Contact c WHERE (p.id = 999) AND (c.personId = p.id)\n```\n\nQuill normalizes the quotation and translates the monadic joins to applicative joins, generating a database-friendly query that avoids nested queries.\n\nAny of the following features can be used together with the others and/or within a for-comprehension:\n\n**filter**\n```scala\nval q = quote {\n  query[Person].filter(p => p.age > 18)\n}\n\ndb.run(q)\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.age > 18\n```\n\n**map**\n```scala\nval q = quote {\n  query[Person].map(p => p.name)\n}\n\ndb.run(q)\n// SELECT p.name FROM Person p\n```\n\n**flatMap**\n```scala\nval q = quote {\n  query[Person].filter(p => p.age > 18).flatMap(p => query[Contact].filter(c => c.personId == p.id))\n}\n\ndb.run(q)\n// SELECT c.personId, c.phone FROM Person p, Contact c WHERE (p.age > 18) AND (c.personId = p.id)\n```\n\n**sortBy**\n```scala\nval q1 = quote {\n  query[Person].sortBy(p => p.age)\n}\n\ndb.run(q1)\n// SELECT p.id, p.name, p.age FROM Person p ORDER BY p.age ASC NULLS FIRST\n\nval q2 = quote {\n  query[Person].sortBy(p => p.age)(Ord.descNullsLast)\n}\n\ndb.run(q2)\n// SELECT p.id, p.name, p.age FROM Person p ORDER BY p.age DESC NULLS LAST\n\nval q3 = quote {\n  query[Person].sortBy(p => (p.name, p.age))(Ord(Ord.asc, Ord.desc))\n}\n\ndb.run(q3)\n// SELECT p.id, p.name, p.age FROM Person p ORDER BY p.name ASC, p.age DESC\n```\n\n**drop/take**\n\n```scala\nval q = quote {\n  query[Person].drop(2).take(1)\n}\n\ndb.run(q)\n// SELECT x.id, x.name, x.age FROM Person x LIMIT 1 OFFSET 2\n```\n\n**groupBy**\n```scala\nval q = quote {\n  query[Person].groupBy(p => p.age).map {\n    case (age, people) =>\n      (age, people.size)\n  }\n}\n\ndb.run(q)\n// SELECT p.age, COUNT(*) FROM Person p GROUP BY p.age\n```\n\n**union**\n```scala\nval q = quote {\n  query[Person].filter(p => p.age > 18).union(query[Person].filter(p => p.age > 60))\n}\n\ndb.run(q)\n// SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age > 18\n// UNION SELECT id, name, age FROM Person p1 WHERE p1.age > 60) x\n```\n\n**unionAll/++**\n```scala\nval q = quote {\n  query[Person].filter(p => p.age > 18).unionAll(query[Person].filter(p => p.age > 60))\n}\n\ndb.run(q)\n// SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age > 18\n// UNION ALL SELECT id, name, age FROM Person p1 WHERE p1.age > 60) x\n\nval q2 = quote {\n  query[Person].filter(p => p.age > 18) ++ query[Person].filter(p => p.age > 60)\n}\n\ndb.run(q2)\n// SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age > 18\n// UNION ALL SELECT id, name, age FROM Person p1 WHERE p1.age > 60) x\n```\n\n**aggregation**\n```scala\nval r = quote {\n  query[Person].map(p => p.age)\n}\n\ndb.run(r.min) // SELECT MIN(p.age) FROM Person p\ndb.run(r.max) // SELECT MAX(p.age) FROM Person p\ndb.run(r.avg) // SELECT AVG(p.age) FROM Person p\ndb.run(r.sum) // SELECT SUM(p.age) FROM Person p\ndb.run(r.size) // SELECT COUNT(p.age) FROM Person p\n```\n\n**isEmpty/nonEmpty**\n```scala\nval q = quote {\n  query[Person].filter{ p1 =>\n    query[Person].filter(p2 => p2.id != p1.id && p2.age == p1.age).isEmpty\n  }\n}\n\ndb.run(q)\n// SELECT p1.id, p1.name, p1.age FROM Person p1 WHERE\n// NOT EXISTS (SELECT * FROM Person p2 WHERE (p2.id <> p1.id) AND (p2.age = p1.age))\n\nval q2 = quote {\n  query[Person].filter{ p1 =>\n    query[Person].filter(p2 => p2.id != p1.id && p2.age == p1.age).nonEmpty\n  }\n}\n\ndb.run(q2)\n// SELECT p1.id, p1.name, p1.age FROM Person p1 WHERE\n// EXISTS (SELECT * FROM Person p2 WHERE (p2.id <> p1.id) AND (p2.age = p1.age))\n```\n\n**contains**\n```scala\nval q = quote {\n  query[Person].filter(p => Set(1, 2).contains(p.id))\n}\n\ndb.run(q)\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (1, 2)\n\nval q1 = quote { (ids: Set[Int]) =>\n  query[Person].filter(p => ids.contains(p.id))\n}\n\ndb.run(q1)\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (?)\n\nval peopleWithContacts = quote {\n  query[Person].filter(p => query[Contact].filter(c => c.personId == p.id).nonEmpty)\n}\nval q2 = quote {\n  query[Person].filter(p => peopleWithContacts.contains(p.id))\n}\n\ndb.run(q2)\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (SELECT p1.* FROM Person p1 WHERE EXISTS (SELECT c.* FROM Contact c WHERE c.personId = p1.id))\n```\n\n**distinct**\n```scala\nval q = quote {\n  query[Person].map(p => p.age).distinct\n}\n\ndb.run(q)\n// SELECT DISTINCT p.age FROM Person p\n```\n\n**joins**\n\nIn addition to applicative joins Quill also supports explicit joins (both inner and left/right/full outer joins).\n\n```scala\n\nval q = quote {\n  query[Person].join(query[Contact]).on((p, c) => c.personId == p.id)\n}\n\ndb.run(q)\n// SELECT p.id, p.name, p.age, c.personId, c.phone•\n// FROM Person p INNER JOIN Contact c ON c.personId = p.id\n\nval q = quote {\n  query[Person].leftJoin(query[Contact]).on((p, c) => c.personId == p.id)\n}\n\ndb.run(q)\n// SELECT p.id, p.name, p.age, c.personId, c.phone•\n// FROM Person p LEFT JOIN Contact c ON c.personId = p.id\n\n```\n\nThe example joins above cover the simple case. What do you do when a query requires joining more than 2 tables?\n\nWith Quill the following multi-join queries are equivalent, choose according to preference:\n\n```scala\n\ncase class Employer(id: Int, personId: Int, name: String)\n\nval qFlat = quote {\n  for{\n    (p,e) <- query[Person].join(query[Employer]).on(_.id == _.personId)\n       c  <- query[Contact].leftJoin(_.personId == p.id)\n  } yield(p, e, c)\n}\n\nval qNested = quote {\n  for{\n    ((p,e),c) <-\n      query[Person].join(query[Employer]).on(_.id == _.personId)\n      .leftJoin(query[Contact]).on(\n        _._1.id == _.personId\n      )\n  } yield(p, e, c)\n}\n\ndb.run(qFlat)\ndb.run(qNested)\n// SELECT p.id, p.name, p.age, e.id, e.personId, e.name, c.id, c.phone•\n// FROM Person p INNER JOIN Employer e ON p.id = e.personId LEFT JOIN Contact c ON c.personId = p.id\n\n```\n\n#### Query probing\n\nQuery probing is an experimental feature that validates queries against the database at compile time, failing the compilation if it is not valid. The query validation does not alter the database state.\n\nThis feature is disabled by default. To enable it, mix the `QueryProbing` trait to the database configuration:\n\n```\nlazy val db = source(new MySourceConfig(\"configKey\") with QueryProbing)\n```\n\nThe config configuration must be self-contained, not having references to variables outside its scope. This allows the macro load the source instance at compile-time.\n\nThe configurations correspondent to the config key must be available at compile time. You can achieve it by adding this line to your project settings:\n\n```\nunmanagedClasspath in Compile += baseDirectory.value / \"src\" / \"main\" / \"resources\"\n```\n\nIf your project doesn't have a standard layout, e.g. a play project, you should configure the path to point to the folder that contains your config file.\n\nActions\n-------\n\nDatabase actions are defined using quotations as well. These actions don't have a collection-like API but rather a custom DSL to express inserts, deletes and updates.\n\n  Note: Actions take either a List (in which case the query is batched) or a single value.\n\n**insert**\n```scala\nval a = quote(query[Contact].insert)\n\ndb.run(a)(List(Contact(999, \"+1510488988\")))\n// INSERT INTO Contact (personId,phone) VALUES (?, ?)\ndb.run(a)(Contact(999, \"+1510488988\"))\n// insert single item\n```\n\nIt is also possible to insert specific columns:\n\n```scala\nval a = quote {\n  (personId: Int, phone: String) =>\n    query[Contact].insert(_.personId -> personId, _.phone -> phone)\n}\n\ndb.run(a)(List((999, \"+1510488988\")))\n// INSERT INTO Contact (personId,phone) VALUES (?, ?)\n```\n\nOr column queries:\n\n```scala\nval a = quote {\n  (id: Int) =>\n    query[Person].insert(_.id -> id, _.age -> query[Person].map(p => p.age).max)\n}\n\ndb.run(a)(List(999))\n// INSERT INTO Person (id,age) VALUES (?, (SELECT MAX(p.age) FROM Person p))\n```\n\n**update**\n```scala\nval a = quote {\n  query[Person].filter(_.id == 999).update\n}\n\ndb.run(a)(List(Person(999, \"John\", 22)))\n// UPDATE Person SET id = ?, name = ?, age = ? WHERE id = 999\ndb.run(a)(Person(999, \"John\", 22))\n// update single item\n```\n\nUsing specific columns:\n\n```scala\nval a = quote {\n  (id: Int, age: Int) =>\n    query[Person].filter(p => p.id == id).update(_.age -> age)\n}\n\ndb.run(a)(List((999, 18)))\n// UPDATE Person SET age = ? WHERE id = ?\n```\n\nUsing columns as part of the update:\n\n```scala\nval a = quote {\n  (id: Int) =>\n    query[Person].filter(p => p.id == id).update(p => p.age -> (p.age + 1))\n}\n\ndb.run(a)(List(999))\n// UPDATE Person SET age = (age + 1) WHERE id = ?\n```\n\nUsing column a query:\n\n```scala\nval a = quote {\n  (id: Int) =>\n    query[Person].filter(p => p.id == id).update(_.age -> query[Person].map(p => p.age).max)\n}\n\ndb.run(a)(List(999))\n// UPDATE Person SET age = (SELECT MAX(p.age) FROM Person p) WHERE id = ?\n```\n\n**delete**\n```scala\nval a = quote {\n  query[Person].filter(p => p.name == \"\").delete\n}\n\ndb.run(a)\n// DELETE FROM Person WHERE name = ''\n```\n\nImplicit query\n--------------\n\nQuill provides implicit conversions from case class companion objects to `query[T]` through an extra import:\n\n```scala\nimport io.getquill.ImplicitQuery._\n\nval q = quote {\n  for {\n    p <- Person if(p.id == 999)\n    c <- Contact if(c.personId == p.id)\n  } yield {\n    (p.name, c.phone)\n  }\n}\n\ndb.run(q)\n// SELECT p.name, c.phone FROM Person p, Contact c WHERE (p.id = 999) AND (c.personId = p.id)\n```\n\nNote the usage of `Person` and `Contact` instead of `query[Person]` and `query[Contact]`.\n\nSQL-specific operations\n-----------------------\n\nSome operations are sql-specific and not provided with the generic quotation mechanism. The `io.getquill.sources.sql.ops` package has some implicit classes for this kind of operations:\n\n**like**\n\n```scala\nimport io.getquill.sources.sql.ops._\n\nval q = quote {\n  query[Person].filter(p => p.name like \"%John%\")\n}\ndb.run(q)\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.name like '%John%'\n```\n\nCassandra-specific operations\n-----------------------------\n\nThe cql-specific operations are provided by the following import:\n\n```scala\nimport io.getquill.sources.cassandra.ops._\n```\n\nThe cassandra package also offers a mirror source:\n\n```scala\nimport io.getquill._\n\nlazy val db = source(new CassandraMirrorSourceConfig(\"testSource\"))\n```\n\nSupported operations:\n\n**allowFiltering**\n\n```scala\nval q = quote {\n  query[Person].filter(p => p.age > 10).allowFiltering\n}\ndb.run(q)\n// SELECT id, name, age FROM Person WHERE age > 10 ALLOW FILTERING\n```\n\n**ifNotExists**\n```scala\nval q = quote {\n  query[Person].insert(_.age -> 10, _.name -> \"John\").ifNotExists\n}\ndb.run(q)\n// INSERT INTO Person (age,name) VALUES (10, 'John') IF NOT EXISTS\n```\n\n**ifExists**\n```scala\nval q = quote {\n  query[Person].filter(p => p.name == \"John\").delete.ifExists\n}\ndb.run(q)\n// DELETE FROM Person WHERE name = 'John' IF EXISTS\n```\n\n**usingTimestamp**\n```scala\nval q1 = quote {\n  query[Person].insert(_.age -> 10, _.name -> \"John\").usingTimestamp(99)\n}\ndb.run(q1)\n// INSERT INTO Person (age,name) VALUES (10, 'John') USING TIMESTAMP 99\n\nval q2 = quote {\n  query[Person].usingTimestamp(99).update(_.age -> 10)\n}\ndb.run(q2)\n// UPDATE Person USING TIMESTAMP 99 SET age = 10\n```\n\n**usingTtl**\n```scala\nval q1 = quote {\n  query[Person].insert(_.age -> 10, _.name -> \"John\").usingTtl(11)\n}\ndb.run(q1)\n// INSERT INTO Person (age,name) VALUES (10, 'John') USING TTL 11\n\nval q2 = quote {\n  query[Person].usingTtl(11).update(_.age -> 10)\n}\ndb.run(q2)\n// UPDATE Person USING TTL 11 SET age = 10\n\nval q3 = quote {\n  query[Person].usingTtl(11).filter(_.name == \"John\").delete\n}\ndb.run(q3)  \n// DELETE FROM Person USING TTL 11 WHERE name = 'John'\n```\n\n**using**\n```scala\nval q1 = quote {\n  query[Person].insert(_.age -> 10, _.name -> \"John\").using(ts = 99, ttl = 11)\n}\ndb.run(q1)\n// INSERT INTO Person (age,name) VALUES (10, 'John') USING TIMESTAMP 99 AND TTL 11\n\nval q2 = quote {\n  query[Person].using(ts = 99, ttl = 11).update(_.age -> 10)\n}\ndb.run(q2)\n// UPDATE Person USING TIMESTAMP 99 AND TTL 11 SET age = 10\n\nval q3 = quote {\n  query[Person].using(ts = 99, ttl = 11).filter(_.name == \"John\").delete\n}\ndb.run(q3)\n// DELETE FROM Person USING TIMESTAMP 99 AND TTL 11 WHERE name = 'John'\n```\n\n**ifCond**\n```scala\nval q1 = quote {\n  query[Person].update(_.age -> 10).ifCond(_.name == \"John\")\n}\ndb.run(q1)\n// UPDATE Person SET age = 10 IF name = 'John'\n\nval q2 = quote {\n  query[Person].filter(_.name == \"John\").delete.ifCond(_.age == 10)\n}\ndb.run(q2)\n// DELETE FROM Person WHERE name = 'John' IF age = 10\n```\n\n**delete column**\n```scala\nval q = quote {\n  query[Person].map(p => p.age).delete\n}\ndb.run(q)\n// DELETE p.age FROM Person\n```\n\nDynamic queries\n---------------\n\nQuill's default operation mode is compile-time, but there are queries that have their structure defined only at runtime. Quill automatically falls back to runtime normalization and query generation if the query's structure is not static. Example:\n\n```scala\nimport io.getquill._\n\nlazy val db = source(new SqlMirrorSourceConfig(\"testSource\"))\n\nsealed trait QueryType\ncase object Minor extends QueryType\ncase object Senior extends QueryType\n\ndef people(t: QueryType): Quoted[Query[Person]] =\n  t match {\n    case Minor => quote {\n      query[Person].filter(p => p.age < 18)\n    }\n    case Senior => quote {\n      query[Person].filter(p => p.age > 65)\n    }\n  }\n\ndb.run(people(Minor))\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.age < 18\n\ndb.run(people(Senior))\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.age > 65\n```\n\nExtending quill\n===============\n\nInfix\n-----\n\nInfix is a very flexible mechanism to use non-supported features without having to use plain queries in the target language. It allows insertion of arbitrary strings within quotations.\n\nFor instance, quill doesn't support the `FOR UPDATE` SQL feature. It can still be used through infix and implicit classes:\n\n```scala\nimplicit class ForUpdate[T](q: Query[T]) {\n  def forUpdate = quote(infix\"$q FOR UPDATE\".as[Query[T]])\n}\n\nval a = quote {\n  query[Person].filter(p => p.age < 18).forUpdate\n}\n\ndb.run(a)\n// SELECT p.id, p.name, p.age FROM (SELECT * FROM Person p WHERE p.age < 18 FOR UPDATE) p\n```\n\nThe `forUpdate` quotation can be reused for multiple queries.\n\nThe same approach can be used for `RETURNING ID`:\n\n```scala\nimplicit class ReturningId[T](a: Action[T]) {\n  def returningId = quote(infix\"$a RETURNING ID\".as[Action[T]])\n}\n\nval a = quote {\n  query[Person].insert(_.name -> \"John\", _.age -> 21).returningId\n}\n\ndb.run(a)\n// INSERT INTO Person (name,age) VALUES ('John', 21) RETURNING ID\n```\n\nA custom database function can also be used through infix:\n\n```scala\nval myFunction = quote {\n  (i: Int) => infix\"MY_FUNCTION($i)\".as[Int]\n}\n\nval q = quote {\n  query[Person].map(p => myFunction(p.age))\n}\n\ndb.run(q)\n// SELECT MY_FUNCTION(p.age) FROM Person p\n```\n\nCustom encoding\n---------------\n\nQuill uses `Encoder`s to encode query inputs and `Decoder`s to read values returned by queries. The library provides a few built-in encodings and two mechanisms to define custom encodings: mapped encoding and raw encoding.\n\nMapped Encoding\n---------------\n\nIf the correspondent database type is already supported, use `mappedEncoding`. In this example, `String` is already supported by Quill and the `UUID` encoding from/to `String` is defined through mapped encoding:\n\n```scala\nimport java.util.UUID\n\nimplicit val encodeUUID = mappedEncoding[UUID, String](_.toString)\nimplicit val decodeUUID = mappedEncoding[String, UUID](UUID.fromString(_))\n```\n\nRaw Encoding\n------------\n\nIf the database type is not supported by Quill, it is possible to provide \"raw\" encoders and decoders:\n\n```scala\nimport io.getquill.naming.Literal\nimport io.getquill.sources.jdbc.JdbcSource\nimport io.getquill.sources.sql.idiom.PostgresDialect\n\ntrait UUIDEncodingExample {\n  val jdbcSource: JdbcSource[PostgresDialect, Literal] // your source should go here\n\n  import jdbcSource._\n\n  implicit val uuidDecoder: Decoder[UUID] =\n    decoder[UUID] {\n      row => index =>\n        UUID.fromString(row.getObject(index).toString) // database-specific implementation\n    }\n  implicit val uuidEncoder: Encoder[UUID] =\n    encoder[UUID] {\n      row => (idx, uuid) =>\n        row.setObject(idx, uuid, java.sql.Types.OTHER) // database-specific implementation\n    }\n}\n```\n\nWrapped types\n-------------\n\nQuill also supports encoding of \"wrapped types\". Just extend the `WrappedValue` trait and Quill will automatically encode the underlying primitive type.\n\n```scala\nimport io.getquill.sources._\n\ncase class UserId(value: Int) extends AnyVal with WrappedValue[Int]\ncase class User(id: UserId, name: String)\n\nval q = quote {\n  (id: UserId) => for {\n    u <- query[User] if u.id == id\n  } yield u\n}\ndb.run(q)(UserId(1))\n\n// SELECT u.id, u.name FROM User u WHERE (u.id = 1)\n```\n\nSources\n=======\n\nSQL Sources\n-----------\n\nSources represent the database and provide an execution interface for queries. Example:\n\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\nimport io.getquill.sources.sql.idiom.MySQLDialect\n\nlazy val db = source(new JdbcSourceConfig[MySQLDialect, SnakeCase](\"db\"))\n```\n\n#### Dialect\n\nThe SQL dialect to be used by the source is defined by the first type parameter. Some source types are specific to a database and thus not require it.\n\nQuill has three built-in dialects:\n\n- `io.getquill.sources.sql.idiom.H2Dialect`\n- `io.getquill.sources.sql.idiom.MySQLDialect`\n- `io.getquill.sources.sql.idiom.PostgresDialect`\n\n#### Naming strategy\n\nThe second type parameter defines the naming strategy to be used when translating identifiers (table and column names) to SQL.\n\n\n|           strategy                  |          example              |\n|-------------------------------------|-------------------------------|\n| `io.getquill.naming.Literal`        | some_ident  -> some_ident     |\n| `io.getquill.naming.Escape`         | some_ident  -> \"some_ident\"   |\n| `io.getquill.naming.UpperCase`      | some_ident  -> SOME_IDENT     |\n| `io.getquill.naming.LowerCase`      | SOME_IDENT  -> some_ident     |\n| `io.getquill.naming.SnakeCase`      | someIdent   -> some_ident     |\n| `io.getquill.naming.CamelCase`      | some_ident  -> someIdent      |\n| `io.getquill.naming.MysqlEscape`    | some_ident  -> \\`some_ident\\` |\n| `io.getquill.naming.PostgresEscape` | $some_ident -> $some_ident    |\n\nMultiple transformations can be defined using mixin. For instance, the naming strategy\n\n```SnakeCase with UpperCase```\n\nproduces the following transformation:\n\n```someIdent -> SOME_IDENT```\n\nThe transformations are applied from left to right.\n\n#### Configuration\n\nThe string passed to the source configuration is used as the key to obtain configurations using the [typesafe config](http://github.com/typesafehub/config) library.\n\nAdditionally, any member of a source configuration can be overriden. Example:\n\n```\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\nimport io.getquill.sources.sql.idiom.MySQLDialect\n\nlazy val db = source(new JdbcSourceConfig[MySQLDialect, SnakeCase](\"db\") {\n  override def dataSource = ??? // create the datasource manually\n})\n```\n\n##### quill-jdbc\n\nQuill uses [HikariCP](https://github.com/brettwooldridge/HikariCP) for connection pooling. Please refer to HikariCP's [documentation](https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby) for a detailed explanation of the available configurations.\n\nNote that there are `dataSource` configurations, that go under `dataSource`, like `user` and `password`, but some pool settings may go under the root config, like `connectionTimeout`.\n\n**MySQL**\n\nsbt dependencies\n```\nlibraryDependencies ++= Seq(\n  \"mysql\" % \"mysql-connector-java\" % \"5.1.36\",\n  \"io.getquill\" %% \"quill-jdbc\" % \"0.7.1-SNAPSHOT\"\n)\n```\n\nsource definition\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\nimport io.getquill.sources.sql.idiom.MySQLDialect\n\nlazy val db = source(new JdbcSourceConfig[MySQLDialect, SnakeCase](\"db\"))\n```\n\napplication.properties\n```\ndb.dataSourceClassName=com.mysql.jdbc.jdbc2.optional.MysqlDataSource\ndb.dataSource.url=jdbc:mysql://host/database\ndb.dataSource.user=root\ndb.dataSource.password=root\ndb.dataSource.cachePrepStmts=true\ndb.dataSource.prepStmtCacheSize=250\ndb.dataSource.prepStmtCacheSqlLimit=2048\ndb.connectionTimeout=30000\n```\n\n**Postgres**\n\nsbt dependencies\n```\nlibraryDependencies ++= Seq(\n  \"org.postgresql\" % \"postgresql\" % \"9.4-1206-jdbc41\",\n  \"io.getquill\" %% \"quill-jdbc\" % \"0.7.1-SNAPSHOT\"\n)\n```\n\nsource definition\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\nimport io.getquill.sources.sql.idiom.PostgresDialect\n\nlazy val db = source(new JdbcSourceConfig[PostgresDialect, SnakeCase](\"db\"))\n```\n\napplication.properties\n```\ndb.dataSourceClassName=org.postgresql.ds.PGSimpleDataSource\ndb.dataSource.user=root\ndb.dataSource.password=root\ndb.dataSource.databaseName=database\ndb.dataSource.portNumber=5432\ndb.dataSource.serverName=host\ndb.connectionTimeout=30000\n```\n\n##### quill-async\n\n**MySQL Async**\n\nsbt dependencies\n```\nlibraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-async\" % \"0.7.1-SNAPSHOT\"\n)\n```\n\nsource definition\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\n\nlazy val db = source(new MysqlAsyncSourceConfig[SnakeCase](\"db\"))\n```\n\napplication.properties\n```\ndb.host=host\ndb.port=3306\ndb.user=root\ndb.password=root\ndb.database=database\ndb.poolMaxQueueSize=4\ndb.poolMaxObjects=4\ndb.poolMaxIdle=999999999\ndb.poolValidationInterval=100\n```\n\n**Postgres Async**\n\nsbt dependencies\n```\nlibraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-async\" % \"0.7.1-SNAPSHOT\"\n)\n```\n\nsource definition\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\n\nlazy val db = source(new PostgresAsyncSourceConfig[SnakeCase](\"db\"))\n```\n\napplication.properties\n```\ndb.host=host\ndb.port=5432\ndb.user=root\ndb.password=root\ndb.database=database\ndb.poolMaxQueueSize=4\ndb.poolMaxObjects=4\ndb.poolMaxIdle=999999999\ndb.poolValidationInterval=100\n```\n\n##### quill-finagle-mysql\n\nsbt dependencies\n```\nlibraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-finagle-mysql\" % \"0.7.1-SNAPSHOT\"\n)\n```\n\nsource definition\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\n\nlazy val db = source(new FinagleMysqlSourceConfig[SnakeCase](\"db\"))\n```\n\napplication.properties\n```\ndb.dest=localhost:3306\ndb.user=root\ndb.password=root\ndb.database=database\ndb.pool.watermark.low=0\ndb.pool.watermark.high=10\ndb.pool.idleTime=5 # seconds\ndb.pool.bufferSize=0\ndb.pool.maxWaiters=2147483647\n```\n\nCassandra Sources\n-----------------\n\nsbt dependencies\n```\nlibraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-cassandra\" % \"0.7.1-SNAPSHOT\"\n)\n```\n\n**synchronous source**\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\n\nlazy val db = source(new CassandraSyncSourceConfig[SnakeCase](\"db\"))\n```\n\n**asynchronous source**\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\n\nlazy val db = source(new CassandraAsyncSourceConfig[SnakeCase](\"db\"))\n```\n\n**stream source**\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\n\nlazy val db = source(new CassandraStreamSourceConfig[SnakeCase](\"db\"))\n```\n\nThe configurations are set using runtime reflection on the [`Cluster.builder`](https://docs.datastax.com/en/drivers/java/2.1/com/datastax/driver/core/Cluster.Builder.html) instance. It is possible to set nested structures like `queryOptions.consistencyLevel`, use enum values like `LOCAL_QUORUM`, and set multiple parameters like in `credentials`.\n\napplication.properties\n```\ndb.keyspace=quill_test\ndb.preparedStatementCacheSize=1000\ndb.session.contactPoint=127.0.0.1\ndb.session.queryOptions.consistencyLevel=LOCAL_QUORUM\ndb.session.withoutMetrics=true\ndb.session.withoutJMXReporting=false\ndb.session.credentials.0=root\ndb.session.credentials.1=pass\ndb.session.maxSchemaAgreementWaitSeconds=1\ndb.session.addressTranslater=com.datastax.driver.core.policies.IdentityTranslater\n```\n\nAdditional resources\n====================\n\nTemplates\n---------\n\nIn order to quickly start with Quill, we have setup some template projects:\n\n* [Play Framework with Quill JDBC](https://github.com/getquill/play-quill-jdbc)\n\nSlick comparison\n----------------\n\nPlease refer to [SLICK.md](https://github.com/getquill/quill/blob/master/SLICK.md) for a detailed comparison between Quill and Slick.\n\nCassandra libraries comparison\n------------------------------\n\nPlease refer to [CASSANDRA.md](https://github.com/getquill/quill/blob/master/CASSANDRA.md) for a detailed comparison between Quill and other main alternatives for interaction with Cassandra in Scala.\n\nCode of Conduct\n---------------\n\nPlease note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. See [CODE_OF_CONDUCT.md](https://github.com/getquill/quill/blob/master/CODE_OF_CONDUCT.md) for details.\n\nLicense\n-------\n\nSee the [LICENSE](https://github.com/getquill/quill/blob/master/LICENSE.txt) file for details.\n\nMaintainers\n===========\n\n- @fwbrasil\n- @godenji\n- @gustavoamigo\n- @jilen\n- @lvicentesanchez\n\nYou can notify all maintainers using the handle `@getquill/maintainers`.\n\nAcknowledgments\n===============\n\nThe project was created having Philip Wadler's talk [\"A practical theory of language-integrated query\"](http://www.infoq.com/presentations/theory-language-integrated-query) as its initial inspiration. The development was heavily influenced by the following papers:\n\n* [A Practical Theory of Language-Integrated Query](http://homepages.inf.ed.ac.uk/slindley/papers/practical-theory-of-linq.pdf)\n* [Everything old is new again: Quoted Domain Specific Languages](http://homepages.inf.ed.ac.uk/wadler/papers/qdsl/qdsl.pdf)\n* [The Flatter, the Better](http://db.inf.uni-tuebingen.de/staticfiles/publications/the-flatter-the-better.pdf)\n","source":"_drafts/quill/README.md","raw":"IMPORTANT: This is the documentation for the latest `SNAPSHOT` version. Please refer to the website at [http://getquill.io](http://getquill.io) for the lastest release's documentation.\n--------------------------------------------------------------------------------------------------\n\n![quill](https://raw.githubusercontent.com/getquill/quill/master/quill.png)\n\nCompile-time Language Integrated Query for Scala\n\n[![Build Status](https://travis-ci.org/getquill/quill.svg?branch=master)](https://travis-ci.org/getquill/quill)\n[![Codacy Badge](https://api.codacy.com/project/badge/grade/36ab84c7ff43480489df9b7312a4bdc1)](https://www.codacy.com/app/fwbrasil/quill)\n[![codecov.io](https://codecov.io/github/getquill/quill/coverage.svg?branch=master)](https://codecov.io/github/getquill/quill?branch=master)\n[![Join the chat at https://gitter.im/getquill/quill](https://img.shields.io/badge/gitter-join%20chat-green.svg)](https://gitter.im/getquill/quill?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Dependency Status](https://www.versioneye.com/user/projects/56ea4da64e714c0035e76353/badge.svg?style=flat)](https://www.versioneye.com/user/projects/56ea4da64e714c0035e76353)\n\nQuill provides a Quoted Domain Specific Language ([QDSL](http://homepages.inf.ed.ac.uk/wadler/papers/qdsl/qdsl.pdf)) to express queries in Scala and execute them in a target language. The library's core is designed to support multiple target languages, currently featuring specializations for Structured Query Language ([SQL](https://en.wikipedia.org/wiki/SQL)) and Cassandra Query Language ([CQL](https://cassandra.apache.org/doc/cql3/CQL.html#selectStmt)).\n\n![example](https://raw.githubusercontent.com/getquill/quill/master/example.gif)\n\n1. **Boilerplate-free mapping**: The database schema is mapped using simple case classes.\n2. **Quoted DSL**: Queries are defined inside a `quote` block. Quill parses each quoted block of code (quotation) at compile time and translates them to an internal Abstract Syntax Tree (AST)\n3. **Compile-time query generation**: The `db.run` call reads the quotation's AST and translates it to the target language at compile time, emitting the query string as a compilation message. As the query string is known at compile time, the runtime overhead is very low and similar to using the database driver directly.\n4. **Compile-time query validation**: If configured, the query is verified against the database at compile time and the compilation fails if it is not valid. The query validation **does not** alter the database state.\n\nQuotation\n=========\n\nIntroduction\n------------\n\nThe QDSL allows the user to write plain Scala code, leveraging scala's syntax and type system. Quotations are created using the `quote` method and can contain any excerpt of code that uses supported operations. To create quotations, first import `quote` and some other auxiliary methods:\n\n```scala\nimport io.getquill._\n```\n\nA quotation can be a simple value:\n\n```scala\nval pi = quote(3.14159)\n```\n\nAnd be used within another quotation:\n\n```scala\ncase class Circle(radius: Float)\n\nval areas = quote {\n  query[Circle].map(c => pi * c.radius * c.radius)\n}\n```\n\nQuotations can also contain high-order functions and inline values:\n\n```scala\nval area = quote {\n  (c: Circle) => {\n    val r2 = c.radius * c.radius\n    pi * r2\n  }\n}\n```\n\n```scala\nval areas = quote {\n  query[Circle].map(c => area(c))\n}\n```\n\nQuotations can contain values defined outside of the quotation:\n```scala\nval pi = 3.14159\nval areas = quote {\n  query[Circle].map(c => pi * c.radius * c.radius)\n}\n```\n\nQuill's normalization engine applies reduction steps before translating the quotation to the target language. The correspondent normalized quotation for both versions of the `areas` query is:\n\n```scala\nval areas = quote {\n  query[Circle].map(c => 3.14159 * c.radius * c.radius)\n}\n```\n\nScala doesn't have support for high-order functions with type parameters. Quill supports anonymous classes with an apply method for this purpose:\n\n```scala\nval existsAny = quote {\n  new {\n    def apply[T](xs: Query[T])(p: T => Boolean) =\n    \txs.filter(p(_)).nonEmpty\n  }\n}\n\nval q = quote {\n  query[Circle].filter { c1 =>\n    existsAny(query[Circle])(c2 => c2.radius > c1.radius)\n  }\n}\n```\n\nMirror sources\n--------------\n\nSources represent the database and provide an execution interface for queries. Quill provides mirror sources for test purposes. Please refer to [sources](#sources) for information on how to create normal sources.\n\nInstead of running the query, mirror sources return a structure with the information that would be used to run the query. There are three mirror source configurations:\n\n- `io.getquill.MirrorSourceConfig`: Mirrors the quotation AST\n- `io.getquill.SqlMirrorSourceConfig`: Mirrors the SQL query\n- `io.getquill.CassandraMirrorSourceConfig`: Mirrors the CQL query\n\nThis documentation uses the SQL mirror in its examples under the `db` name:\n\n```scala\nimport io.getquill._\n\nlazy val db = source(new SqlMirrorSourceConfig(\"testSource\"))\n```\n\nCompile-time quotations\n-----------------------\n\nQuotations are both compile-time and runtime values. Quill uses a type refinement to store the quotation's AST as an annotation available at compile-time and the `q.ast` method exposes the AST as runtime value.\n\nIt is important to avoid giving explicit types to quotations when possible. For instance, this quotation can't be read at compile-time as the type refinement is lost:\n\n```scala\n// Avoid type widening (Quoted[Query[Circle]]), or else the quotation will be dynamic.\nval q: Quoted[Query[Circle]] = quote {\n  query[Circle].filter(c => c.radius > 10)\n}\n\ndb.run(q) // Dynamic query\n```\n\nQuill falls back to runtime normalization and query generation if the quotation's AST can be read at compile-time. Please refer to [dynamic queries](#dynamic-queries) for more information\n\nBindings\n--------\n\nQuotations are designed to be self-contained, without references to runtime values outside their scope. There are two mechanisms to explicitly bind runtime values to a quotation execution.\n\n#### Lifted values\n\nA runtime value can be lifted to a quotation through the method `lift`:\n\n```scala\ndef biggerThan(i: Float) = quote {\n  query[Circle].filter(r => r.radius > lift(i))\n}\ndb.run(biggerThan(10)) // SELECT r.radius FROM Circle r WHERE r.radius > ?\n```\n\n#### Parametrized quotations\n\nA quotation can be defined as a function:\n\n```scala\nval biggerThan = quote {\n  (i: Int) =>\n    query[Circle].filter(r => r.radius > i)\n}\n```\n\nAnd a runtime value can be specified when running it:\n\n```scala\ndb.run(biggerThan)(10) // SELECT r.radius FROM Circle r WHERE r.radius > ?\n```\n\nSchema\n------\n\nThe database schema is represented by case classes. By default, quill uses the class and field names as the database identifiers:\n\n```scala\ncase class Circle(radius: Float)\n\nval q = quote {\n  query[Circle].filter(c => c.radius > 1)\n}\n\ndb.run(q) // SELECT c.radius FROM Circle c WHERE c.radius > 1\n```\n\nAlternatively, the identifiers can be customized:\n\n```scala\nval circles = quote {\n  query[Circle].schema(_.entity(\"circle_table\").columns(_.radius -> \"radius_column\"))\n}\n\nval q = quote {\n  circles.filter(c => c.radius > 1)\n}\n\ndb.run(q)\n// SELECT c.radius_column FROM circle_table c WHERE c.radius_column > 1\n```\n\nIf multiple tables require custom identifiers, it is good practice to define a `schema` object with all table queries to be reused across multiple queries:\n\n```scala\ncase class Circle(radius: Int)\ncase class Rectangle(length: Int, width: Int)\nobject schema {\n  val circles = quote {\n    query[Circle].schema(\n        _.entity(\"circle_table\")\n        .columns(_.radius -> \"radius_column\"))\n  }\n  val rectangles = quote {\n    query[Rectangle].schema(\n        _.entity(\"rectangle_table\")\n        .columns(\n          _.length -> \"length_column\",\n          _.width -> \"width_column\"))\n  }\n}\n```\n\nIt is possible to define a column that is a key generated by the database. It will be ignored during insertions and returned as the result.\nNote that it accepts only values that can be read as `Long`.\n```scala\ncase class Product(id: Long, description: String, sku: Long)\n\nval q = quote {\n  query[Product].schema(_.generated(_.id)).insert\n}\n\ndb.run(q)\n// INSERT INTO Product (description,sku) VALUES (?, ?)\n```\n\nQueries\n-------\n\nThe overall abstraction of quill queries is use database tables as if they were in-memory collections. Scala for-comprehensions provide syntatic sugar to deal with this kind of monadic operations:\n\n```scala\ncase class Person(id: Int, name: String, age: Int)\ncase class Contact(personId: Int, phone: String)\n\nval q = quote {\n  for {\n    p <- query[Person] if(p.id == 999)\n    c <- query[Contact] if(c.personId == p.id)\n  } yield {\n    (p.name, c.phone)\n  }\n}\n\ndb.run(q)\n// SELECT p.name, c.phone FROM Person p, Contact c WHERE (p.id = 999) AND (c.personId = p.id)\n```\n\nQuill normalizes the quotation and translates the monadic joins to applicative joins, generating a database-friendly query that avoids nested queries.\n\nAny of the following features can be used together with the others and/or within a for-comprehension:\n\n**filter**\n```scala\nval q = quote {\n  query[Person].filter(p => p.age > 18)\n}\n\ndb.run(q)\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.age > 18\n```\n\n**map**\n```scala\nval q = quote {\n  query[Person].map(p => p.name)\n}\n\ndb.run(q)\n// SELECT p.name FROM Person p\n```\n\n**flatMap**\n```scala\nval q = quote {\n  query[Person].filter(p => p.age > 18).flatMap(p => query[Contact].filter(c => c.personId == p.id))\n}\n\ndb.run(q)\n// SELECT c.personId, c.phone FROM Person p, Contact c WHERE (p.age > 18) AND (c.personId = p.id)\n```\n\n**sortBy**\n```scala\nval q1 = quote {\n  query[Person].sortBy(p => p.age)\n}\n\ndb.run(q1)\n// SELECT p.id, p.name, p.age FROM Person p ORDER BY p.age ASC NULLS FIRST\n\nval q2 = quote {\n  query[Person].sortBy(p => p.age)(Ord.descNullsLast)\n}\n\ndb.run(q2)\n// SELECT p.id, p.name, p.age FROM Person p ORDER BY p.age DESC NULLS LAST\n\nval q3 = quote {\n  query[Person].sortBy(p => (p.name, p.age))(Ord(Ord.asc, Ord.desc))\n}\n\ndb.run(q3)\n// SELECT p.id, p.name, p.age FROM Person p ORDER BY p.name ASC, p.age DESC\n```\n\n**drop/take**\n\n```scala\nval q = quote {\n  query[Person].drop(2).take(1)\n}\n\ndb.run(q)\n// SELECT x.id, x.name, x.age FROM Person x LIMIT 1 OFFSET 2\n```\n\n**groupBy**\n```scala\nval q = quote {\n  query[Person].groupBy(p => p.age).map {\n    case (age, people) =>\n      (age, people.size)\n  }\n}\n\ndb.run(q)\n// SELECT p.age, COUNT(*) FROM Person p GROUP BY p.age\n```\n\n**union**\n```scala\nval q = quote {\n  query[Person].filter(p => p.age > 18).union(query[Person].filter(p => p.age > 60))\n}\n\ndb.run(q)\n// SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age > 18\n// UNION SELECT id, name, age FROM Person p1 WHERE p1.age > 60) x\n```\n\n**unionAll/++**\n```scala\nval q = quote {\n  query[Person].filter(p => p.age > 18).unionAll(query[Person].filter(p => p.age > 60))\n}\n\ndb.run(q)\n// SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age > 18\n// UNION ALL SELECT id, name, age FROM Person p1 WHERE p1.age > 60) x\n\nval q2 = quote {\n  query[Person].filter(p => p.age > 18) ++ query[Person].filter(p => p.age > 60)\n}\n\ndb.run(q2)\n// SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age > 18\n// UNION ALL SELECT id, name, age FROM Person p1 WHERE p1.age > 60) x\n```\n\n**aggregation**\n```scala\nval r = quote {\n  query[Person].map(p => p.age)\n}\n\ndb.run(r.min) // SELECT MIN(p.age) FROM Person p\ndb.run(r.max) // SELECT MAX(p.age) FROM Person p\ndb.run(r.avg) // SELECT AVG(p.age) FROM Person p\ndb.run(r.sum) // SELECT SUM(p.age) FROM Person p\ndb.run(r.size) // SELECT COUNT(p.age) FROM Person p\n```\n\n**isEmpty/nonEmpty**\n```scala\nval q = quote {\n  query[Person].filter{ p1 =>\n    query[Person].filter(p2 => p2.id != p1.id && p2.age == p1.age).isEmpty\n  }\n}\n\ndb.run(q)\n// SELECT p1.id, p1.name, p1.age FROM Person p1 WHERE\n// NOT EXISTS (SELECT * FROM Person p2 WHERE (p2.id <> p1.id) AND (p2.age = p1.age))\n\nval q2 = quote {\n  query[Person].filter{ p1 =>\n    query[Person].filter(p2 => p2.id != p1.id && p2.age == p1.age).nonEmpty\n  }\n}\n\ndb.run(q2)\n// SELECT p1.id, p1.name, p1.age FROM Person p1 WHERE\n// EXISTS (SELECT * FROM Person p2 WHERE (p2.id <> p1.id) AND (p2.age = p1.age))\n```\n\n**contains**\n```scala\nval q = quote {\n  query[Person].filter(p => Set(1, 2).contains(p.id))\n}\n\ndb.run(q)\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (1, 2)\n\nval q1 = quote { (ids: Set[Int]) =>\n  query[Person].filter(p => ids.contains(p.id))\n}\n\ndb.run(q1)\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (?)\n\nval peopleWithContacts = quote {\n  query[Person].filter(p => query[Contact].filter(c => c.personId == p.id).nonEmpty)\n}\nval q2 = quote {\n  query[Person].filter(p => peopleWithContacts.contains(p.id))\n}\n\ndb.run(q2)\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (SELECT p1.* FROM Person p1 WHERE EXISTS (SELECT c.* FROM Contact c WHERE c.personId = p1.id))\n```\n\n**distinct**\n```scala\nval q = quote {\n  query[Person].map(p => p.age).distinct\n}\n\ndb.run(q)\n// SELECT DISTINCT p.age FROM Person p\n```\n\n**joins**\n\nIn addition to applicative joins Quill also supports explicit joins (both inner and left/right/full outer joins).\n\n```scala\n\nval q = quote {\n  query[Person].join(query[Contact]).on((p, c) => c.personId == p.id)\n}\n\ndb.run(q)\n// SELECT p.id, p.name, p.age, c.personId, c.phone•\n// FROM Person p INNER JOIN Contact c ON c.personId = p.id\n\nval q = quote {\n  query[Person].leftJoin(query[Contact]).on((p, c) => c.personId == p.id)\n}\n\ndb.run(q)\n// SELECT p.id, p.name, p.age, c.personId, c.phone•\n// FROM Person p LEFT JOIN Contact c ON c.personId = p.id\n\n```\n\nThe example joins above cover the simple case. What do you do when a query requires joining more than 2 tables?\n\nWith Quill the following multi-join queries are equivalent, choose according to preference:\n\n```scala\n\ncase class Employer(id: Int, personId: Int, name: String)\n\nval qFlat = quote {\n  for{\n    (p,e) <- query[Person].join(query[Employer]).on(_.id == _.personId)\n       c  <- query[Contact].leftJoin(_.personId == p.id)\n  } yield(p, e, c)\n}\n\nval qNested = quote {\n  for{\n    ((p,e),c) <-\n      query[Person].join(query[Employer]).on(_.id == _.personId)\n      .leftJoin(query[Contact]).on(\n        _._1.id == _.personId\n      )\n  } yield(p, e, c)\n}\n\ndb.run(qFlat)\ndb.run(qNested)\n// SELECT p.id, p.name, p.age, e.id, e.personId, e.name, c.id, c.phone•\n// FROM Person p INNER JOIN Employer e ON p.id = e.personId LEFT JOIN Contact c ON c.personId = p.id\n\n```\n\n#### Query probing\n\nQuery probing is an experimental feature that validates queries against the database at compile time, failing the compilation if it is not valid. The query validation does not alter the database state.\n\nThis feature is disabled by default. To enable it, mix the `QueryProbing` trait to the database configuration:\n\n```\nlazy val db = source(new MySourceConfig(\"configKey\") with QueryProbing)\n```\n\nThe config configuration must be self-contained, not having references to variables outside its scope. This allows the macro load the source instance at compile-time.\n\nThe configurations correspondent to the config key must be available at compile time. You can achieve it by adding this line to your project settings:\n\n```\nunmanagedClasspath in Compile += baseDirectory.value / \"src\" / \"main\" / \"resources\"\n```\n\nIf your project doesn't have a standard layout, e.g. a play project, you should configure the path to point to the folder that contains your config file.\n\nActions\n-------\n\nDatabase actions are defined using quotations as well. These actions don't have a collection-like API but rather a custom DSL to express inserts, deletes and updates.\n\n  Note: Actions take either a List (in which case the query is batched) or a single value.\n\n**insert**\n```scala\nval a = quote(query[Contact].insert)\n\ndb.run(a)(List(Contact(999, \"+1510488988\")))\n// INSERT INTO Contact (personId,phone) VALUES (?, ?)\ndb.run(a)(Contact(999, \"+1510488988\"))\n// insert single item\n```\n\nIt is also possible to insert specific columns:\n\n```scala\nval a = quote {\n  (personId: Int, phone: String) =>\n    query[Contact].insert(_.personId -> personId, _.phone -> phone)\n}\n\ndb.run(a)(List((999, \"+1510488988\")))\n// INSERT INTO Contact (personId,phone) VALUES (?, ?)\n```\n\nOr column queries:\n\n```scala\nval a = quote {\n  (id: Int) =>\n    query[Person].insert(_.id -> id, _.age -> query[Person].map(p => p.age).max)\n}\n\ndb.run(a)(List(999))\n// INSERT INTO Person (id,age) VALUES (?, (SELECT MAX(p.age) FROM Person p))\n```\n\n**update**\n```scala\nval a = quote {\n  query[Person].filter(_.id == 999).update\n}\n\ndb.run(a)(List(Person(999, \"John\", 22)))\n// UPDATE Person SET id = ?, name = ?, age = ? WHERE id = 999\ndb.run(a)(Person(999, \"John\", 22))\n// update single item\n```\n\nUsing specific columns:\n\n```scala\nval a = quote {\n  (id: Int, age: Int) =>\n    query[Person].filter(p => p.id == id).update(_.age -> age)\n}\n\ndb.run(a)(List((999, 18)))\n// UPDATE Person SET age = ? WHERE id = ?\n```\n\nUsing columns as part of the update:\n\n```scala\nval a = quote {\n  (id: Int) =>\n    query[Person].filter(p => p.id == id).update(p => p.age -> (p.age + 1))\n}\n\ndb.run(a)(List(999))\n// UPDATE Person SET age = (age + 1) WHERE id = ?\n```\n\nUsing column a query:\n\n```scala\nval a = quote {\n  (id: Int) =>\n    query[Person].filter(p => p.id == id).update(_.age -> query[Person].map(p => p.age).max)\n}\n\ndb.run(a)(List(999))\n// UPDATE Person SET age = (SELECT MAX(p.age) FROM Person p) WHERE id = ?\n```\n\n**delete**\n```scala\nval a = quote {\n  query[Person].filter(p => p.name == \"\").delete\n}\n\ndb.run(a)\n// DELETE FROM Person WHERE name = ''\n```\n\nImplicit query\n--------------\n\nQuill provides implicit conversions from case class companion objects to `query[T]` through an extra import:\n\n```scala\nimport io.getquill.ImplicitQuery._\n\nval q = quote {\n  for {\n    p <- Person if(p.id == 999)\n    c <- Contact if(c.personId == p.id)\n  } yield {\n    (p.name, c.phone)\n  }\n}\n\ndb.run(q)\n// SELECT p.name, c.phone FROM Person p, Contact c WHERE (p.id = 999) AND (c.personId = p.id)\n```\n\nNote the usage of `Person` and `Contact` instead of `query[Person]` and `query[Contact]`.\n\nSQL-specific operations\n-----------------------\n\nSome operations are sql-specific and not provided with the generic quotation mechanism. The `io.getquill.sources.sql.ops` package has some implicit classes for this kind of operations:\n\n**like**\n\n```scala\nimport io.getquill.sources.sql.ops._\n\nval q = quote {\n  query[Person].filter(p => p.name like \"%John%\")\n}\ndb.run(q)\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.name like '%John%'\n```\n\nCassandra-specific operations\n-----------------------------\n\nThe cql-specific operations are provided by the following import:\n\n```scala\nimport io.getquill.sources.cassandra.ops._\n```\n\nThe cassandra package also offers a mirror source:\n\n```scala\nimport io.getquill._\n\nlazy val db = source(new CassandraMirrorSourceConfig(\"testSource\"))\n```\n\nSupported operations:\n\n**allowFiltering**\n\n```scala\nval q = quote {\n  query[Person].filter(p => p.age > 10).allowFiltering\n}\ndb.run(q)\n// SELECT id, name, age FROM Person WHERE age > 10 ALLOW FILTERING\n```\n\n**ifNotExists**\n```scala\nval q = quote {\n  query[Person].insert(_.age -> 10, _.name -> \"John\").ifNotExists\n}\ndb.run(q)\n// INSERT INTO Person (age,name) VALUES (10, 'John') IF NOT EXISTS\n```\n\n**ifExists**\n```scala\nval q = quote {\n  query[Person].filter(p => p.name == \"John\").delete.ifExists\n}\ndb.run(q)\n// DELETE FROM Person WHERE name = 'John' IF EXISTS\n```\n\n**usingTimestamp**\n```scala\nval q1 = quote {\n  query[Person].insert(_.age -> 10, _.name -> \"John\").usingTimestamp(99)\n}\ndb.run(q1)\n// INSERT INTO Person (age,name) VALUES (10, 'John') USING TIMESTAMP 99\n\nval q2 = quote {\n  query[Person].usingTimestamp(99).update(_.age -> 10)\n}\ndb.run(q2)\n// UPDATE Person USING TIMESTAMP 99 SET age = 10\n```\n\n**usingTtl**\n```scala\nval q1 = quote {\n  query[Person].insert(_.age -> 10, _.name -> \"John\").usingTtl(11)\n}\ndb.run(q1)\n// INSERT INTO Person (age,name) VALUES (10, 'John') USING TTL 11\n\nval q2 = quote {\n  query[Person].usingTtl(11).update(_.age -> 10)\n}\ndb.run(q2)\n// UPDATE Person USING TTL 11 SET age = 10\n\nval q3 = quote {\n  query[Person].usingTtl(11).filter(_.name == \"John\").delete\n}\ndb.run(q3)  \n// DELETE FROM Person USING TTL 11 WHERE name = 'John'\n```\n\n**using**\n```scala\nval q1 = quote {\n  query[Person].insert(_.age -> 10, _.name -> \"John\").using(ts = 99, ttl = 11)\n}\ndb.run(q1)\n// INSERT INTO Person (age,name) VALUES (10, 'John') USING TIMESTAMP 99 AND TTL 11\n\nval q2 = quote {\n  query[Person].using(ts = 99, ttl = 11).update(_.age -> 10)\n}\ndb.run(q2)\n// UPDATE Person USING TIMESTAMP 99 AND TTL 11 SET age = 10\n\nval q3 = quote {\n  query[Person].using(ts = 99, ttl = 11).filter(_.name == \"John\").delete\n}\ndb.run(q3)\n// DELETE FROM Person USING TIMESTAMP 99 AND TTL 11 WHERE name = 'John'\n```\n\n**ifCond**\n```scala\nval q1 = quote {\n  query[Person].update(_.age -> 10).ifCond(_.name == \"John\")\n}\ndb.run(q1)\n// UPDATE Person SET age = 10 IF name = 'John'\n\nval q2 = quote {\n  query[Person].filter(_.name == \"John\").delete.ifCond(_.age == 10)\n}\ndb.run(q2)\n// DELETE FROM Person WHERE name = 'John' IF age = 10\n```\n\n**delete column**\n```scala\nval q = quote {\n  query[Person].map(p => p.age).delete\n}\ndb.run(q)\n// DELETE p.age FROM Person\n```\n\nDynamic queries\n---------------\n\nQuill's default operation mode is compile-time, but there are queries that have their structure defined only at runtime. Quill automatically falls back to runtime normalization and query generation if the query's structure is not static. Example:\n\n```scala\nimport io.getquill._\n\nlazy val db = source(new SqlMirrorSourceConfig(\"testSource\"))\n\nsealed trait QueryType\ncase object Minor extends QueryType\ncase object Senior extends QueryType\n\ndef people(t: QueryType): Quoted[Query[Person]] =\n  t match {\n    case Minor => quote {\n      query[Person].filter(p => p.age < 18)\n    }\n    case Senior => quote {\n      query[Person].filter(p => p.age > 65)\n    }\n  }\n\ndb.run(people(Minor))\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.age < 18\n\ndb.run(people(Senior))\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.age > 65\n```\n\nExtending quill\n===============\n\nInfix\n-----\n\nInfix is a very flexible mechanism to use non-supported features without having to use plain queries in the target language. It allows insertion of arbitrary strings within quotations.\n\nFor instance, quill doesn't support the `FOR UPDATE` SQL feature. It can still be used through infix and implicit classes:\n\n```scala\nimplicit class ForUpdate[T](q: Query[T]) {\n  def forUpdate = quote(infix\"$q FOR UPDATE\".as[Query[T]])\n}\n\nval a = quote {\n  query[Person].filter(p => p.age < 18).forUpdate\n}\n\ndb.run(a)\n// SELECT p.id, p.name, p.age FROM (SELECT * FROM Person p WHERE p.age < 18 FOR UPDATE) p\n```\n\nThe `forUpdate` quotation can be reused for multiple queries.\n\nThe same approach can be used for `RETURNING ID`:\n\n```scala\nimplicit class ReturningId[T](a: Action[T]) {\n  def returningId = quote(infix\"$a RETURNING ID\".as[Action[T]])\n}\n\nval a = quote {\n  query[Person].insert(_.name -> \"John\", _.age -> 21).returningId\n}\n\ndb.run(a)\n// INSERT INTO Person (name,age) VALUES ('John', 21) RETURNING ID\n```\n\nA custom database function can also be used through infix:\n\n```scala\nval myFunction = quote {\n  (i: Int) => infix\"MY_FUNCTION($i)\".as[Int]\n}\n\nval q = quote {\n  query[Person].map(p => myFunction(p.age))\n}\n\ndb.run(q)\n// SELECT MY_FUNCTION(p.age) FROM Person p\n```\n\nCustom encoding\n---------------\n\nQuill uses `Encoder`s to encode query inputs and `Decoder`s to read values returned by queries. The library provides a few built-in encodings and two mechanisms to define custom encodings: mapped encoding and raw encoding.\n\nMapped Encoding\n---------------\n\nIf the correspondent database type is already supported, use `mappedEncoding`. In this example, `String` is already supported by Quill and the `UUID` encoding from/to `String` is defined through mapped encoding:\n\n```scala\nimport java.util.UUID\n\nimplicit val encodeUUID = mappedEncoding[UUID, String](_.toString)\nimplicit val decodeUUID = mappedEncoding[String, UUID](UUID.fromString(_))\n```\n\nRaw Encoding\n------------\n\nIf the database type is not supported by Quill, it is possible to provide \"raw\" encoders and decoders:\n\n```scala\nimport io.getquill.naming.Literal\nimport io.getquill.sources.jdbc.JdbcSource\nimport io.getquill.sources.sql.idiom.PostgresDialect\n\ntrait UUIDEncodingExample {\n  val jdbcSource: JdbcSource[PostgresDialect, Literal] // your source should go here\n\n  import jdbcSource._\n\n  implicit val uuidDecoder: Decoder[UUID] =\n    decoder[UUID] {\n      row => index =>\n        UUID.fromString(row.getObject(index).toString) // database-specific implementation\n    }\n  implicit val uuidEncoder: Encoder[UUID] =\n    encoder[UUID] {\n      row => (idx, uuid) =>\n        row.setObject(idx, uuid, java.sql.Types.OTHER) // database-specific implementation\n    }\n}\n```\n\nWrapped types\n-------------\n\nQuill also supports encoding of \"wrapped types\". Just extend the `WrappedValue` trait and Quill will automatically encode the underlying primitive type.\n\n```scala\nimport io.getquill.sources._\n\ncase class UserId(value: Int) extends AnyVal with WrappedValue[Int]\ncase class User(id: UserId, name: String)\n\nval q = quote {\n  (id: UserId) => for {\n    u <- query[User] if u.id == id\n  } yield u\n}\ndb.run(q)(UserId(1))\n\n// SELECT u.id, u.name FROM User u WHERE (u.id = 1)\n```\n\nSources\n=======\n\nSQL Sources\n-----------\n\nSources represent the database and provide an execution interface for queries. Example:\n\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\nimport io.getquill.sources.sql.idiom.MySQLDialect\n\nlazy val db = source(new JdbcSourceConfig[MySQLDialect, SnakeCase](\"db\"))\n```\n\n#### Dialect\n\nThe SQL dialect to be used by the source is defined by the first type parameter. Some source types are specific to a database and thus not require it.\n\nQuill has three built-in dialects:\n\n- `io.getquill.sources.sql.idiom.H2Dialect`\n- `io.getquill.sources.sql.idiom.MySQLDialect`\n- `io.getquill.sources.sql.idiom.PostgresDialect`\n\n#### Naming strategy\n\nThe second type parameter defines the naming strategy to be used when translating identifiers (table and column names) to SQL.\n\n\n|           strategy                  |          example              |\n|-------------------------------------|-------------------------------|\n| `io.getquill.naming.Literal`        | some_ident  -> some_ident     |\n| `io.getquill.naming.Escape`         | some_ident  -> \"some_ident\"   |\n| `io.getquill.naming.UpperCase`      | some_ident  -> SOME_IDENT     |\n| `io.getquill.naming.LowerCase`      | SOME_IDENT  -> some_ident     |\n| `io.getquill.naming.SnakeCase`      | someIdent   -> some_ident     |\n| `io.getquill.naming.CamelCase`      | some_ident  -> someIdent      |\n| `io.getquill.naming.MysqlEscape`    | some_ident  -> \\`some_ident\\` |\n| `io.getquill.naming.PostgresEscape` | $some_ident -> $some_ident    |\n\nMultiple transformations can be defined using mixin. For instance, the naming strategy\n\n```SnakeCase with UpperCase```\n\nproduces the following transformation:\n\n```someIdent -> SOME_IDENT```\n\nThe transformations are applied from left to right.\n\n#### Configuration\n\nThe string passed to the source configuration is used as the key to obtain configurations using the [typesafe config](http://github.com/typesafehub/config) library.\n\nAdditionally, any member of a source configuration can be overriden. Example:\n\n```\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\nimport io.getquill.sources.sql.idiom.MySQLDialect\n\nlazy val db = source(new JdbcSourceConfig[MySQLDialect, SnakeCase](\"db\") {\n  override def dataSource = ??? // create the datasource manually\n})\n```\n\n##### quill-jdbc\n\nQuill uses [HikariCP](https://github.com/brettwooldridge/HikariCP) for connection pooling. Please refer to HikariCP's [documentation](https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby) for a detailed explanation of the available configurations.\n\nNote that there are `dataSource` configurations, that go under `dataSource`, like `user` and `password`, but some pool settings may go under the root config, like `connectionTimeout`.\n\n**MySQL**\n\nsbt dependencies\n```\nlibraryDependencies ++= Seq(\n  \"mysql\" % \"mysql-connector-java\" % \"5.1.36\",\n  \"io.getquill\" %% \"quill-jdbc\" % \"0.7.1-SNAPSHOT\"\n)\n```\n\nsource definition\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\nimport io.getquill.sources.sql.idiom.MySQLDialect\n\nlazy val db = source(new JdbcSourceConfig[MySQLDialect, SnakeCase](\"db\"))\n```\n\napplication.properties\n```\ndb.dataSourceClassName=com.mysql.jdbc.jdbc2.optional.MysqlDataSource\ndb.dataSource.url=jdbc:mysql://host/database\ndb.dataSource.user=root\ndb.dataSource.password=root\ndb.dataSource.cachePrepStmts=true\ndb.dataSource.prepStmtCacheSize=250\ndb.dataSource.prepStmtCacheSqlLimit=2048\ndb.connectionTimeout=30000\n```\n\n**Postgres**\n\nsbt dependencies\n```\nlibraryDependencies ++= Seq(\n  \"org.postgresql\" % \"postgresql\" % \"9.4-1206-jdbc41\",\n  \"io.getquill\" %% \"quill-jdbc\" % \"0.7.1-SNAPSHOT\"\n)\n```\n\nsource definition\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\nimport io.getquill.sources.sql.idiom.PostgresDialect\n\nlazy val db = source(new JdbcSourceConfig[PostgresDialect, SnakeCase](\"db\"))\n```\n\napplication.properties\n```\ndb.dataSourceClassName=org.postgresql.ds.PGSimpleDataSource\ndb.dataSource.user=root\ndb.dataSource.password=root\ndb.dataSource.databaseName=database\ndb.dataSource.portNumber=5432\ndb.dataSource.serverName=host\ndb.connectionTimeout=30000\n```\n\n##### quill-async\n\n**MySQL Async**\n\nsbt dependencies\n```\nlibraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-async\" % \"0.7.1-SNAPSHOT\"\n)\n```\n\nsource definition\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\n\nlazy val db = source(new MysqlAsyncSourceConfig[SnakeCase](\"db\"))\n```\n\napplication.properties\n```\ndb.host=host\ndb.port=3306\ndb.user=root\ndb.password=root\ndb.database=database\ndb.poolMaxQueueSize=4\ndb.poolMaxObjects=4\ndb.poolMaxIdle=999999999\ndb.poolValidationInterval=100\n```\n\n**Postgres Async**\n\nsbt dependencies\n```\nlibraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-async\" % \"0.7.1-SNAPSHOT\"\n)\n```\n\nsource definition\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\n\nlazy val db = source(new PostgresAsyncSourceConfig[SnakeCase](\"db\"))\n```\n\napplication.properties\n```\ndb.host=host\ndb.port=5432\ndb.user=root\ndb.password=root\ndb.database=database\ndb.poolMaxQueueSize=4\ndb.poolMaxObjects=4\ndb.poolMaxIdle=999999999\ndb.poolValidationInterval=100\n```\n\n##### quill-finagle-mysql\n\nsbt dependencies\n```\nlibraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-finagle-mysql\" % \"0.7.1-SNAPSHOT\"\n)\n```\n\nsource definition\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\n\nlazy val db = source(new FinagleMysqlSourceConfig[SnakeCase](\"db\"))\n```\n\napplication.properties\n```\ndb.dest=localhost:3306\ndb.user=root\ndb.password=root\ndb.database=database\ndb.pool.watermark.low=0\ndb.pool.watermark.high=10\ndb.pool.idleTime=5 # seconds\ndb.pool.bufferSize=0\ndb.pool.maxWaiters=2147483647\n```\n\nCassandra Sources\n-----------------\n\nsbt dependencies\n```\nlibraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-cassandra\" % \"0.7.1-SNAPSHOT\"\n)\n```\n\n**synchronous source**\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\n\nlazy val db = source(new CassandraSyncSourceConfig[SnakeCase](\"db\"))\n```\n\n**asynchronous source**\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\n\nlazy val db = source(new CassandraAsyncSourceConfig[SnakeCase](\"db\"))\n```\n\n**stream source**\n```scala\nimport io.getquill._\nimport io.getquill.naming.SnakeCase\n\nlazy val db = source(new CassandraStreamSourceConfig[SnakeCase](\"db\"))\n```\n\nThe configurations are set using runtime reflection on the [`Cluster.builder`](https://docs.datastax.com/en/drivers/java/2.1/com/datastax/driver/core/Cluster.Builder.html) instance. It is possible to set nested structures like `queryOptions.consistencyLevel`, use enum values like `LOCAL_QUORUM`, and set multiple parameters like in `credentials`.\n\napplication.properties\n```\ndb.keyspace=quill_test\ndb.preparedStatementCacheSize=1000\ndb.session.contactPoint=127.0.0.1\ndb.session.queryOptions.consistencyLevel=LOCAL_QUORUM\ndb.session.withoutMetrics=true\ndb.session.withoutJMXReporting=false\ndb.session.credentials.0=root\ndb.session.credentials.1=pass\ndb.session.maxSchemaAgreementWaitSeconds=1\ndb.session.addressTranslater=com.datastax.driver.core.policies.IdentityTranslater\n```\n\nAdditional resources\n====================\n\nTemplates\n---------\n\nIn order to quickly start with Quill, we have setup some template projects:\n\n* [Play Framework with Quill JDBC](https://github.com/getquill/play-quill-jdbc)\n\nSlick comparison\n----------------\n\nPlease refer to [SLICK.md](https://github.com/getquill/quill/blob/master/SLICK.md) for a detailed comparison between Quill and Slick.\n\nCassandra libraries comparison\n------------------------------\n\nPlease refer to [CASSANDRA.md](https://github.com/getquill/quill/blob/master/CASSANDRA.md) for a detailed comparison between Quill and other main alternatives for interaction with Cassandra in Scala.\n\nCode of Conduct\n---------------\n\nPlease note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. See [CODE_OF_CONDUCT.md](https://github.com/getquill/quill/blob/master/CODE_OF_CONDUCT.md) for details.\n\nLicense\n-------\n\nSee the [LICENSE](https://github.com/getquill/quill/blob/master/LICENSE.txt) file for details.\n\nMaintainers\n===========\n\n- @fwbrasil\n- @godenji\n- @gustavoamigo\n- @jilen\n- @lvicentesanchez\n\nYou can notify all maintainers using the handle `@getquill/maintainers`.\n\nAcknowledgments\n===============\n\nThe project was created having Philip Wadler's talk [\"A practical theory of language-integrated query\"](http://www.infoq.com/presentations/theory-language-integrated-query) as its initial inspiration. The development was heavily influenced by the following papers:\n\n* [A Practical Theory of Language-Integrated Query](http://homepages.inf.ed.ac.uk/slindley/papers/practical-theory-of-linq.pdf)\n* [Everything old is new again: Quoted Domain Specific Languages](http://homepages.inf.ed.ac.uk/wadler/papers/qdsl/qdsl.pdf)\n* [The Flatter, the Better](http://db.inf.uni-tuebingen.de/staticfiles/publications/the-flatter-the-better.pdf)\n","slug":"quill/README","published":0,"date":"2018-02-18T08:12:37.445Z","updated":"2018-02-18T08:12:37.445Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpk20004mc55z2q6kmrj","content":"<p><img src=\"https://raw.githubusercontent.com/getquill/quill/master/quill.png\" alt=\"quill\"></p>\n<p>Compile-time Language Integrated Query for Scala</p>\n<p><a href=\"https://travis-ci.org/getquill/quill\" target=\"_blank\" rel=\"noopener\"><img src=\"https://travis-ci.org/getquill/quill.svg?branch=master\" alt=\"Build Status\"></a><br><a href=\"https://www.codacy.com/app/fwbrasil/quill\" target=\"_blank\" rel=\"noopener\"><img src=\"https://api.codacy.com/project/badge/grade/36ab84c7ff43480489df9b7312a4bdc1\" alt=\"Codacy Badge\"></a><br><a href=\"https://codecov.io/github/getquill/quill?branch=master\" target=\"_blank\" rel=\"noopener\"><img src=\"https://codecov.io/github/getquill/quill/coverage.svg?branch=master\" alt=\"codecov.io\"></a><br><a href=\"https://gitter.im/getquill/quill?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/gitter-join%20chat-green.svg\" alt=\"Join the chat at https://gitter.im/getquill/quill\"></a><br><a href=\"https://www.versioneye.com/user/projects/56ea4da64e714c0035e76353\" target=\"_blank\" rel=\"noopener\"><img src=\"https://www.versioneye.com/user/projects/56ea4da64e714c0035e76353/badge.svg?style=flat\" alt=\"Dependency Status\"></a></p>\n<p>Quill provides a Quoted Domain Specific Language (<a href=\"http://homepages.inf.ed.ac.uk/wadler/papers/qdsl/qdsl.pdf\" target=\"_blank\" rel=\"noopener\">QDSL</a>) to express queries in Scala and execute them in a target language. The library’s core is designed to support multiple target languages, currently featuring specializations for Structured Query Language (<a href=\"https://en.wikipedia.org/wiki/SQL\" target=\"_blank\" rel=\"noopener\">SQL</a>) and Cassandra Query Language (<a href=\"https://cassandra.apache.org/doc/cql3/CQL.html#selectStmt\" target=\"_blank\" rel=\"noopener\">CQL</a>).</p>\n<p><img src=\"https://raw.githubusercontent.com/getquill/quill/master/example.gif\" alt=\"example\"></p>\n<ol>\n<li><strong>Boilerplate-free mapping</strong>: The database schema is mapped using simple case classes.</li>\n<li><strong>Quoted DSL</strong>: Queries are defined inside a <code>quote</code> block. Quill parses each quoted block of code (quotation) at compile time and translates them to an internal Abstract Syntax Tree (AST)</li>\n<li><strong>Compile-time query generation</strong>: The <code>db.run</code> call reads the quotation’s AST and translates it to the target language at compile time, emitting the query string as a compilation message. As the query string is known at compile time, the runtime overhead is very low and similar to using the database driver directly.</li>\n<li><strong>Compile-time query validation</strong>: If configured, the query is verified against the database at compile time and the compilation fails if it is not valid. The query validation <strong>does not</strong> alter the database state.</li>\n</ol>\n<h1 id=\"Quotation\"><a href=\"#Quotation\" class=\"headerlink\" title=\"Quotation\"></a>Quotation</h1><h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>The QDSL allows the user to write plain Scala code, leveraging scala’s syntax and type system. Quotations are created using the <code>quote</code> method and can contain any excerpt of code that uses supported operations. To create quotations, first import <code>quote</code> and some other auxiliary methods:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br></pre></td></tr></table></figure>\n<p>A quotation can be a simple value:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> pi = quote(<span class=\"number\">3.14159</span>)</span><br></pre></td></tr></table></figure>\n<p>And be used within another quotation:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span>(<span class=\"params\">radius: <span class=\"type\">Float</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">areas</span> </span>= quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].map(c =&gt; pi * c.radius * c.radius)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Quotations can also contain high-order functions and inline values:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> area = quote &#123;</span><br><span class=\"line\">  (c: <span class=\"type\">Circle</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> r2 = c.radius * c.radius</span><br><span class=\"line\">    pi * r2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> areas = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].map(c =&gt; area(c))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Quotations can contain values defined outside of the quotation:<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> pi = <span class=\"number\">3.14159</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> areas = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].map(c =&gt; pi * c.radius * c.radius)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Quill’s normalization engine applies reduction steps before translating the quotation to the target language. The correspondent normalized quotation for both versions of the <code>areas</code> query is:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> areas = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].map(c =&gt; <span class=\"number\">3.14159</span> * c.radius * c.radius)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Scala doesn’t have support for high-order functions with type parameters. Quill supports anonymous classes with an apply method for this purpose:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> existsAny = quote &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>[<span class=\"type\">T</span>](xs: <span class=\"type\">Query</span>[<span class=\"type\">T</span>])(p: <span class=\"type\">T</span> =&gt; <span class=\"type\">Boolean</span>) =</span><br><span class=\"line\">    \txs.filter(p(_)).nonEmpty</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].filter &#123; c1 =&gt;</span><br><span class=\"line\">    existsAny(query[<span class=\"type\">Circle</span>])(c2 =&gt; c2.radius &gt; c1.radius)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mirror-sources\"><a href=\"#Mirror-sources\" class=\"headerlink\" title=\"Mirror sources\"></a>Mirror sources</h2><p>Sources represent the database and provide an execution interface for queries. Quill provides mirror sources for test purposes. Please refer to <a href=\"#sources\">sources</a> for information on how to create normal sources.</p>\n<p>Instead of running the query, mirror sources return a structure with the information that would be used to run the query. There are three mirror source configurations:</p>\n<ul>\n<li><code>io.getquill.MirrorSourceConfig</code>: Mirrors the quotation AST</li>\n<li><code>io.getquill.SqlMirrorSourceConfig</code>: Mirrors the SQL query</li>\n<li><code>io.getquill.CassandraMirrorSourceConfig</code>: Mirrors the CQL query</li>\n</ul>\n<p>This documentation uses the SQL mirror in its examples under the <code>db</code> name:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">SqlMirrorSourceConfig</span>(<span class=\"string\">\"testSource\"</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"Compile-time-quotations\"><a href=\"#Compile-time-quotations\" class=\"headerlink\" title=\"Compile-time quotations\"></a>Compile-time quotations</h2><p>Quotations are both compile-time and runtime values. Quill uses a type refinement to store the quotation’s AST as an annotation available at compile-time and the <code>q.ast</code> method exposes the AST as runtime value.</p>\n<p>It is important to avoid giving explicit types to quotations when possible. For instance, this quotation can’t be read at compile-time as the type refinement is lost:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Avoid type widening (Quoted[Query[Circle]]), or else the quotation will be dynamic.</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> q: <span class=\"type\">Quoted</span>[<span class=\"type\">Query</span>[<span class=\"type\">Circle</span>]] = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].filter(c =&gt; c.radius &gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q) <span class=\"comment\">// Dynamic query</span></span><br></pre></td></tr></table></figure>\n<p>Quill falls back to runtime normalization and query generation if the quotation’s AST can be read at compile-time. Please refer to <a href=\"#dynamic-queries\">dynamic queries</a> for more information</p>\n<h2 id=\"Bindings\"><a href=\"#Bindings\" class=\"headerlink\" title=\"Bindings\"></a>Bindings</h2><p>Quotations are designed to be self-contained, without references to runtime values outside their scope. There are two mechanisms to explicitly bind runtime values to a quotation execution.</p>\n<h4 id=\"Lifted-values\"><a href=\"#Lifted-values\" class=\"headerlink\" title=\"Lifted values\"></a>Lifted values</h4><p>A runtime value can be lifted to a quotation through the method <code>lift</code>:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">biggerThan</span></span>(i: <span class=\"type\">Float</span>) = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].filter(r =&gt; r.radius &gt; lift(i))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(biggerThan(<span class=\"number\">10</span>)) <span class=\"comment\">// SELECT r.radius FROM Circle r WHERE r.radius &gt; ?</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Parametrized-quotations\"><a href=\"#Parametrized-quotations\" class=\"headerlink\" title=\"Parametrized quotations\"></a>Parametrized quotations</h4><p>A quotation can be defined as a function:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> biggerThan = quote &#123;</span><br><span class=\"line\">  (i: <span class=\"type\">Int</span>) =&gt;</span><br><span class=\"line\">    query[<span class=\"type\">Circle</span>].filter(r =&gt; r.radius &gt; i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And a runtime value can be specified when running it:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.run(biggerThan)(<span class=\"number\">10</span>) <span class=\"comment\">// SELECT r.radius FROM Circle r WHERE r.radius &gt; ?</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Schema\"><a href=\"#Schema\" class=\"headerlink\" title=\"Schema\"></a>Schema</h2><p>The database schema is represented by case classes. By default, quill uses the class and field names as the database identifiers:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span>(<span class=\"params\">radius: <span class=\"type\">Float</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">q</span> </span>= quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].filter(c =&gt; c.radius &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q) <span class=\"comment\">// SELECT c.radius FROM Circle c WHERE c.radius &gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>Alternatively, the identifiers can be customized:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> circles = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].schema(_.entity(<span class=\"string\">\"circle_table\"</span>).columns(_.radius -&gt; <span class=\"string\">\"radius_column\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  circles.filter(c =&gt; c.radius &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT c.radius_column FROM circle_table c WHERE c.radius_column &gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>If multiple tables require custom identifiers, it is good practice to define a <code>schema</code> object with all table queries to be reused across multiple queries:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span>(<span class=\"params\">radius: <span class=\"type\">Int</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">case</span> <span class=\"title\">class</span> <span class=\"title\">Rectangle</span>(<span class=\"params\">length: <span class=\"type\">Int</span>, width: <span class=\"type\">Int</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">object</span> <span class=\"title\">schema</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> circles = quote &#123;</span><br><span class=\"line\">    query[<span class=\"type\">Circle</span>].schema(</span><br><span class=\"line\">        _.entity(<span class=\"string\">\"circle_table\"</span>)</span><br><span class=\"line\">        .columns(_.radius -&gt; <span class=\"string\">\"radius_column\"</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> rectangles = quote &#123;</span><br><span class=\"line\">    query[<span class=\"type\">Rectangle</span>].schema(</span><br><span class=\"line\">        _.entity(<span class=\"string\">\"rectangle_table\"</span>)</span><br><span class=\"line\">        .columns(</span><br><span class=\"line\">          _.length -&gt; <span class=\"string\">\"length_column\"</span>,</span><br><span class=\"line\">          _.width -&gt; <span class=\"string\">\"width_column\"</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It is possible to define a column that is a key generated by the database. It will be ignored during insertions and returned as the result.<br>Note that it accepts only values that can be read as <code>Long</code>.<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span>(<span class=\"params\">id: <span class=\"type\">Long</span>, description: <span class=\"type\">String</span>, sku: <span class=\"type\">Long</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">q</span> </span>= quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Product</span>].schema(_.generated(_.id)).insert</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Product (description,sku) VALUES (?, ?)</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Queries\"><a href=\"#Queries\" class=\"headerlink\" title=\"Queries\"></a>Queries</h2><p>The overall abstraction of quill queries is use database tables as if they were in-memory collections. Scala for-comprehensions provide syntatic sugar to deal with this kind of monadic operations:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">id: <span class=\"type\">Int</span>, name: <span class=\"type\">String</span>, age: <span class=\"type\">Int</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">case</span> <span class=\"title\">class</span> <span class=\"title\">Contact</span>(<span class=\"params\">personId: <span class=\"type\">Int</span>, phone: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">q</span> </span>= quote &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    p &lt;- query[<span class=\"type\">Person</span>] <span class=\"keyword\">if</span>(p.id == <span class=\"number\">999</span>)</span><br><span class=\"line\">    c &lt;- query[<span class=\"type\">Contact</span>] <span class=\"keyword\">if</span>(c.personId == p.id)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">yield</span> &#123;</span><br><span class=\"line\">    (p.name, c.phone)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.name, c.phone FROM Person p, Contact c WHERE (p.id = 999) AND (c.personId = p.id)</span></span><br></pre></td></tr></table></figure>\n<p>Quill normalizes the quotation and translates the monadic joins to applicative joins, generating a database-friendly query that avoids nested queries.</p>\n<p>Any of the following features can be used together with the others and/or within a for-comprehension:</p>\n<p><strong>filter</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">18</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p WHERE p.age &gt; 18</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>map</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].map(p =&gt; p.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.name FROM Person p</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>flatMap</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">18</span>).flatMap(p =&gt; query[<span class=\"type\">Contact</span>].filter(c =&gt; c.personId == p.id))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT c.personId, c.phone FROM Person p, Contact c WHERE (p.age &gt; 18) AND (c.personId = p.id)</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>sortBy</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q1 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].sortBy(p =&gt; p.age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q1)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p ORDER BY p.age ASC NULLS FIRST</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q2 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].sortBy(p =&gt; p.age)(<span class=\"type\">Ord</span>.descNullsLast)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q2)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p ORDER BY p.age DESC NULLS LAST</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q3 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].sortBy(p =&gt; (p.name, p.age))(<span class=\"type\">Ord</span>(<span class=\"type\">Ord</span>.asc, <span class=\"type\">Ord</span>.desc))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q3)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p ORDER BY p.name ASC, p.age DESC</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>drop/take</strong></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].drop(<span class=\"number\">2</span>).take(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT x.id, x.name, x.age FROM Person x LIMIT 1 OFFSET 2</span></span><br></pre></td></tr></table></figure>\n<p><strong>groupBy</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].groupBy(p =&gt; p.age).map &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> (age, people) =&gt;</span><br><span class=\"line\">      (age, people.size)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.age, COUNT(*) FROM Person p GROUP BY p.age</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>union</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">18</span>).union(query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">60</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age &gt; 18</span></span><br><span class=\"line\"><span class=\"comment\">// UNION SELECT id, name, age FROM Person p1 WHERE p1.age &gt; 60) x</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>unionAll/++</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">18</span>).unionAll(query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">60</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age &gt; 18</span></span><br><span class=\"line\"><span class=\"comment\">// UNION ALL SELECT id, name, age FROM Person p1 WHERE p1.age &gt; 60) x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q2 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">18</span>) ++ query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">60</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q2)</span><br><span class=\"line\"><span class=\"comment\">// SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age &gt; 18</span></span><br><span class=\"line\"><span class=\"comment\">// UNION ALL SELECT id, name, age FROM Person p1 WHERE p1.age &gt; 60) x</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>aggregation</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> r = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].map(p =&gt; p.age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(r.min) <span class=\"comment\">// SELECT MIN(p.age) FROM Person p</span></span><br><span class=\"line\">db.run(r.max) <span class=\"comment\">// SELECT MAX(p.age) FROM Person p</span></span><br><span class=\"line\">db.run(r.avg) <span class=\"comment\">// SELECT AVG(p.age) FROM Person p</span></span><br><span class=\"line\">db.run(r.sum) <span class=\"comment\">// SELECT SUM(p.age) FROM Person p</span></span><br><span class=\"line\">db.run(r.size) <span class=\"comment\">// SELECT COUNT(p.age) FROM Person p</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>isEmpty/nonEmpty</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter&#123; p1 =&gt;</span><br><span class=\"line\">    query[<span class=\"type\">Person</span>].filter(p2 =&gt; p2.id != p1.id &amp;&amp; p2.age == p1.age).isEmpty</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p1.id, p1.name, p1.age FROM Person p1 WHERE</span></span><br><span class=\"line\"><span class=\"comment\">// NOT EXISTS (SELECT * FROM Person p2 WHERE (p2.id &lt;&gt; p1.id) AND (p2.age = p1.age))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q2 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter&#123; p1 =&gt;</span><br><span class=\"line\">    query[<span class=\"type\">Person</span>].filter(p2 =&gt; p2.id != p1.id &amp;&amp; p2.age == p1.age).nonEmpty</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q2)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p1.id, p1.name, p1.age FROM Person p1 WHERE</span></span><br><span class=\"line\"><span class=\"comment\">// EXISTS (SELECT * FROM Person p2 WHERE (p2.id &lt;&gt; p1.id) AND (p2.age = p1.age))</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>contains</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; <span class=\"type\">Set</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>).contains(p.id))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (1, 2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q1 = quote &#123; (ids: <span class=\"type\">Set</span>[<span class=\"type\">Int</span>]) =&gt;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; ids.contains(p.id))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q1)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (?)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> peopleWithContacts = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; query[<span class=\"type\">Contact</span>].filter(c =&gt; c.personId == p.id).nonEmpty)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">val</span> q2 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; peopleWithContacts.contains(p.id))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q2)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (SELECT p1.* FROM Person p1 WHERE EXISTS (SELECT c.* FROM Contact c WHERE c.personId = p1.id))</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>distinct</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].map(p =&gt; p.age).distinct</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT DISTINCT p.age FROM Person p</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>joins</strong></p>\n<p>In addition to applicative joins Quill also supports explicit joins (both inner and left/right/full outer joins).</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].join(query[<span class=\"type\">Contact</span>]).on((p, c) =&gt; c.personId == p.id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age, c.personId, c.phone•</span></span><br><span class=\"line\"><span class=\"comment\">// FROM Person p INNER JOIN Contact c ON c.personId = p.id</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].leftJoin(query[<span class=\"type\">Contact</span>]).on((p, c) =&gt; c.personId == p.id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age, c.personId, c.phone•</span></span><br><span class=\"line\"><span class=\"comment\">// FROM Person p LEFT JOIN Contact c ON c.personId = p.id</span></span><br></pre></td></tr></table></figure>\n<p>The example joins above cover the simple case. What do you do when a query requires joining more than 2 tables?</p>\n<p>With Quill the following multi-join queries are equivalent, choose according to preference:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employer</span>(<span class=\"params\">id: <span class=\"type\">Int</span>, personId: <span class=\"type\">Int</span>, name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">qFlat</span> </span>= quote &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">    (p,e) &lt;- query[<span class=\"type\">Person</span>].join(query[<span class=\"type\">Employer</span>]).on(_.id == _.personId)</span><br><span class=\"line\">       c  &lt;- query[<span class=\"type\">Contact</span>].leftJoin(_.personId == p.id)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">yield</span>(p, e, c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> qNested = quote &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">    ((p,e),c) &lt;-</span><br><span class=\"line\">      query[<span class=\"type\">Person</span>].join(query[<span class=\"type\">Employer</span>]).on(_.id == _.personId)</span><br><span class=\"line\">      .leftJoin(query[<span class=\"type\">Contact</span>]).on(</span><br><span class=\"line\">        _._1.id == _.personId</span><br><span class=\"line\">      )</span><br><span class=\"line\">  &#125; <span class=\"keyword\">yield</span>(p, e, c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(qFlat)</span><br><span class=\"line\">db.run(qNested)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age, e.id, e.personId, e.name, c.id, c.phone•</span></span><br><span class=\"line\"><span class=\"comment\">// FROM Person p INNER JOIN Employer e ON p.id = e.personId LEFT JOIN Contact c ON c.personId = p.id</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Query-probing\"><a href=\"#Query-probing\" class=\"headerlink\" title=\"Query probing\"></a>Query probing</h4><p>Query probing is an experimental feature that validates queries against the database at compile time, failing the compilation if it is not valid. The query validation does not alter the database state.</p>\n<p>This feature is disabled by default. To enable it, mix the <code>QueryProbing</code> trait to the database configuration:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lazy val db = source(new MySourceConfig(&quot;configKey&quot;) with QueryProbing)</span><br></pre></td></tr></table></figure>\n<p>The config configuration must be self-contained, not having references to variables outside its scope. This allows the macro load the source instance at compile-time.</p>\n<p>The configurations correspondent to the config key must be available at compile time. You can achieve it by adding this line to your project settings:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unmanagedClasspath in Compile += baseDirectory.value / &quot;src&quot; / &quot;main&quot; / &quot;resources&quot;</span><br></pre></td></tr></table></figure>\n<p>If your project doesn’t have a standard layout, e.g. a play project, you should configure the path to point to the folder that contains your config file.</p>\n<h2 id=\"Actions\"><a href=\"#Actions\" class=\"headerlink\" title=\"Actions\"></a>Actions</h2><p>Database actions are defined using quotations as well. These actions don’t have a collection-like API but rather a custom DSL to express inserts, deletes and updates.</p>\n<p>  Note: Actions take either a List (in which case the query is batched) or a single value.</p>\n<p><strong>insert</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = quote(query[<span class=\"type\">Contact</span>].insert)</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)(<span class=\"type\">List</span>(<span class=\"type\">Contact</span>(<span class=\"number\">999</span>, <span class=\"string\">\"+1510488988\"</span>)))</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Contact (personId,phone) VALUES (?, ?)</span></span><br><span class=\"line\">db.run(a)(<span class=\"type\">Contact</span>(<span class=\"number\">999</span>, <span class=\"string\">\"+1510488988\"</span>))</span><br><span class=\"line\"><span class=\"comment\">// insert single item</span></span><br></pre></td></tr></table></figure></p>\n<p>It is also possible to insert specific columns:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  (personId: <span class=\"type\">Int</span>, phone: <span class=\"type\">String</span>) =&gt;</span><br><span class=\"line\">    query[<span class=\"type\">Contact</span>].insert(_.personId -&gt; personId, _.phone -&gt; phone)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)(<span class=\"type\">List</span>((<span class=\"number\">999</span>, <span class=\"string\">\"+1510488988\"</span>)))</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Contact (personId,phone) VALUES (?, ?)</span></span><br></pre></td></tr></table></figure>\n<p>Or column queries:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  (id: <span class=\"type\">Int</span>) =&gt;</span><br><span class=\"line\">    query[<span class=\"type\">Person</span>].insert(_.id -&gt; id, _.age -&gt; query[<span class=\"type\">Person</span>].map(p =&gt; p.age).max)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)(<span class=\"type\">List</span>(<span class=\"number\">999</span>))</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Person (id,age) VALUES (?, (SELECT MAX(p.age) FROM Person p))</span></span><br></pre></td></tr></table></figure>\n<p><strong>update</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(_.id == <span class=\"number\">999</span>).update</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)(<span class=\"type\">List</span>(<span class=\"type\">Person</span>(<span class=\"number\">999</span>, <span class=\"string\">\"John\"</span>, <span class=\"number\">22</span>)))</span><br><span class=\"line\"><span class=\"comment\">// UPDATE Person SET id = ?, name = ?, age = ? WHERE id = 999</span></span><br><span class=\"line\">db.run(a)(<span class=\"type\">Person</span>(<span class=\"number\">999</span>, <span class=\"string\">\"John\"</span>, <span class=\"number\">22</span>))</span><br><span class=\"line\"><span class=\"comment\">// update single item</span></span><br></pre></td></tr></table></figure></p>\n<p>Using specific columns:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  (id: <span class=\"type\">Int</span>, age: <span class=\"type\">Int</span>) =&gt;</span><br><span class=\"line\">    query[<span class=\"type\">Person</span>].filter(p =&gt; p.id == id).update(_.age -&gt; age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)(<span class=\"type\">List</span>((<span class=\"number\">999</span>, <span class=\"number\">18</span>)))</span><br><span class=\"line\"><span class=\"comment\">// UPDATE Person SET age = ? WHERE id = ?</span></span><br></pre></td></tr></table></figure>\n<p>Using columns as part of the update:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  (id: <span class=\"type\">Int</span>) =&gt;</span><br><span class=\"line\">    query[<span class=\"type\">Person</span>].filter(p =&gt; p.id == id).update(p =&gt; p.age -&gt; (p.age + <span class=\"number\">1</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)(<span class=\"type\">List</span>(<span class=\"number\">999</span>))</span><br><span class=\"line\"><span class=\"comment\">// UPDATE Person SET age = (age + 1) WHERE id = ?</span></span><br></pre></td></tr></table></figure>\n<p>Using column a query:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  (id: <span class=\"type\">Int</span>) =&gt;</span><br><span class=\"line\">    query[<span class=\"type\">Person</span>].filter(p =&gt; p.id == id).update(_.age -&gt; query[<span class=\"type\">Person</span>].map(p =&gt; p.age).max)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)(<span class=\"type\">List</span>(<span class=\"number\">999</span>))</span><br><span class=\"line\"><span class=\"comment\">// UPDATE Person SET age = (SELECT MAX(p.age) FROM Person p) WHERE id = ?</span></span><br></pre></td></tr></table></figure>\n<p><strong>delete</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.name == <span class=\"string\">\"\"</span>).delete</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)</span><br><span class=\"line\"><span class=\"comment\">// DELETE FROM Person WHERE name = ''</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Implicit-query\"><a href=\"#Implicit-query\" class=\"headerlink\" title=\"Implicit query\"></a>Implicit query</h2><p>Quill provides implicit conversions from case class companion objects to <code>query[T]</code> through an extra import:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.<span class=\"type\">ImplicitQuery</span>._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    p &lt;- <span class=\"type\">Person</span> <span class=\"keyword\">if</span>(p.id == <span class=\"number\">999</span>)</span><br><span class=\"line\">    c &lt;- <span class=\"type\">Contact</span> <span class=\"keyword\">if</span>(c.personId == p.id)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">yield</span> &#123;</span><br><span class=\"line\">    (p.name, c.phone)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.name, c.phone FROM Person p, Contact c WHERE (p.id = 999) AND (c.personId = p.id)</span></span><br></pre></td></tr></table></figure>\n<p>Note the usage of <code>Person</code> and <code>Contact</code> instead of <code>query[Person]</code> and <code>query[Contact]</code>.</p>\n<h2 id=\"SQL-specific-operations\"><a href=\"#SQL-specific-operations\" class=\"headerlink\" title=\"SQL-specific operations\"></a>SQL-specific operations</h2><p>Some operations are sql-specific and not provided with the generic quotation mechanism. The <code>io.getquill.sources.sql.ops</code> package has some implicit classes for this kind of operations:</p>\n<p><strong>like</strong></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.sources.sql.ops._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.name like <span class=\"string\">\"%John%\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p WHERE p.name like '%John%'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Cassandra-specific-operations\"><a href=\"#Cassandra-specific-operations\" class=\"headerlink\" title=\"Cassandra-specific operations\"></a>Cassandra-specific operations</h2><p>The cql-specific operations are provided by the following import:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.sources.cassandra.ops._</span><br></pre></td></tr></table></figure>\n<p>The cassandra package also offers a mirror source:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">CassandraMirrorSourceConfig</span>(<span class=\"string\">\"testSource\"</span>))</span><br></pre></td></tr></table></figure>\n<p>Supported operations:</p>\n<p><strong>allowFiltering</strong></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">10</span>).allowFiltering</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT id, name, age FROM Person WHERE age &gt; 10 ALLOW FILTERING</span></span><br></pre></td></tr></table></figure>\n<p><strong>ifNotExists</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].insert(_.age -&gt; <span class=\"number\">10</span>, _.name -&gt; <span class=\"string\">\"John\"</span>).ifNotExists</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Person (age,name) VALUES (10, 'John') IF NOT EXISTS</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>ifExists</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.name == <span class=\"string\">\"John\"</span>).delete.ifExists</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// DELETE FROM Person WHERE name = 'John' IF EXISTS</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>usingTimestamp</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q1 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].insert(_.age -&gt; <span class=\"number\">10</span>, _.name -&gt; <span class=\"string\">\"John\"</span>).usingTimestamp(<span class=\"number\">99</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q1)</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Person (age,name) VALUES (10, 'John') USING TIMESTAMP 99</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q2 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].usingTimestamp(<span class=\"number\">99</span>).update(_.age -&gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q2)</span><br><span class=\"line\"><span class=\"comment\">// UPDATE Person USING TIMESTAMP 99 SET age = 10</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>usingTtl</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q1 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].insert(_.age -&gt; <span class=\"number\">10</span>, _.name -&gt; <span class=\"string\">\"John\"</span>).usingTtl(<span class=\"number\">11</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q1)</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Person (age,name) VALUES (10, 'John') USING TTL 11</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q2 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].usingTtl(<span class=\"number\">11</span>).update(_.age -&gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q2)</span><br><span class=\"line\"><span class=\"comment\">// UPDATE Person USING TTL 11 SET age = 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q3 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].usingTtl(<span class=\"number\">11</span>).filter(_.name == <span class=\"string\">\"John\"</span>).delete</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q3)  </span><br><span class=\"line\"><span class=\"comment\">// DELETE FROM Person USING TTL 11 WHERE name = 'John'</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>using</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q1 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].insert(_.age -&gt; <span class=\"number\">10</span>, _.name -&gt; <span class=\"string\">\"John\"</span>).using(ts = <span class=\"number\">99</span>, ttl = <span class=\"number\">11</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q1)</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Person (age,name) VALUES (10, 'John') USING TIMESTAMP 99 AND TTL 11</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q2 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].using(ts = <span class=\"number\">99</span>, ttl = <span class=\"number\">11</span>).update(_.age -&gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q2)</span><br><span class=\"line\"><span class=\"comment\">// UPDATE Person USING TIMESTAMP 99 AND TTL 11 SET age = 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q3 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].using(ts = <span class=\"number\">99</span>, ttl = <span class=\"number\">11</span>).filter(_.name == <span class=\"string\">\"John\"</span>).delete</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q3)</span><br><span class=\"line\"><span class=\"comment\">// DELETE FROM Person USING TIMESTAMP 99 AND TTL 11 WHERE name = 'John'</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>ifCond</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q1 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].update(_.age -&gt; <span class=\"number\">10</span>).ifCond(_.name == <span class=\"string\">\"John\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q1)</span><br><span class=\"line\"><span class=\"comment\">// UPDATE Person SET age = 10 IF name = 'John'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q2 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(_.name == <span class=\"string\">\"John\"</span>).delete.ifCond(_.age == <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q2)</span><br><span class=\"line\"><span class=\"comment\">// DELETE FROM Person WHERE name = 'John' IF age = 10</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>delete column</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].map(p =&gt; p.age).delete</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// DELETE p.age FROM Person</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Dynamic-queries\"><a href=\"#Dynamic-queries\" class=\"headerlink\" title=\"Dynamic queries\"></a>Dynamic queries</h2><p>Quill’s default operation mode is compile-time, but there are queries that have their structure defined only at runtime. Quill automatically falls back to runtime normalization and query generation if the query’s structure is not static. Example:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">SqlMirrorSourceConfig</span>(<span class=\"string\">\"testSource\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">QueryType</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">case</span> <span class=\"title\">object</span> <span class=\"title\">Minor</span> <span class=\"keyword\">extends</span> <span class=\"title\">QueryType</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">case</span> <span class=\"title\">object</span> <span class=\"title\">Senior</span> <span class=\"keyword\">extends</span> <span class=\"title\">QueryType</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">def</span> <span class=\"title\">people</span>(<span class=\"params\">t: <span class=\"type\">QueryType</span></span>)</span>: <span class=\"type\">Quoted</span>[<span class=\"type\">Query</span>[<span class=\"type\">Person</span>]] =</span><br><span class=\"line\">  t <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Minor</span> =&gt; quote &#123;</span><br><span class=\"line\">      query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &lt; <span class=\"number\">18</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Senior</span> =&gt; quote &#123;</span><br><span class=\"line\">      query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">65</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(people(<span class=\"type\">Minor</span>))</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p WHERE p.age &lt; 18</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.run(people(<span class=\"type\">Senior</span>))</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p WHERE p.age &gt; 65</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Extending-quill\"><a href=\"#Extending-quill\" class=\"headerlink\" title=\"Extending quill\"></a>Extending quill</h1><h2 id=\"Infix\"><a href=\"#Infix\" class=\"headerlink\" title=\"Infix\"></a>Infix</h2><p>Infix is a very flexible mechanism to use non-supported features without having to use plain queries in the target language. It allows insertion of arbitrary strings within quotations.</p>\n<p>For instance, quill doesn’t support the <code>FOR UPDATE</code> SQL feature. It can still be used through infix and implicit classes:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">implicit</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForUpdate</span>[<span class=\"type\">T</span>](<span class=\"params\">q: <span class=\"type\">Query</span>[<span class=\"type\">T</span>]</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forUpdate</span> </span>= quote(<span class=\"string\">infix\"<span class=\"subst\">$q</span> FOR UPDATE\"</span>.as[<span class=\"type\">Query</span>[<span class=\"type\">T</span>]])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &lt; <span class=\"number\">18</span>).forUpdate</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM (SELECT * FROM Person p WHERE p.age &lt; 18 FOR UPDATE) p</span></span><br></pre></td></tr></table></figure>\n<p>The <code>forUpdate</code> quotation can be reused for multiple queries.</p>\n<p>The same approach can be used for <code>RETURNING ID</code>:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">implicit</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReturningId</span>[<span class=\"type\">T</span>](<span class=\"params\">a: <span class=\"type\">Action</span>[<span class=\"type\">T</span>]</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">returningId</span> </span>= quote(<span class=\"string\">infix\"<span class=\"subst\">$a</span> RETURNING ID\"</span>.as[<span class=\"type\">Action</span>[<span class=\"type\">T</span>]])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].insert(_.name -&gt; <span class=\"string\">\"John\"</span>, _.age -&gt; <span class=\"number\">21</span>).returningId</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Person (name,age) VALUES ('John', 21) RETURNING ID</span></span><br></pre></td></tr></table></figure>\n<p>A custom database function can also be used through infix:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> myFunction = quote &#123;</span><br><span class=\"line\">  (i: <span class=\"type\">Int</span>) =&gt; <span class=\"string\">infix\"MY_FUNCTION(<span class=\"subst\">$i</span>)\"</span>.as[<span class=\"type\">Int</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].map(p =&gt; myFunction(p.age))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT MY_FUNCTION(p.age) FROM Person p</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Custom-encoding\"><a href=\"#Custom-encoding\" class=\"headerlink\" title=\"Custom encoding\"></a>Custom encoding</h2><p>Quill uses <code>Encoder</code>s to encode query inputs and <code>Decoder</code>s to read values returned by queries. The library provides a few built-in encodings and two mechanisms to define custom encodings: mapped encoding and raw encoding.</p>\n<h2 id=\"Mapped-Encoding\"><a href=\"#Mapped-Encoding\" class=\"headerlink\" title=\"Mapped Encoding\"></a>Mapped Encoding</h2><p>If the correspondent database type is already supported, use <code>mappedEncoding</code>. In this example, <code>String</code> is already supported by Quill and the <code>UUID</code> encoding from/to <code>String</code> is defined through mapped encoding:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"type\">UUID</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">implicit</span> <span class=\"keyword\">val</span> encodeUUID = mappedEncoding[<span class=\"type\">UUID</span>, <span class=\"type\">String</span>](_.toString)</span><br><span class=\"line\"><span class=\"keyword\">implicit</span> <span class=\"keyword\">val</span> decodeUUID = mappedEncoding[<span class=\"type\">String</span>, <span class=\"type\">UUID</span>](<span class=\"type\">UUID</span>.fromString(_))</span><br></pre></td></tr></table></figure>\n<h2 id=\"Raw-Encoding\"><a href=\"#Raw-Encoding\" class=\"headerlink\" title=\"Raw Encoding\"></a>Raw Encoding</h2><p>If the database type is not supported by Quill, it is possible to provide “raw” encoders and decoders:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">Literal</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.sources.jdbc.<span class=\"type\">JdbcSource</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.sources.sql.idiom.<span class=\"type\">PostgresDialect</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">UUIDEncodingExample</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> jdbcSource: <span class=\"type\">JdbcSource</span>[<span class=\"type\">PostgresDialect</span>, <span class=\"type\">Literal</span>] <span class=\"comment\">// your source should go here</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">import</span> jdbcSource._</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">implicit</span> <span class=\"keyword\">val</span> uuidDecoder: <span class=\"type\">Decoder</span>[<span class=\"type\">UUID</span>] =</span><br><span class=\"line\">    decoder[<span class=\"type\">UUID</span>] &#123;</span><br><span class=\"line\">      row =&gt; index =&gt;</span><br><span class=\"line\">        <span class=\"type\">UUID</span>.fromString(row.getObject(index).toString) <span class=\"comment\">// database-specific implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">implicit</span> <span class=\"keyword\">val</span> uuidEncoder: <span class=\"type\">Encoder</span>[<span class=\"type\">UUID</span>] =</span><br><span class=\"line\">    encoder[<span class=\"type\">UUID</span>] &#123;</span><br><span class=\"line\">      row =&gt; (idx, uuid) =&gt;</span><br><span class=\"line\">        row.setObject(idx, uuid, java.sql.<span class=\"type\">Types</span>.<span class=\"type\">OTHER</span>) <span class=\"comment\">// database-specific implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Wrapped-types\"><a href=\"#Wrapped-types\" class=\"headerlink\" title=\"Wrapped types\"></a>Wrapped types</h2><p>Quill also supports encoding of “wrapped types”. Just extend the <code>WrappedValue</code> trait and Quill will automatically encode the underlying primitive type.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.sources._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserId</span>(<span class=\"params\">value: <span class=\"type\">Int</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">AnyVal</span> <span class=\"keyword\">with</span> <span class=\"title\">WrappedValue</span>[<span class=\"type\">Int</span>]</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">case</span> <span class=\"title\">class</span> <span class=\"title\">User</span>(<span class=\"params\">id: <span class=\"type\">UserId</span>, name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">q</span> </span>= quote &#123;</span><br><span class=\"line\">  (id: <span class=\"type\">UserId</span>) =&gt; <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    u &lt;- query[<span class=\"type\">User</span>] <span class=\"keyword\">if</span> u.id == id</span><br><span class=\"line\">  &#125; <span class=\"keyword\">yield</span> u</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q)(<span class=\"type\">UserId</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SELECT u.id, u.name FROM User u WHERE (u.id = 1)</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Sources\"><a href=\"#Sources\" class=\"headerlink\" title=\"Sources\"></a>Sources</h1><h2 id=\"SQL-Sources\"><a href=\"#SQL-Sources\" class=\"headerlink\" title=\"SQL Sources\"></a>SQL Sources</h2><p>Sources represent the database and provide an execution interface for queries. Example:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.sources.sql.idiom.<span class=\"type\">MySQLDialect</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">JdbcSourceConfig</span>[<span class=\"type\">MySQLDialect</span>, <span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure>\n<h4 id=\"Dialect\"><a href=\"#Dialect\" class=\"headerlink\" title=\"Dialect\"></a>Dialect</h4><p>The SQL dialect to be used by the source is defined by the first type parameter. Some source types are specific to a database and thus not require it.</p>\n<p>Quill has three built-in dialects:</p>\n<ul>\n<li><code>io.getquill.sources.sql.idiom.H2Dialect</code></li>\n<li><code>io.getquill.sources.sql.idiom.MySQLDialect</code></li>\n<li><code>io.getquill.sources.sql.idiom.PostgresDialect</code></li>\n</ul>\n<h4 id=\"Naming-strategy\"><a href=\"#Naming-strategy\" class=\"headerlink\" title=\"Naming strategy\"></a>Naming strategy</h4><p>The second type parameter defines the naming strategy to be used when translating identifiers (table and column names) to SQL.</p>\n<table>\n<thead>\n<tr>\n<th>strategy</th>\n<th>example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>io.getquill.naming.Literal</code></td>\n<td>some_ident  -&gt; some_ident</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.Escape</code></td>\n<td>some_ident  -&gt; “some_ident”</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.UpperCase</code></td>\n<td>some_ident  -&gt; SOME_IDENT</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.LowerCase</code></td>\n<td>SOME_IDENT  -&gt; some_ident</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.SnakeCase</code></td>\n<td>someIdent   -&gt; some_ident</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.CamelCase</code></td>\n<td>some_ident  -&gt; someIdent</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.MysqlEscape</code></td>\n<td>some_ident  -&gt; `some_ident`</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.PostgresEscape</code></td>\n<td>$some_ident -&gt; $some_ident</td>\n</tr>\n</tbody>\n</table>\n<p>Multiple transformations can be defined using mixin. For instance, the naming strategy</p>\n<figure class=\"highlight plain\"><figcaption><span>with UpperCase```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">produces the following transformation:</span><br><span class=\"line\"></span><br><span class=\"line\">```someIdent -&gt; SOME_IDENT</span><br></pre></td></tr></table></figure>\n<p>The transformations are applied from left to right.</p>\n<h4 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h4><p>The string passed to the source configuration is used as the key to obtain configurations using the <a href=\"http://github.com/typesafehub/config\" target=\"_blank\" rel=\"noopener\">typesafe config</a> library.</p>\n<p>Additionally, any member of a source configuration can be overriden. Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import io.getquill._</span><br><span class=\"line\">import io.getquill.naming.SnakeCase</span><br><span class=\"line\">import io.getquill.sources.sql.idiom.MySQLDialect</span><br><span class=\"line\"></span><br><span class=\"line\">lazy val db = source(new JdbcSourceConfig[MySQLDialect, SnakeCase](&quot;db&quot;) &#123;</span><br><span class=\"line\">  override def dataSource = ??? // create the datasource manually</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"quill-jdbc\"><a href=\"#quill-jdbc\" class=\"headerlink\" title=\"quill-jdbc\"></a>quill-jdbc</h5><p>Quill uses <a href=\"https://github.com/brettwooldridge/HikariCP\" target=\"_blank\" rel=\"noopener\">HikariCP</a> for connection pooling. Please refer to HikariCP’s <a href=\"https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby\" target=\"_blank\" rel=\"noopener\">documentation</a> for a detailed explanation of the available configurations.</p>\n<p>Note that there are <code>dataSource</code> configurations, that go under <code>dataSource</code>, like <code>user</code> and <code>password</code>, but some pool settings may go under the root config, like <code>connectionTimeout</code>.</p>\n<p><strong>MySQL</strong></p>\n<p>sbt dependencies<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libraryDependencies ++= Seq(</span><br><span class=\"line\">  &quot;mysql&quot; % &quot;mysql-connector-java&quot; % &quot;5.1.36&quot;,</span><br><span class=\"line\">  &quot;io.getquill&quot; %% &quot;quill-jdbc&quot; % &quot;0.7.1-SNAPSHOT&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>source definition<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.sources.sql.idiom.<span class=\"type\">MySQLDialect</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">JdbcSourceConfig</span>[<span class=\"type\">MySQLDialect</span>, <span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p>application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.dataSourceClassName=com.mysql.jdbc.jdbc2.optional.MysqlDataSource</span><br><span class=\"line\">db.dataSource.url=jdbc:mysql://host/database</span><br><span class=\"line\">db.dataSource.user=root</span><br><span class=\"line\">db.dataSource.password=root</span><br><span class=\"line\">db.dataSource.cachePrepStmts=true</span><br><span class=\"line\">db.dataSource.prepStmtCacheSize=250</span><br><span class=\"line\">db.dataSource.prepStmtCacheSqlLimit=2048</span><br><span class=\"line\">db.connectionTimeout=30000</span><br></pre></td></tr></table></figure></p>\n<p><strong>Postgres</strong></p>\n<p>sbt dependencies<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libraryDependencies ++= Seq(</span><br><span class=\"line\">  &quot;org.postgresql&quot; % &quot;postgresql&quot; % &quot;9.4-1206-jdbc41&quot;,</span><br><span class=\"line\">  &quot;io.getquill&quot; %% &quot;quill-jdbc&quot; % &quot;0.7.1-SNAPSHOT&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>source definition<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.sources.sql.idiom.<span class=\"type\">PostgresDialect</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">JdbcSourceConfig</span>[<span class=\"type\">PostgresDialect</span>, <span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p>application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.dataSourceClassName=org.postgresql.ds.PGSimpleDataSource</span><br><span class=\"line\">db.dataSource.user=root</span><br><span class=\"line\">db.dataSource.password=root</span><br><span class=\"line\">db.dataSource.databaseName=database</span><br><span class=\"line\">db.dataSource.portNumber=5432</span><br><span class=\"line\">db.dataSource.serverName=host</span><br><span class=\"line\">db.connectionTimeout=30000</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"quill-async\"><a href=\"#quill-async\" class=\"headerlink\" title=\"quill-async\"></a>quill-async</h5><p><strong>MySQL Async</strong></p>\n<p>sbt dependencies<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libraryDependencies ++= Seq(</span><br><span class=\"line\">  &quot;io.getquill&quot; %% &quot;quill-async&quot; % &quot;0.7.1-SNAPSHOT&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>source definition<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">MysqlAsyncSourceConfig</span>[<span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p>application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.host=host</span><br><span class=\"line\">db.port=3306</span><br><span class=\"line\">db.user=root</span><br><span class=\"line\">db.password=root</span><br><span class=\"line\">db.database=database</span><br><span class=\"line\">db.poolMaxQueueSize=4</span><br><span class=\"line\">db.poolMaxObjects=4</span><br><span class=\"line\">db.poolMaxIdle=999999999</span><br><span class=\"line\">db.poolValidationInterval=100</span><br></pre></td></tr></table></figure></p>\n<p><strong>Postgres Async</strong></p>\n<p>sbt dependencies<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libraryDependencies ++= Seq(</span><br><span class=\"line\">  &quot;io.getquill&quot; %% &quot;quill-async&quot; % &quot;0.7.1-SNAPSHOT&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>source definition<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">PostgresAsyncSourceConfig</span>[<span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p>application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.host=host</span><br><span class=\"line\">db.port=5432</span><br><span class=\"line\">db.user=root</span><br><span class=\"line\">db.password=root</span><br><span class=\"line\">db.database=database</span><br><span class=\"line\">db.poolMaxQueueSize=4</span><br><span class=\"line\">db.poolMaxObjects=4</span><br><span class=\"line\">db.poolMaxIdle=999999999</span><br><span class=\"line\">db.poolValidationInterval=100</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"quill-finagle-mysql\"><a href=\"#quill-finagle-mysql\" class=\"headerlink\" title=\"quill-finagle-mysql\"></a>quill-finagle-mysql</h5><p>sbt dependencies<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libraryDependencies ++= Seq(</span><br><span class=\"line\">  &quot;io.getquill&quot; %% &quot;quill-finagle-mysql&quot; % &quot;0.7.1-SNAPSHOT&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>source definition<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">FinagleMysqlSourceConfig</span>[<span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p>application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.dest=localhost:3306</span><br><span class=\"line\">db.user=root</span><br><span class=\"line\">db.password=root</span><br><span class=\"line\">db.database=database</span><br><span class=\"line\">db.pool.watermark.low=0</span><br><span class=\"line\">db.pool.watermark.high=10</span><br><span class=\"line\">db.pool.idleTime=5 # seconds</span><br><span class=\"line\">db.pool.bufferSize=0</span><br><span class=\"line\">db.pool.maxWaiters=2147483647</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Cassandra-Sources\"><a href=\"#Cassandra-Sources\" class=\"headerlink\" title=\"Cassandra Sources\"></a>Cassandra Sources</h2><p>sbt dependencies<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libraryDependencies ++= Seq(</span><br><span class=\"line\">  &quot;io.getquill&quot; %% &quot;quill-cassandra&quot; % &quot;0.7.1-SNAPSHOT&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p><strong>synchronous source</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">CassandraSyncSourceConfig</span>[<span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p><strong>asynchronous source</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">CassandraAsyncSourceConfig</span>[<span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p><strong>stream source</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">CassandraStreamSourceConfig</span>[<span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p>The configurations are set using runtime reflection on the <a href=\"https://docs.datastax.com/en/drivers/java/2.1/com/datastax/driver/core/Cluster.Builder.html\" target=\"_blank\" rel=\"noopener\"><code>Cluster.builder</code></a> instance. It is possible to set nested structures like <code>queryOptions.consistencyLevel</code>, use enum values like <code>LOCAL_QUORUM</code>, and set multiple parameters like in <code>credentials</code>.</p>\n<p>application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.keyspace=quill_test</span><br><span class=\"line\">db.preparedStatementCacheSize=1000</span><br><span class=\"line\">db.session.contactPoint=127.0.0.1</span><br><span class=\"line\">db.session.queryOptions.consistencyLevel=LOCAL_QUORUM</span><br><span class=\"line\">db.session.withoutMetrics=true</span><br><span class=\"line\">db.session.withoutJMXReporting=false</span><br><span class=\"line\">db.session.credentials.0=root</span><br><span class=\"line\">db.session.credentials.1=pass</span><br><span class=\"line\">db.session.maxSchemaAgreementWaitSeconds=1</span><br><span class=\"line\">db.session.addressTranslater=com.datastax.driver.core.policies.IdentityTranslater</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Additional-resources\"><a href=\"#Additional-resources\" class=\"headerlink\" title=\"Additional resources\"></a>Additional resources</h1><h2 id=\"Templates\"><a href=\"#Templates\" class=\"headerlink\" title=\"Templates\"></a>Templates</h2><p>In order to quickly start with Quill, we have setup some template projects:</p>\n<ul>\n<li><a href=\"https://github.com/getquill/play-quill-jdbc\" target=\"_blank\" rel=\"noopener\">Play Framework with Quill JDBC</a></li>\n</ul>\n<h2 id=\"Slick-comparison\"><a href=\"#Slick-comparison\" class=\"headerlink\" title=\"Slick comparison\"></a>Slick comparison</h2><p>Please refer to <a href=\"https://github.com/getquill/quill/blob/master/SLICK.md\" target=\"_blank\" rel=\"noopener\">SLICK.md</a> for a detailed comparison between Quill and Slick.</p>\n<h2 id=\"Cassandra-libraries-comparison\"><a href=\"#Cassandra-libraries-comparison\" class=\"headerlink\" title=\"Cassandra libraries comparison\"></a>Cassandra libraries comparison</h2><p>Please refer to <a href=\"https://github.com/getquill/quill/blob/master/CASSANDRA.md\" target=\"_blank\" rel=\"noopener\">CASSANDRA.md</a> for a detailed comparison between Quill and other main alternatives for interaction with Cassandra in Scala.</p>\n<h2 id=\"Code-of-Conduct\"><a href=\"#Code-of-Conduct\" class=\"headerlink\" title=\"Code of Conduct\"></a>Code of Conduct</h2><p>Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. See <a href=\"https://github.com/getquill/quill/blob/master/CODE_OF_CONDUCT.md\" target=\"_blank\" rel=\"noopener\">CODE_OF_CONDUCT.md</a> for details.</p>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><p>See the <a href=\"https://github.com/getquill/quill/blob/master/LICENSE.txt\" target=\"_blank\" rel=\"noopener\">LICENSE</a> file for details.</p>\n<h1 id=\"Maintainers\"><a href=\"#Maintainers\" class=\"headerlink\" title=\"Maintainers\"></a>Maintainers</h1><ul>\n<li>@fwbrasil</li>\n<li>@godenji</li>\n<li>@gustavoamigo</li>\n<li>@jilen</li>\n<li>@lvicentesanchez</li>\n</ul>\n<p>You can notify all maintainers using the handle <code>@getquill/maintainers</code>.</p>\n<h1 id=\"Acknowledgments\"><a href=\"#Acknowledgments\" class=\"headerlink\" title=\"Acknowledgments\"></a>Acknowledgments</h1><p>The project was created having Philip Wadler’s talk <a href=\"http://www.infoq.com/presentations/theory-language-integrated-query\" target=\"_blank\" rel=\"noopener\">“A practical theory of language-integrated query”</a> as its initial inspiration. The development was heavily influenced by the following papers:</p>\n<ul>\n<li><a href=\"http://homepages.inf.ed.ac.uk/slindley/papers/practical-theory-of-linq.pdf\" target=\"_blank\" rel=\"noopener\">A Practical Theory of Language-Integrated Query</a></li>\n<li><a href=\"http://homepages.inf.ed.ac.uk/wadler/papers/qdsl/qdsl.pdf\" target=\"_blank\" rel=\"noopener\">Everything old is new again: Quoted Domain Specific Languages</a></li>\n<li><a href=\"http://db.inf.uni-tuebingen.de/staticfiles/publications/the-flatter-the-better.pdf\" target=\"_blank\" rel=\"noopener\">The Flatter, the Better</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/getquill/quill/master/quill.png\" alt=\"quill\"></p>\n<p>Compile-time Language Integrated Query for Scala</p>\n<p><a href=\"https://travis-ci.org/getquill/quill\" target=\"_blank\" rel=\"noopener\"><img src=\"https://travis-ci.org/getquill/quill.svg?branch=master\" alt=\"Build Status\"></a><br><a href=\"https://www.codacy.com/app/fwbrasil/quill\" target=\"_blank\" rel=\"noopener\"><img src=\"https://api.codacy.com/project/badge/grade/36ab84c7ff43480489df9b7312a4bdc1\" alt=\"Codacy Badge\"></a><br><a href=\"https://codecov.io/github/getquill/quill?branch=master\" target=\"_blank\" rel=\"noopener\"><img src=\"https://codecov.io/github/getquill/quill/coverage.svg?branch=master\" alt=\"codecov.io\"></a><br><a href=\"https://gitter.im/getquill/quill?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/gitter-join%20chat-green.svg\" alt=\"Join the chat at https://gitter.im/getquill/quill\"></a><br><a href=\"https://www.versioneye.com/user/projects/56ea4da64e714c0035e76353\" target=\"_blank\" rel=\"noopener\"><img src=\"https://www.versioneye.com/user/projects/56ea4da64e714c0035e76353/badge.svg?style=flat\" alt=\"Dependency Status\"></a></p>\n<p>Quill provides a Quoted Domain Specific Language (<a href=\"http://homepages.inf.ed.ac.uk/wadler/papers/qdsl/qdsl.pdf\" target=\"_blank\" rel=\"noopener\">QDSL</a>) to express queries in Scala and execute them in a target language. The library’s core is designed to support multiple target languages, currently featuring specializations for Structured Query Language (<a href=\"https://en.wikipedia.org/wiki/SQL\" target=\"_blank\" rel=\"noopener\">SQL</a>) and Cassandra Query Language (<a href=\"https://cassandra.apache.org/doc/cql3/CQL.html#selectStmt\" target=\"_blank\" rel=\"noopener\">CQL</a>).</p>\n<p><img src=\"https://raw.githubusercontent.com/getquill/quill/master/example.gif\" alt=\"example\"></p>\n<ol>\n<li><strong>Boilerplate-free mapping</strong>: The database schema is mapped using simple case classes.</li>\n<li><strong>Quoted DSL</strong>: Queries are defined inside a <code>quote</code> block. Quill parses each quoted block of code (quotation) at compile time and translates them to an internal Abstract Syntax Tree (AST)</li>\n<li><strong>Compile-time query generation</strong>: The <code>db.run</code> call reads the quotation’s AST and translates it to the target language at compile time, emitting the query string as a compilation message. As the query string is known at compile time, the runtime overhead is very low and similar to using the database driver directly.</li>\n<li><strong>Compile-time query validation</strong>: If configured, the query is verified against the database at compile time and the compilation fails if it is not valid. The query validation <strong>does not</strong> alter the database state.</li>\n</ol>\n<h1 id=\"Quotation\"><a href=\"#Quotation\" class=\"headerlink\" title=\"Quotation\"></a>Quotation</h1><h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>The QDSL allows the user to write plain Scala code, leveraging scala’s syntax and type system. Quotations are created using the <code>quote</code> method and can contain any excerpt of code that uses supported operations. To create quotations, first import <code>quote</code> and some other auxiliary methods:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br></pre></td></tr></table></figure>\n<p>A quotation can be a simple value:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> pi = quote(<span class=\"number\">3.14159</span>)</span><br></pre></td></tr></table></figure>\n<p>And be used within another quotation:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span>(<span class=\"params\">radius: <span class=\"type\">Float</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">areas</span> </span>= quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].map(c =&gt; pi * c.radius * c.radius)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Quotations can also contain high-order functions and inline values:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> area = quote &#123;</span><br><span class=\"line\">  (c: <span class=\"type\">Circle</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> r2 = c.radius * c.radius</span><br><span class=\"line\">    pi * r2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> areas = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].map(c =&gt; area(c))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Quotations can contain values defined outside of the quotation:<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> pi = <span class=\"number\">3.14159</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> areas = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].map(c =&gt; pi * c.radius * c.radius)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Quill’s normalization engine applies reduction steps before translating the quotation to the target language. The correspondent normalized quotation for both versions of the <code>areas</code> query is:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> areas = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].map(c =&gt; <span class=\"number\">3.14159</span> * c.radius * c.radius)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Scala doesn’t have support for high-order functions with type parameters. Quill supports anonymous classes with an apply method for this purpose:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> existsAny = quote &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>[<span class=\"type\">T</span>](xs: <span class=\"type\">Query</span>[<span class=\"type\">T</span>])(p: <span class=\"type\">T</span> =&gt; <span class=\"type\">Boolean</span>) =</span><br><span class=\"line\">    \txs.filter(p(_)).nonEmpty</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].filter &#123; c1 =&gt;</span><br><span class=\"line\">    existsAny(query[<span class=\"type\">Circle</span>])(c2 =&gt; c2.radius &gt; c1.radius)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mirror-sources\"><a href=\"#Mirror-sources\" class=\"headerlink\" title=\"Mirror sources\"></a>Mirror sources</h2><p>Sources represent the database and provide an execution interface for queries. Quill provides mirror sources for test purposes. Please refer to <a href=\"#sources\">sources</a> for information on how to create normal sources.</p>\n<p>Instead of running the query, mirror sources return a structure with the information that would be used to run the query. There are three mirror source configurations:</p>\n<ul>\n<li><code>io.getquill.MirrorSourceConfig</code>: Mirrors the quotation AST</li>\n<li><code>io.getquill.SqlMirrorSourceConfig</code>: Mirrors the SQL query</li>\n<li><code>io.getquill.CassandraMirrorSourceConfig</code>: Mirrors the CQL query</li>\n</ul>\n<p>This documentation uses the SQL mirror in its examples under the <code>db</code> name:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">SqlMirrorSourceConfig</span>(<span class=\"string\">\"testSource\"</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"Compile-time-quotations\"><a href=\"#Compile-time-quotations\" class=\"headerlink\" title=\"Compile-time quotations\"></a>Compile-time quotations</h2><p>Quotations are both compile-time and runtime values. Quill uses a type refinement to store the quotation’s AST as an annotation available at compile-time and the <code>q.ast</code> method exposes the AST as runtime value.</p>\n<p>It is important to avoid giving explicit types to quotations when possible. For instance, this quotation can’t be read at compile-time as the type refinement is lost:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Avoid type widening (Quoted[Query[Circle]]), or else the quotation will be dynamic.</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> q: <span class=\"type\">Quoted</span>[<span class=\"type\">Query</span>[<span class=\"type\">Circle</span>]] = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].filter(c =&gt; c.radius &gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q) <span class=\"comment\">// Dynamic query</span></span><br></pre></td></tr></table></figure>\n<p>Quill falls back to runtime normalization and query generation if the quotation’s AST can be read at compile-time. Please refer to <a href=\"#dynamic-queries\">dynamic queries</a> for more information</p>\n<h2 id=\"Bindings\"><a href=\"#Bindings\" class=\"headerlink\" title=\"Bindings\"></a>Bindings</h2><p>Quotations are designed to be self-contained, without references to runtime values outside their scope. There are two mechanisms to explicitly bind runtime values to a quotation execution.</p>\n<h4 id=\"Lifted-values\"><a href=\"#Lifted-values\" class=\"headerlink\" title=\"Lifted values\"></a>Lifted values</h4><p>A runtime value can be lifted to a quotation through the method <code>lift</code>:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">biggerThan</span></span>(i: <span class=\"type\">Float</span>) = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].filter(r =&gt; r.radius &gt; lift(i))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(biggerThan(<span class=\"number\">10</span>)) <span class=\"comment\">// SELECT r.radius FROM Circle r WHERE r.radius &gt; ?</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Parametrized-quotations\"><a href=\"#Parametrized-quotations\" class=\"headerlink\" title=\"Parametrized quotations\"></a>Parametrized quotations</h4><p>A quotation can be defined as a function:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> biggerThan = quote &#123;</span><br><span class=\"line\">  (i: <span class=\"type\">Int</span>) =&gt;</span><br><span class=\"line\">    query[<span class=\"type\">Circle</span>].filter(r =&gt; r.radius &gt; i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And a runtime value can be specified when running it:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.run(biggerThan)(<span class=\"number\">10</span>) <span class=\"comment\">// SELECT r.radius FROM Circle r WHERE r.radius &gt; ?</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Schema\"><a href=\"#Schema\" class=\"headerlink\" title=\"Schema\"></a>Schema</h2><p>The database schema is represented by case classes. By default, quill uses the class and field names as the database identifiers:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span>(<span class=\"params\">radius: <span class=\"type\">Float</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">q</span> </span>= quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].filter(c =&gt; c.radius &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q) <span class=\"comment\">// SELECT c.radius FROM Circle c WHERE c.radius &gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>Alternatively, the identifiers can be customized:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> circles = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Circle</span>].schema(_.entity(<span class=\"string\">\"circle_table\"</span>).columns(_.radius -&gt; <span class=\"string\">\"radius_column\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  circles.filter(c =&gt; c.radius &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT c.radius_column FROM circle_table c WHERE c.radius_column &gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>If multiple tables require custom identifiers, it is good practice to define a <code>schema</code> object with all table queries to be reused across multiple queries:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span>(<span class=\"params\">radius: <span class=\"type\">Int</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">case</span> <span class=\"title\">class</span> <span class=\"title\">Rectangle</span>(<span class=\"params\">length: <span class=\"type\">Int</span>, width: <span class=\"type\">Int</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">object</span> <span class=\"title\">schema</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> circles = quote &#123;</span><br><span class=\"line\">    query[<span class=\"type\">Circle</span>].schema(</span><br><span class=\"line\">        _.entity(<span class=\"string\">\"circle_table\"</span>)</span><br><span class=\"line\">        .columns(_.radius -&gt; <span class=\"string\">\"radius_column\"</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> rectangles = quote &#123;</span><br><span class=\"line\">    query[<span class=\"type\">Rectangle</span>].schema(</span><br><span class=\"line\">        _.entity(<span class=\"string\">\"rectangle_table\"</span>)</span><br><span class=\"line\">        .columns(</span><br><span class=\"line\">          _.length -&gt; <span class=\"string\">\"length_column\"</span>,</span><br><span class=\"line\">          _.width -&gt; <span class=\"string\">\"width_column\"</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It is possible to define a column that is a key generated by the database. It will be ignored during insertions and returned as the result.<br>Note that it accepts only values that can be read as <code>Long</code>.<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span>(<span class=\"params\">id: <span class=\"type\">Long</span>, description: <span class=\"type\">String</span>, sku: <span class=\"type\">Long</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">q</span> </span>= quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Product</span>].schema(_.generated(_.id)).insert</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Product (description,sku) VALUES (?, ?)</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Queries\"><a href=\"#Queries\" class=\"headerlink\" title=\"Queries\"></a>Queries</h2><p>The overall abstraction of quill queries is use database tables as if they were in-memory collections. Scala for-comprehensions provide syntatic sugar to deal with this kind of monadic operations:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">id: <span class=\"type\">Int</span>, name: <span class=\"type\">String</span>, age: <span class=\"type\">Int</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">case</span> <span class=\"title\">class</span> <span class=\"title\">Contact</span>(<span class=\"params\">personId: <span class=\"type\">Int</span>, phone: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">q</span> </span>= quote &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    p &lt;- query[<span class=\"type\">Person</span>] <span class=\"keyword\">if</span>(p.id == <span class=\"number\">999</span>)</span><br><span class=\"line\">    c &lt;- query[<span class=\"type\">Contact</span>] <span class=\"keyword\">if</span>(c.personId == p.id)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">yield</span> &#123;</span><br><span class=\"line\">    (p.name, c.phone)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.name, c.phone FROM Person p, Contact c WHERE (p.id = 999) AND (c.personId = p.id)</span></span><br></pre></td></tr></table></figure>\n<p>Quill normalizes the quotation and translates the monadic joins to applicative joins, generating a database-friendly query that avoids nested queries.</p>\n<p>Any of the following features can be used together with the others and/or within a for-comprehension:</p>\n<p><strong>filter</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">18</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p WHERE p.age &gt; 18</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>map</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].map(p =&gt; p.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.name FROM Person p</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>flatMap</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">18</span>).flatMap(p =&gt; query[<span class=\"type\">Contact</span>].filter(c =&gt; c.personId == p.id))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT c.personId, c.phone FROM Person p, Contact c WHERE (p.age &gt; 18) AND (c.personId = p.id)</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>sortBy</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q1 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].sortBy(p =&gt; p.age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q1)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p ORDER BY p.age ASC NULLS FIRST</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q2 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].sortBy(p =&gt; p.age)(<span class=\"type\">Ord</span>.descNullsLast)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q2)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p ORDER BY p.age DESC NULLS LAST</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q3 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].sortBy(p =&gt; (p.name, p.age))(<span class=\"type\">Ord</span>(<span class=\"type\">Ord</span>.asc, <span class=\"type\">Ord</span>.desc))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q3)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p ORDER BY p.name ASC, p.age DESC</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>drop/take</strong></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].drop(<span class=\"number\">2</span>).take(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT x.id, x.name, x.age FROM Person x LIMIT 1 OFFSET 2</span></span><br></pre></td></tr></table></figure>\n<p><strong>groupBy</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].groupBy(p =&gt; p.age).map &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> (age, people) =&gt;</span><br><span class=\"line\">      (age, people.size)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.age, COUNT(*) FROM Person p GROUP BY p.age</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>union</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">18</span>).union(query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">60</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age &gt; 18</span></span><br><span class=\"line\"><span class=\"comment\">// UNION SELECT id, name, age FROM Person p1 WHERE p1.age &gt; 60) x</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>unionAll/++</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">18</span>).unionAll(query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">60</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age &gt; 18</span></span><br><span class=\"line\"><span class=\"comment\">// UNION ALL SELECT id, name, age FROM Person p1 WHERE p1.age &gt; 60) x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q2 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">18</span>) ++ query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">60</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q2)</span><br><span class=\"line\"><span class=\"comment\">// SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age &gt; 18</span></span><br><span class=\"line\"><span class=\"comment\">// UNION ALL SELECT id, name, age FROM Person p1 WHERE p1.age &gt; 60) x</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>aggregation</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> r = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].map(p =&gt; p.age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(r.min) <span class=\"comment\">// SELECT MIN(p.age) FROM Person p</span></span><br><span class=\"line\">db.run(r.max) <span class=\"comment\">// SELECT MAX(p.age) FROM Person p</span></span><br><span class=\"line\">db.run(r.avg) <span class=\"comment\">// SELECT AVG(p.age) FROM Person p</span></span><br><span class=\"line\">db.run(r.sum) <span class=\"comment\">// SELECT SUM(p.age) FROM Person p</span></span><br><span class=\"line\">db.run(r.size) <span class=\"comment\">// SELECT COUNT(p.age) FROM Person p</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>isEmpty/nonEmpty</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter&#123; p1 =&gt;</span><br><span class=\"line\">    query[<span class=\"type\">Person</span>].filter(p2 =&gt; p2.id != p1.id &amp;&amp; p2.age == p1.age).isEmpty</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p1.id, p1.name, p1.age FROM Person p1 WHERE</span></span><br><span class=\"line\"><span class=\"comment\">// NOT EXISTS (SELECT * FROM Person p2 WHERE (p2.id &lt;&gt; p1.id) AND (p2.age = p1.age))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q2 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter&#123; p1 =&gt;</span><br><span class=\"line\">    query[<span class=\"type\">Person</span>].filter(p2 =&gt; p2.id != p1.id &amp;&amp; p2.age == p1.age).nonEmpty</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q2)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p1.id, p1.name, p1.age FROM Person p1 WHERE</span></span><br><span class=\"line\"><span class=\"comment\">// EXISTS (SELECT * FROM Person p2 WHERE (p2.id &lt;&gt; p1.id) AND (p2.age = p1.age))</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>contains</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; <span class=\"type\">Set</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>).contains(p.id))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (1, 2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q1 = quote &#123; (ids: <span class=\"type\">Set</span>[<span class=\"type\">Int</span>]) =&gt;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; ids.contains(p.id))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q1)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (?)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> peopleWithContacts = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; query[<span class=\"type\">Contact</span>].filter(c =&gt; c.personId == p.id).nonEmpty)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">val</span> q2 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; peopleWithContacts.contains(p.id))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q2)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (SELECT p1.* FROM Person p1 WHERE EXISTS (SELECT c.* FROM Contact c WHERE c.personId = p1.id))</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>distinct</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].map(p =&gt; p.age).distinct</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT DISTINCT p.age FROM Person p</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>joins</strong></p>\n<p>In addition to applicative joins Quill also supports explicit joins (both inner and left/right/full outer joins).</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].join(query[<span class=\"type\">Contact</span>]).on((p, c) =&gt; c.personId == p.id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age, c.personId, c.phone•</span></span><br><span class=\"line\"><span class=\"comment\">// FROM Person p INNER JOIN Contact c ON c.personId = p.id</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].leftJoin(query[<span class=\"type\">Contact</span>]).on((p, c) =&gt; c.personId == p.id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age, c.personId, c.phone•</span></span><br><span class=\"line\"><span class=\"comment\">// FROM Person p LEFT JOIN Contact c ON c.personId = p.id</span></span><br></pre></td></tr></table></figure>\n<p>The example joins above cover the simple case. What do you do when a query requires joining more than 2 tables?</p>\n<p>With Quill the following multi-join queries are equivalent, choose according to preference:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employer</span>(<span class=\"params\">id: <span class=\"type\">Int</span>, personId: <span class=\"type\">Int</span>, name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">qFlat</span> </span>= quote &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">    (p,e) &lt;- query[<span class=\"type\">Person</span>].join(query[<span class=\"type\">Employer</span>]).on(_.id == _.personId)</span><br><span class=\"line\">       c  &lt;- query[<span class=\"type\">Contact</span>].leftJoin(_.personId == p.id)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">yield</span>(p, e, c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> qNested = quote &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">    ((p,e),c) &lt;-</span><br><span class=\"line\">      query[<span class=\"type\">Person</span>].join(query[<span class=\"type\">Employer</span>]).on(_.id == _.personId)</span><br><span class=\"line\">      .leftJoin(query[<span class=\"type\">Contact</span>]).on(</span><br><span class=\"line\">        _._1.id == _.personId</span><br><span class=\"line\">      )</span><br><span class=\"line\">  &#125; <span class=\"keyword\">yield</span>(p, e, c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(qFlat)</span><br><span class=\"line\">db.run(qNested)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age, e.id, e.personId, e.name, c.id, c.phone•</span></span><br><span class=\"line\"><span class=\"comment\">// FROM Person p INNER JOIN Employer e ON p.id = e.personId LEFT JOIN Contact c ON c.personId = p.id</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Query-probing\"><a href=\"#Query-probing\" class=\"headerlink\" title=\"Query probing\"></a>Query probing</h4><p>Query probing is an experimental feature that validates queries against the database at compile time, failing the compilation if it is not valid. The query validation does not alter the database state.</p>\n<p>This feature is disabled by default. To enable it, mix the <code>QueryProbing</code> trait to the database configuration:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lazy val db = source(new MySourceConfig(&quot;configKey&quot;) with QueryProbing)</span><br></pre></td></tr></table></figure>\n<p>The config configuration must be self-contained, not having references to variables outside its scope. This allows the macro load the source instance at compile-time.</p>\n<p>The configurations correspondent to the config key must be available at compile time. You can achieve it by adding this line to your project settings:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unmanagedClasspath in Compile += baseDirectory.value / &quot;src&quot; / &quot;main&quot; / &quot;resources&quot;</span><br></pre></td></tr></table></figure>\n<p>If your project doesn’t have a standard layout, e.g. a play project, you should configure the path to point to the folder that contains your config file.</p>\n<h2 id=\"Actions\"><a href=\"#Actions\" class=\"headerlink\" title=\"Actions\"></a>Actions</h2><p>Database actions are defined using quotations as well. These actions don’t have a collection-like API but rather a custom DSL to express inserts, deletes and updates.</p>\n<p>  Note: Actions take either a List (in which case the query is batched) or a single value.</p>\n<p><strong>insert</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = quote(query[<span class=\"type\">Contact</span>].insert)</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)(<span class=\"type\">List</span>(<span class=\"type\">Contact</span>(<span class=\"number\">999</span>, <span class=\"string\">\"+1510488988\"</span>)))</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Contact (personId,phone) VALUES (?, ?)</span></span><br><span class=\"line\">db.run(a)(<span class=\"type\">Contact</span>(<span class=\"number\">999</span>, <span class=\"string\">\"+1510488988\"</span>))</span><br><span class=\"line\"><span class=\"comment\">// insert single item</span></span><br></pre></td></tr></table></figure></p>\n<p>It is also possible to insert specific columns:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  (personId: <span class=\"type\">Int</span>, phone: <span class=\"type\">String</span>) =&gt;</span><br><span class=\"line\">    query[<span class=\"type\">Contact</span>].insert(_.personId -&gt; personId, _.phone -&gt; phone)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)(<span class=\"type\">List</span>((<span class=\"number\">999</span>, <span class=\"string\">\"+1510488988\"</span>)))</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Contact (personId,phone) VALUES (?, ?)</span></span><br></pre></td></tr></table></figure>\n<p>Or column queries:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  (id: <span class=\"type\">Int</span>) =&gt;</span><br><span class=\"line\">    query[<span class=\"type\">Person</span>].insert(_.id -&gt; id, _.age -&gt; query[<span class=\"type\">Person</span>].map(p =&gt; p.age).max)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)(<span class=\"type\">List</span>(<span class=\"number\">999</span>))</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Person (id,age) VALUES (?, (SELECT MAX(p.age) FROM Person p))</span></span><br></pre></td></tr></table></figure>\n<p><strong>update</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(_.id == <span class=\"number\">999</span>).update</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)(<span class=\"type\">List</span>(<span class=\"type\">Person</span>(<span class=\"number\">999</span>, <span class=\"string\">\"John\"</span>, <span class=\"number\">22</span>)))</span><br><span class=\"line\"><span class=\"comment\">// UPDATE Person SET id = ?, name = ?, age = ? WHERE id = 999</span></span><br><span class=\"line\">db.run(a)(<span class=\"type\">Person</span>(<span class=\"number\">999</span>, <span class=\"string\">\"John\"</span>, <span class=\"number\">22</span>))</span><br><span class=\"line\"><span class=\"comment\">// update single item</span></span><br></pre></td></tr></table></figure></p>\n<p>Using specific columns:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  (id: <span class=\"type\">Int</span>, age: <span class=\"type\">Int</span>) =&gt;</span><br><span class=\"line\">    query[<span class=\"type\">Person</span>].filter(p =&gt; p.id == id).update(_.age -&gt; age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)(<span class=\"type\">List</span>((<span class=\"number\">999</span>, <span class=\"number\">18</span>)))</span><br><span class=\"line\"><span class=\"comment\">// UPDATE Person SET age = ? WHERE id = ?</span></span><br></pre></td></tr></table></figure>\n<p>Using columns as part of the update:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  (id: <span class=\"type\">Int</span>) =&gt;</span><br><span class=\"line\">    query[<span class=\"type\">Person</span>].filter(p =&gt; p.id == id).update(p =&gt; p.age -&gt; (p.age + <span class=\"number\">1</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)(<span class=\"type\">List</span>(<span class=\"number\">999</span>))</span><br><span class=\"line\"><span class=\"comment\">// UPDATE Person SET age = (age + 1) WHERE id = ?</span></span><br></pre></td></tr></table></figure>\n<p>Using column a query:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  (id: <span class=\"type\">Int</span>) =&gt;</span><br><span class=\"line\">    query[<span class=\"type\">Person</span>].filter(p =&gt; p.id == id).update(_.age -&gt; query[<span class=\"type\">Person</span>].map(p =&gt; p.age).max)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)(<span class=\"type\">List</span>(<span class=\"number\">999</span>))</span><br><span class=\"line\"><span class=\"comment\">// UPDATE Person SET age = (SELECT MAX(p.age) FROM Person p) WHERE id = ?</span></span><br></pre></td></tr></table></figure>\n<p><strong>delete</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.name == <span class=\"string\">\"\"</span>).delete</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)</span><br><span class=\"line\"><span class=\"comment\">// DELETE FROM Person WHERE name = ''</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Implicit-query\"><a href=\"#Implicit-query\" class=\"headerlink\" title=\"Implicit query\"></a>Implicit query</h2><p>Quill provides implicit conversions from case class companion objects to <code>query[T]</code> through an extra import:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.<span class=\"type\">ImplicitQuery</span>._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    p &lt;- <span class=\"type\">Person</span> <span class=\"keyword\">if</span>(p.id == <span class=\"number\">999</span>)</span><br><span class=\"line\">    c &lt;- <span class=\"type\">Contact</span> <span class=\"keyword\">if</span>(c.personId == p.id)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">yield</span> &#123;</span><br><span class=\"line\">    (p.name, c.phone)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.name, c.phone FROM Person p, Contact c WHERE (p.id = 999) AND (c.personId = p.id)</span></span><br></pre></td></tr></table></figure>\n<p>Note the usage of <code>Person</code> and <code>Contact</code> instead of <code>query[Person]</code> and <code>query[Contact]</code>.</p>\n<h2 id=\"SQL-specific-operations\"><a href=\"#SQL-specific-operations\" class=\"headerlink\" title=\"SQL-specific operations\"></a>SQL-specific operations</h2><p>Some operations are sql-specific and not provided with the generic quotation mechanism. The <code>io.getquill.sources.sql.ops</code> package has some implicit classes for this kind of operations:</p>\n<p><strong>like</strong></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.sources.sql.ops._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.name like <span class=\"string\">\"%John%\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p WHERE p.name like '%John%'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Cassandra-specific-operations\"><a href=\"#Cassandra-specific-operations\" class=\"headerlink\" title=\"Cassandra-specific operations\"></a>Cassandra-specific operations</h2><p>The cql-specific operations are provided by the following import:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.sources.cassandra.ops._</span><br></pre></td></tr></table></figure>\n<p>The cassandra package also offers a mirror source:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">CassandraMirrorSourceConfig</span>(<span class=\"string\">\"testSource\"</span>))</span><br></pre></td></tr></table></figure>\n<p>Supported operations:</p>\n<p><strong>allowFiltering</strong></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">10</span>).allowFiltering</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT id, name, age FROM Person WHERE age &gt; 10 ALLOW FILTERING</span></span><br></pre></td></tr></table></figure>\n<p><strong>ifNotExists</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].insert(_.age -&gt; <span class=\"number\">10</span>, _.name -&gt; <span class=\"string\">\"John\"</span>).ifNotExists</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Person (age,name) VALUES (10, 'John') IF NOT EXISTS</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>ifExists</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.name == <span class=\"string\">\"John\"</span>).delete.ifExists</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// DELETE FROM Person WHERE name = 'John' IF EXISTS</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>usingTimestamp</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q1 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].insert(_.age -&gt; <span class=\"number\">10</span>, _.name -&gt; <span class=\"string\">\"John\"</span>).usingTimestamp(<span class=\"number\">99</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q1)</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Person (age,name) VALUES (10, 'John') USING TIMESTAMP 99</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q2 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].usingTimestamp(<span class=\"number\">99</span>).update(_.age -&gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q2)</span><br><span class=\"line\"><span class=\"comment\">// UPDATE Person USING TIMESTAMP 99 SET age = 10</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>usingTtl</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q1 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].insert(_.age -&gt; <span class=\"number\">10</span>, _.name -&gt; <span class=\"string\">\"John\"</span>).usingTtl(<span class=\"number\">11</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q1)</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Person (age,name) VALUES (10, 'John') USING TTL 11</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q2 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].usingTtl(<span class=\"number\">11</span>).update(_.age -&gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q2)</span><br><span class=\"line\"><span class=\"comment\">// UPDATE Person USING TTL 11 SET age = 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q3 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].usingTtl(<span class=\"number\">11</span>).filter(_.name == <span class=\"string\">\"John\"</span>).delete</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q3)  </span><br><span class=\"line\"><span class=\"comment\">// DELETE FROM Person USING TTL 11 WHERE name = 'John'</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>using</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q1 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].insert(_.age -&gt; <span class=\"number\">10</span>, _.name -&gt; <span class=\"string\">\"John\"</span>).using(ts = <span class=\"number\">99</span>, ttl = <span class=\"number\">11</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q1)</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Person (age,name) VALUES (10, 'John') USING TIMESTAMP 99 AND TTL 11</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q2 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].using(ts = <span class=\"number\">99</span>, ttl = <span class=\"number\">11</span>).update(_.age -&gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q2)</span><br><span class=\"line\"><span class=\"comment\">// UPDATE Person USING TIMESTAMP 99 AND TTL 11 SET age = 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q3 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].using(ts = <span class=\"number\">99</span>, ttl = <span class=\"number\">11</span>).filter(_.name == <span class=\"string\">\"John\"</span>).delete</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q3)</span><br><span class=\"line\"><span class=\"comment\">// DELETE FROM Person USING TIMESTAMP 99 AND TTL 11 WHERE name = 'John'</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>ifCond</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q1 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].update(_.age -&gt; <span class=\"number\">10</span>).ifCond(_.name == <span class=\"string\">\"John\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q1)</span><br><span class=\"line\"><span class=\"comment\">// UPDATE Person SET age = 10 IF name = 'John'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q2 = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(_.name == <span class=\"string\">\"John\"</span>).delete.ifCond(_.age == <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q2)</span><br><span class=\"line\"><span class=\"comment\">// DELETE FROM Person WHERE name = 'John' IF age = 10</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>delete column</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].map(p =&gt; p.age).delete</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// DELETE p.age FROM Person</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Dynamic-queries\"><a href=\"#Dynamic-queries\" class=\"headerlink\" title=\"Dynamic queries\"></a>Dynamic queries</h2><p>Quill’s default operation mode is compile-time, but there are queries that have their structure defined only at runtime. Quill automatically falls back to runtime normalization and query generation if the query’s structure is not static. Example:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">SqlMirrorSourceConfig</span>(<span class=\"string\">\"testSource\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">QueryType</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">case</span> <span class=\"title\">object</span> <span class=\"title\">Minor</span> <span class=\"keyword\">extends</span> <span class=\"title\">QueryType</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">case</span> <span class=\"title\">object</span> <span class=\"title\">Senior</span> <span class=\"keyword\">extends</span> <span class=\"title\">QueryType</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">def</span> <span class=\"title\">people</span>(<span class=\"params\">t: <span class=\"type\">QueryType</span></span>)</span>: <span class=\"type\">Quoted</span>[<span class=\"type\">Query</span>[<span class=\"type\">Person</span>]] =</span><br><span class=\"line\">  t <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Minor</span> =&gt; quote &#123;</span><br><span class=\"line\">      query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &lt; <span class=\"number\">18</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Senior</span> =&gt; quote &#123;</span><br><span class=\"line\">      query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &gt; <span class=\"number\">65</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(people(<span class=\"type\">Minor</span>))</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p WHERE p.age &lt; 18</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.run(people(<span class=\"type\">Senior</span>))</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM Person p WHERE p.age &gt; 65</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Extending-quill\"><a href=\"#Extending-quill\" class=\"headerlink\" title=\"Extending quill\"></a>Extending quill</h1><h2 id=\"Infix\"><a href=\"#Infix\" class=\"headerlink\" title=\"Infix\"></a>Infix</h2><p>Infix is a very flexible mechanism to use non-supported features without having to use plain queries in the target language. It allows insertion of arbitrary strings within quotations.</p>\n<p>For instance, quill doesn’t support the <code>FOR UPDATE</code> SQL feature. It can still be used through infix and implicit classes:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">implicit</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForUpdate</span>[<span class=\"type\">T</span>](<span class=\"params\">q: <span class=\"type\">Query</span>[<span class=\"type\">T</span>]</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forUpdate</span> </span>= quote(<span class=\"string\">infix\"<span class=\"subst\">$q</span> FOR UPDATE\"</span>.as[<span class=\"type\">Query</span>[<span class=\"type\">T</span>]])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].filter(p =&gt; p.age &lt; <span class=\"number\">18</span>).forUpdate</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)</span><br><span class=\"line\"><span class=\"comment\">// SELECT p.id, p.name, p.age FROM (SELECT * FROM Person p WHERE p.age &lt; 18 FOR UPDATE) p</span></span><br></pre></td></tr></table></figure>\n<p>The <code>forUpdate</code> quotation can be reused for multiple queries.</p>\n<p>The same approach can be used for <code>RETURNING ID</code>:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">implicit</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReturningId</span>[<span class=\"type\">T</span>](<span class=\"params\">a: <span class=\"type\">Action</span>[<span class=\"type\">T</span>]</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">returningId</span> </span>= quote(<span class=\"string\">infix\"<span class=\"subst\">$a</span> RETURNING ID\"</span>.as[<span class=\"type\">Action</span>[<span class=\"type\">T</span>]])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> a = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].insert(_.name -&gt; <span class=\"string\">\"John\"</span>, _.age -&gt; <span class=\"number\">21</span>).returningId</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(a)</span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO Person (name,age) VALUES ('John', 21) RETURNING ID</span></span><br></pre></td></tr></table></figure>\n<p>A custom database function can also be used through infix:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> myFunction = quote &#123;</span><br><span class=\"line\">  (i: <span class=\"type\">Int</span>) =&gt; <span class=\"string\">infix\"MY_FUNCTION(<span class=\"subst\">$i</span>)\"</span>.as[<span class=\"type\">Int</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> q = quote &#123;</span><br><span class=\"line\">  query[<span class=\"type\">Person</span>].map(p =&gt; myFunction(p.age))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.run(q)</span><br><span class=\"line\"><span class=\"comment\">// SELECT MY_FUNCTION(p.age) FROM Person p</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Custom-encoding\"><a href=\"#Custom-encoding\" class=\"headerlink\" title=\"Custom encoding\"></a>Custom encoding</h2><p>Quill uses <code>Encoder</code>s to encode query inputs and <code>Decoder</code>s to read values returned by queries. The library provides a few built-in encodings and two mechanisms to define custom encodings: mapped encoding and raw encoding.</p>\n<h2 id=\"Mapped-Encoding\"><a href=\"#Mapped-Encoding\" class=\"headerlink\" title=\"Mapped Encoding\"></a>Mapped Encoding</h2><p>If the correspondent database type is already supported, use <code>mappedEncoding</code>. In this example, <code>String</code> is already supported by Quill and the <code>UUID</code> encoding from/to <code>String</code> is defined through mapped encoding:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"type\">UUID</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">implicit</span> <span class=\"keyword\">val</span> encodeUUID = mappedEncoding[<span class=\"type\">UUID</span>, <span class=\"type\">String</span>](_.toString)</span><br><span class=\"line\"><span class=\"keyword\">implicit</span> <span class=\"keyword\">val</span> decodeUUID = mappedEncoding[<span class=\"type\">String</span>, <span class=\"type\">UUID</span>](<span class=\"type\">UUID</span>.fromString(_))</span><br></pre></td></tr></table></figure>\n<h2 id=\"Raw-Encoding\"><a href=\"#Raw-Encoding\" class=\"headerlink\" title=\"Raw Encoding\"></a>Raw Encoding</h2><p>If the database type is not supported by Quill, it is possible to provide “raw” encoders and decoders:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">Literal</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.sources.jdbc.<span class=\"type\">JdbcSource</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.sources.sql.idiom.<span class=\"type\">PostgresDialect</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">UUIDEncodingExample</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> jdbcSource: <span class=\"type\">JdbcSource</span>[<span class=\"type\">PostgresDialect</span>, <span class=\"type\">Literal</span>] <span class=\"comment\">// your source should go here</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">import</span> jdbcSource._</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">implicit</span> <span class=\"keyword\">val</span> uuidDecoder: <span class=\"type\">Decoder</span>[<span class=\"type\">UUID</span>] =</span><br><span class=\"line\">    decoder[<span class=\"type\">UUID</span>] &#123;</span><br><span class=\"line\">      row =&gt; index =&gt;</span><br><span class=\"line\">        <span class=\"type\">UUID</span>.fromString(row.getObject(index).toString) <span class=\"comment\">// database-specific implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">implicit</span> <span class=\"keyword\">val</span> uuidEncoder: <span class=\"type\">Encoder</span>[<span class=\"type\">UUID</span>] =</span><br><span class=\"line\">    encoder[<span class=\"type\">UUID</span>] &#123;</span><br><span class=\"line\">      row =&gt; (idx, uuid) =&gt;</span><br><span class=\"line\">        row.setObject(idx, uuid, java.sql.<span class=\"type\">Types</span>.<span class=\"type\">OTHER</span>) <span class=\"comment\">// database-specific implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Wrapped-types\"><a href=\"#Wrapped-types\" class=\"headerlink\" title=\"Wrapped types\"></a>Wrapped types</h2><p>Quill also supports encoding of “wrapped types”. Just extend the <code>WrappedValue</code> trait and Quill will automatically encode the underlying primitive type.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.sources._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserId</span>(<span class=\"params\">value: <span class=\"type\">Int</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">AnyVal</span> <span class=\"keyword\">with</span> <span class=\"title\">WrappedValue</span>[<span class=\"type\">Int</span>]</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">case</span> <span class=\"title\">class</span> <span class=\"title\">User</span>(<span class=\"params\">id: <span class=\"type\">UserId</span>, name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">q</span> </span>= quote &#123;</span><br><span class=\"line\">  (id: <span class=\"type\">UserId</span>) =&gt; <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    u &lt;- query[<span class=\"type\">User</span>] <span class=\"keyword\">if</span> u.id == id</span><br><span class=\"line\">  &#125; <span class=\"keyword\">yield</span> u</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">db.run(q)(<span class=\"type\">UserId</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SELECT u.id, u.name FROM User u WHERE (u.id = 1)</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Sources\"><a href=\"#Sources\" class=\"headerlink\" title=\"Sources\"></a>Sources</h1><h2 id=\"SQL-Sources\"><a href=\"#SQL-Sources\" class=\"headerlink\" title=\"SQL Sources\"></a>SQL Sources</h2><p>Sources represent the database and provide an execution interface for queries. Example:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.sources.sql.idiom.<span class=\"type\">MySQLDialect</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">JdbcSourceConfig</span>[<span class=\"type\">MySQLDialect</span>, <span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure>\n<h4 id=\"Dialect\"><a href=\"#Dialect\" class=\"headerlink\" title=\"Dialect\"></a>Dialect</h4><p>The SQL dialect to be used by the source is defined by the first type parameter. Some source types are specific to a database and thus not require it.</p>\n<p>Quill has three built-in dialects:</p>\n<ul>\n<li><code>io.getquill.sources.sql.idiom.H2Dialect</code></li>\n<li><code>io.getquill.sources.sql.idiom.MySQLDialect</code></li>\n<li><code>io.getquill.sources.sql.idiom.PostgresDialect</code></li>\n</ul>\n<h4 id=\"Naming-strategy\"><a href=\"#Naming-strategy\" class=\"headerlink\" title=\"Naming strategy\"></a>Naming strategy</h4><p>The second type parameter defines the naming strategy to be used when translating identifiers (table and column names) to SQL.</p>\n<table>\n<thead>\n<tr>\n<th>strategy</th>\n<th>example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>io.getquill.naming.Literal</code></td>\n<td>some_ident  -&gt; some_ident</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.Escape</code></td>\n<td>some_ident  -&gt; “some_ident”</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.UpperCase</code></td>\n<td>some_ident  -&gt; SOME_IDENT</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.LowerCase</code></td>\n<td>SOME_IDENT  -&gt; some_ident</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.SnakeCase</code></td>\n<td>someIdent   -&gt; some_ident</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.CamelCase</code></td>\n<td>some_ident  -&gt; someIdent</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.MysqlEscape</code></td>\n<td>some_ident  -&gt; `some_ident`</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.PostgresEscape</code></td>\n<td>$some_ident -&gt; $some_ident</td>\n</tr>\n</tbody>\n</table>\n<p>Multiple transformations can be defined using mixin. For instance, the naming strategy</p>\n<figure class=\"highlight plain\"><figcaption><span>with UpperCase```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">produces the following transformation:</span><br><span class=\"line\"></span><br><span class=\"line\">```someIdent -&gt; SOME_IDENT</span><br></pre></td></tr></table></figure>\n<p>The transformations are applied from left to right.</p>\n<h4 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h4><p>The string passed to the source configuration is used as the key to obtain configurations using the <a href=\"http://github.com/typesafehub/config\" target=\"_blank\" rel=\"noopener\">typesafe config</a> library.</p>\n<p>Additionally, any member of a source configuration can be overriden. Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import io.getquill._</span><br><span class=\"line\">import io.getquill.naming.SnakeCase</span><br><span class=\"line\">import io.getquill.sources.sql.idiom.MySQLDialect</span><br><span class=\"line\"></span><br><span class=\"line\">lazy val db = source(new JdbcSourceConfig[MySQLDialect, SnakeCase](&quot;db&quot;) &#123;</span><br><span class=\"line\">  override def dataSource = ??? // create the datasource manually</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"quill-jdbc\"><a href=\"#quill-jdbc\" class=\"headerlink\" title=\"quill-jdbc\"></a>quill-jdbc</h5><p>Quill uses <a href=\"https://github.com/brettwooldridge/HikariCP\" target=\"_blank\" rel=\"noopener\">HikariCP</a> for connection pooling. Please refer to HikariCP’s <a href=\"https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby\" target=\"_blank\" rel=\"noopener\">documentation</a> for a detailed explanation of the available configurations.</p>\n<p>Note that there are <code>dataSource</code> configurations, that go under <code>dataSource</code>, like <code>user</code> and <code>password</code>, but some pool settings may go under the root config, like <code>connectionTimeout</code>.</p>\n<p><strong>MySQL</strong></p>\n<p>sbt dependencies<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libraryDependencies ++= Seq(</span><br><span class=\"line\">  &quot;mysql&quot; % &quot;mysql-connector-java&quot; % &quot;5.1.36&quot;,</span><br><span class=\"line\">  &quot;io.getquill&quot; %% &quot;quill-jdbc&quot; % &quot;0.7.1-SNAPSHOT&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>source definition<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.sources.sql.idiom.<span class=\"type\">MySQLDialect</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">JdbcSourceConfig</span>[<span class=\"type\">MySQLDialect</span>, <span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p>application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.dataSourceClassName=com.mysql.jdbc.jdbc2.optional.MysqlDataSource</span><br><span class=\"line\">db.dataSource.url=jdbc:mysql://host/database</span><br><span class=\"line\">db.dataSource.user=root</span><br><span class=\"line\">db.dataSource.password=root</span><br><span class=\"line\">db.dataSource.cachePrepStmts=true</span><br><span class=\"line\">db.dataSource.prepStmtCacheSize=250</span><br><span class=\"line\">db.dataSource.prepStmtCacheSqlLimit=2048</span><br><span class=\"line\">db.connectionTimeout=30000</span><br></pre></td></tr></table></figure></p>\n<p><strong>Postgres</strong></p>\n<p>sbt dependencies<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libraryDependencies ++= Seq(</span><br><span class=\"line\">  &quot;org.postgresql&quot; % &quot;postgresql&quot; % &quot;9.4-1206-jdbc41&quot;,</span><br><span class=\"line\">  &quot;io.getquill&quot; %% &quot;quill-jdbc&quot; % &quot;0.7.1-SNAPSHOT&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>source definition<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.sources.sql.idiom.<span class=\"type\">PostgresDialect</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">JdbcSourceConfig</span>[<span class=\"type\">PostgresDialect</span>, <span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p>application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.dataSourceClassName=org.postgresql.ds.PGSimpleDataSource</span><br><span class=\"line\">db.dataSource.user=root</span><br><span class=\"line\">db.dataSource.password=root</span><br><span class=\"line\">db.dataSource.databaseName=database</span><br><span class=\"line\">db.dataSource.portNumber=5432</span><br><span class=\"line\">db.dataSource.serverName=host</span><br><span class=\"line\">db.connectionTimeout=30000</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"quill-async\"><a href=\"#quill-async\" class=\"headerlink\" title=\"quill-async\"></a>quill-async</h5><p><strong>MySQL Async</strong></p>\n<p>sbt dependencies<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libraryDependencies ++= Seq(</span><br><span class=\"line\">  &quot;io.getquill&quot; %% &quot;quill-async&quot; % &quot;0.7.1-SNAPSHOT&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>source definition<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">MysqlAsyncSourceConfig</span>[<span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p>application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.host=host</span><br><span class=\"line\">db.port=3306</span><br><span class=\"line\">db.user=root</span><br><span class=\"line\">db.password=root</span><br><span class=\"line\">db.database=database</span><br><span class=\"line\">db.poolMaxQueueSize=4</span><br><span class=\"line\">db.poolMaxObjects=4</span><br><span class=\"line\">db.poolMaxIdle=999999999</span><br><span class=\"line\">db.poolValidationInterval=100</span><br></pre></td></tr></table></figure></p>\n<p><strong>Postgres Async</strong></p>\n<p>sbt dependencies<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libraryDependencies ++= Seq(</span><br><span class=\"line\">  &quot;io.getquill&quot; %% &quot;quill-async&quot; % &quot;0.7.1-SNAPSHOT&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>source definition<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">PostgresAsyncSourceConfig</span>[<span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p>application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.host=host</span><br><span class=\"line\">db.port=5432</span><br><span class=\"line\">db.user=root</span><br><span class=\"line\">db.password=root</span><br><span class=\"line\">db.database=database</span><br><span class=\"line\">db.poolMaxQueueSize=4</span><br><span class=\"line\">db.poolMaxObjects=4</span><br><span class=\"line\">db.poolMaxIdle=999999999</span><br><span class=\"line\">db.poolValidationInterval=100</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"quill-finagle-mysql\"><a href=\"#quill-finagle-mysql\" class=\"headerlink\" title=\"quill-finagle-mysql\"></a>quill-finagle-mysql</h5><p>sbt dependencies<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libraryDependencies ++= Seq(</span><br><span class=\"line\">  &quot;io.getquill&quot; %% &quot;quill-finagle-mysql&quot; % &quot;0.7.1-SNAPSHOT&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>source definition<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">FinagleMysqlSourceConfig</span>[<span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p>application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.dest=localhost:3306</span><br><span class=\"line\">db.user=root</span><br><span class=\"line\">db.password=root</span><br><span class=\"line\">db.database=database</span><br><span class=\"line\">db.pool.watermark.low=0</span><br><span class=\"line\">db.pool.watermark.high=10</span><br><span class=\"line\">db.pool.idleTime=5 # seconds</span><br><span class=\"line\">db.pool.bufferSize=0</span><br><span class=\"line\">db.pool.maxWaiters=2147483647</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Cassandra-Sources\"><a href=\"#Cassandra-Sources\" class=\"headerlink\" title=\"Cassandra Sources\"></a>Cassandra Sources</h2><p>sbt dependencies<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libraryDependencies ++= Seq(</span><br><span class=\"line\">  &quot;io.getquill&quot; %% &quot;quill-cassandra&quot; % &quot;0.7.1-SNAPSHOT&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p><strong>synchronous source</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">CassandraSyncSourceConfig</span>[<span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p><strong>asynchronous source</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">CassandraAsyncSourceConfig</span>[<span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p><strong>stream source</strong><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.getquill._</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.getquill.naming.<span class=\"type\">SnakeCase</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> db = source(<span class=\"keyword\">new</span> <span class=\"type\">CassandraStreamSourceConfig</span>[<span class=\"type\">SnakeCase</span>](<span class=\"string\">\"db\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p>The configurations are set using runtime reflection on the <a href=\"https://docs.datastax.com/en/drivers/java/2.1/com/datastax/driver/core/Cluster.Builder.html\" target=\"_blank\" rel=\"noopener\"><code>Cluster.builder</code></a> instance. It is possible to set nested structures like <code>queryOptions.consistencyLevel</code>, use enum values like <code>LOCAL_QUORUM</code>, and set multiple parameters like in <code>credentials</code>.</p>\n<p>application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.keyspace=quill_test</span><br><span class=\"line\">db.preparedStatementCacheSize=1000</span><br><span class=\"line\">db.session.contactPoint=127.0.0.1</span><br><span class=\"line\">db.session.queryOptions.consistencyLevel=LOCAL_QUORUM</span><br><span class=\"line\">db.session.withoutMetrics=true</span><br><span class=\"line\">db.session.withoutJMXReporting=false</span><br><span class=\"line\">db.session.credentials.0=root</span><br><span class=\"line\">db.session.credentials.1=pass</span><br><span class=\"line\">db.session.maxSchemaAgreementWaitSeconds=1</span><br><span class=\"line\">db.session.addressTranslater=com.datastax.driver.core.policies.IdentityTranslater</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Additional-resources\"><a href=\"#Additional-resources\" class=\"headerlink\" title=\"Additional resources\"></a>Additional resources</h1><h2 id=\"Templates\"><a href=\"#Templates\" class=\"headerlink\" title=\"Templates\"></a>Templates</h2><p>In order to quickly start with Quill, we have setup some template projects:</p>\n<ul>\n<li><a href=\"https://github.com/getquill/play-quill-jdbc\" target=\"_blank\" rel=\"noopener\">Play Framework with Quill JDBC</a></li>\n</ul>\n<h2 id=\"Slick-comparison\"><a href=\"#Slick-comparison\" class=\"headerlink\" title=\"Slick comparison\"></a>Slick comparison</h2><p>Please refer to <a href=\"https://github.com/getquill/quill/blob/master/SLICK.md\" target=\"_blank\" rel=\"noopener\">SLICK.md</a> for a detailed comparison between Quill and Slick.</p>\n<h2 id=\"Cassandra-libraries-comparison\"><a href=\"#Cassandra-libraries-comparison\" class=\"headerlink\" title=\"Cassandra libraries comparison\"></a>Cassandra libraries comparison</h2><p>Please refer to <a href=\"https://github.com/getquill/quill/blob/master/CASSANDRA.md\" target=\"_blank\" rel=\"noopener\">CASSANDRA.md</a> for a detailed comparison between Quill and other main alternatives for interaction with Cassandra in Scala.</p>\n<h2 id=\"Code-of-Conduct\"><a href=\"#Code-of-Conduct\" class=\"headerlink\" title=\"Code of Conduct\"></a>Code of Conduct</h2><p>Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. See <a href=\"https://github.com/getquill/quill/blob/master/CODE_OF_CONDUCT.md\" target=\"_blank\" rel=\"noopener\">CODE_OF_CONDUCT.md</a> for details.</p>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><p>See the <a href=\"https://github.com/getquill/quill/blob/master/LICENSE.txt\" target=\"_blank\" rel=\"noopener\">LICENSE</a> file for details.</p>\n<h1 id=\"Maintainers\"><a href=\"#Maintainers\" class=\"headerlink\" title=\"Maintainers\"></a>Maintainers</h1><ul>\n<li>@fwbrasil</li>\n<li>@godenji</li>\n<li>@gustavoamigo</li>\n<li>@jilen</li>\n<li>@lvicentesanchez</li>\n</ul>\n<p>You can notify all maintainers using the handle <code>@getquill/maintainers</code>.</p>\n<h1 id=\"Acknowledgments\"><a href=\"#Acknowledgments\" class=\"headerlink\" title=\"Acknowledgments\"></a>Acknowledgments</h1><p>The project was created having Philip Wadler’s talk <a href=\"http://www.infoq.com/presentations/theory-language-integrated-query\" target=\"_blank\" rel=\"noopener\">“A practical theory of language-integrated query”</a> as its initial inspiration. The development was heavily influenced by the following papers:</p>\n<ul>\n<li><a href=\"http://homepages.inf.ed.ac.uk/slindley/papers/practical-theory-of-linq.pdf\" target=\"_blank\" rel=\"noopener\">A Practical Theory of Language-Integrated Query</a></li>\n<li><a href=\"http://homepages.inf.ed.ac.uk/wadler/papers/qdsl/qdsl.pdf\" target=\"_blank\" rel=\"noopener\">Everything old is new again: Quoted Domain Specific Languages</a></li>\n<li><a href=\"http://db.inf.uni-tuebingen.de/staticfiles/publications/the-flatter-the-better.pdf\" target=\"_blank\" rel=\"noopener\">The Flatter, the Better</a></li>\n</ul>\n"},{"title":"后端工程师入门前端页面重构（二）：心法 I：修改版","_content":"\n上一篇博客我们介绍了布局的口诀，并且说明使用浮动布局是高效的。\n\n这篇博客我们介绍如何去写一个简单的浮动布局。\n\n想要去写一个布局，基础的「HTML」标签和基础「CSS」是必须要掌握的。\n\n下面我们开始来学习基础的 HTML 和 CSS。\n\n## 基础的 HTML 和 CSS\n\n### 什么是 HTML\n\n首先我们有一个问题：什么是 HTML？\n\n简单来说， HTML 是一门编程语言。浏览器可以读取HTML文件，并将其渲染成可视化网页。\n\n说到编程语言，大家可能觉得很难，要学很多东西。但是对于 HTML 来说，你根本不需要担心，它唯一的语法就是「标签」。而且标签往往是成对出现的，\n\n它们往往以\n<code>  \n\n        <xxx> \n</code>开头，\n\n以\n<code> \n\n    </xxx> \n\n</code>结束\n\nHTML的标签有很多，但是我们这篇文章只会用到几个HTML标签，不用担心，我会告诉你们它们的用法的。\n\n而且我后期会有专门的一两篇文章来专门讲解 HTML 标签的具体用法，大家先不用捉急啦！\n\n如果你很急切的想了解 HTML 标签的使用，可以参考 [W3C HTML 参考手册](http://www.w3school.com.cn/tags/index.asp)\n\n下面跟着我一起学习一下基础的 HTML\n\n### 简单的 HTML 标签\n\n首先我们需要新建一个以 「.html」结尾的文件，然后使用编辑器打开它，编辑里面的内容即可。当然一开始什么都没有啦。\n\n在一个 HTML文件中，文本需要使用「html」作为根元素，在 html 标签的里面需要使用「head」标签和「body」标签来把网页的头部和主体内容分隔开。\n\n在 head 标签内，我们嵌套使用「title」标签来声明本网页的主题。\n\n在 body 标签内，我们可以写入网页的具体内容，当然也可以嵌套其它的标签。\n\n在写完上面的内容，我们需要在文本的最上方添加「 <!DOCTYPE html> 」来告诉浏览器，我们使用的哪个版本的 HTML。\n\n这里的 <!DOCTYPE html> 表示我们告诉浏览器我们使用的「HTML5」版本\n\n来来来，代码敲一波！\n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>这是网页的主题</title>\n    </head>\n    <body>\n        这是网页的内容\n        \n        <!-- 这里是注释的内容 -->\n    </body>\n    </html>\n    \n</code>\n\n代码写完后，我们使用「浏览器」打开我们的文件，就会看到如下的效果啦。\n \n![一个最简单的网页](/image/back-2-font-xinfa-1/simple-html.jpg)\n \n看完效果图后，我们发现，原来注释是不显示在网页上面的。\n\n在本篇文章中，我们只会用到表示区块的「div」标签和表示文本内容的「span」标签。\n\n来来来，让我们敲一波代码，看看这个两个标签怎么用。\n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>div和span标签的使用</title>\n    </head>\n    <body>\n    \t<div>这是div标签里面的内容</div>\n    \t<span>这是span标签的内容</span>\n    </body>\n    </html>\n\n</code>\n\n![div和span标签使用的效果图](/image/back-2-font-xinfa-1/div-span-show.jpg)\n\n是不是感觉很简单呢？你们学会了吗？\n\n\n### 什么是 CSS\n\n在上面的网页中，我们只有文字，没有绚丽的背景和缤纷的颜色。这怎么能满足我们设计如诗如画布局的需求呢？\n\n这就要使用到另一门编程语言，叫做「CSS」。\n\n那么什么是 CSS 呢？\n\n简单来说，CSS 就是给 HTML 标签添加背景、颜色等样式的一种语言，它也是被 「浏览器」 解析的。\n\nCSS 要完全学会，还是有一点难度的。不过不要捉急啦。在这篇中，我们只要会使用CSS给我们的标签设置背景颜色，高度和宽度即可。\n\n后续我会在「招式篇」中陆续的给出一些 CSS 的用法和最佳实践，大家敬请期待哦！\n\n下面就跟着我来学一些简单的 CSS 吧。\n\n### 一些简单的 CSS 使用\n\n#### 第一个问题：我们在哪里写 CSS？ 重新建一个 .css 文件吗\n\n新建一个.css文件当然是可以的，但这种方式适合大型的项目。我们现在是学习，不需要那么麻烦。\n\n我们直接在 HTML 文件的 head 标签里插入如下代码即可\n\n<code>\n\n        <head>\n        \t<title>div和span标签的使用</title>\n        \t<style type=\"text/css\">\n        \t\t这里是我们写 CSS 代码的地方\n        \t</style>\n        </head>   \n        \n</code>\n\n#### 第二个问题：如何让 CSS 给我们的标签添加样式\n\n这其实是一个如何让 CSS 和我们的 HTML 标签绑定的问题。绑定的方法有很多，我们这篇文章里面使用「class」选择器。\n\nclass 选择器你可能现在还不明白，按照我们的套路，先不用管它。如果你很迫切的想了解，可以参考[W3C CSS 选择器](http://www.w3school.com.cn/css/css_selector_type.asp)\n\n我们首先需要为 HTML 标签添加一个 class 属性，并且设置属性的值，如下面的代码：\n\n<code>\n    \n    <div class=\"div\">这是div标签里面的内容</div>\n    <span class=\"element\">这是span标签的内容</span>\n\n</code>\n\n然后我们在 CSS 代码里面使用「 . 」+对应的 class 的「属性值」来选中我们设置的 class，代码如下：\n\n<code>\n    \n    <style type=\"text/css\">\n    \t\t.div{\n    \t\t\t/*选中我们的设置class=\"div\"*/\t\n    \t\t}\n    \n    \t\t.element{\n    \t\t\t/*选中我们的设置class=\"element\"*/\t\n    \t\t}\n    </style>\n</code>\n\n在 CSS 里面，我们可以使用 「/**/」来添加注释。\n\n#### 第三个问题：如何给元素设置背景颜色，高度和宽度\n* 设置背景颜色使用：background-color: red(指定颜色)\n* 设置高度使用：height: 300px(指定高度的值为300px);\n* 设置宽度使用：width: 300px(指定宽度的值为300px);\n\n我们现在按照上面方法来给我们的 div 和 element（它们是class选择器，和标签没有关系哦） 设置背景颜色，高度和宽度，代码如下:\n\n<code>\n\n    <style type=\"text/css\">\n\t\t.div{\n\t\t\tbackground-color: red;\n\t\t\theight: 300px;\n\t\t\twidth: 300px;\n\t\t\t/*选中我们的设置class=\"div\"*/\t\n\t\t}\n\n\t\t.element{\n\t\t\tbackground-color: green;\n\t\t\theight: 400px;\n\t\t\twidth: 400px;\n\t\t\t/*选中我们的设置class=\"element\"*/\t\n\t\t}\n\t</style>\n\n</code>\n\n然后完整的 HTML + CSS 代码如下。来来来，代码敲一波！\n\n<code>\n    \n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>div和span标签的使用</title>\n    \t<style type=\"text/css\">\n    \t\t.div{\n    \t\t\tbackground-color: red;\n    \t\t\theight: 300px;\n    \t\t\twidth: 300px;\n    \t\t\t/*选中我们的设置class=\"div\"*/\t\n    \t\t}\n    \n    \t\t.element{\n    \t\t\tbackground-color: green;\n    \t\t\theight: 400px;\n    \t\t\twidth: 400px;\n    \t\t\t/*选中我们的设置class=\"element\"*/\t\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div\">这是div标签里面的内容</div>\n    \t<span class=\"element\">这是span标签的内容</span>\n    </body>\n    </html>\n</code>\n\n让我们使用浏览器打开这个文件看效果：\n\n![CSS+HTML 效果图](/image/back-2-font-xinfa-1/html-css-show.jpg)\n\n有了背景颜色和形状，是不是很美呢？\n\n哈哈！先别急嘛，只要把我的博客完整的看完，如诗如画的布局不是梦！\n\n等一下，我们的代码是不是有问题啊？\n\n为什么我们设置了 span 标签的高度和宽度，为什么它还是只有一行的高度呢？\n\n这就要归根于 HTML 的元素种类了。想要知道原因，我们接着往下看。\n\n### HTML 块状元素和行内元素\n\n在 HTML 中，我们可以把标签分为块状元素和行内元素，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。\n\n* 块状元素的标签还有：p、ul、ol等。\n\n* 行内元素的标签还有：img、code、input等。\n\n\n\n那么块状元素和行内元素有什么区别呢？\n\n从我们的代码的效果图里面我们已经看出来一个区别了：**块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。**\n\n我们再来写一段代码试试，我们使用我们熟悉的 div 标签和 span 标签来演示。\n\n我们把上面代码的高度和宽度注释掉，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。\n\n来来来，代码走一波！\n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>div和span标签的使用</title>\n    \t<style type=\"text/css\">\n    \t\t.div{\n    \t\t\tbackground-color: red;\n    \t\t\t/*height: 300px;*/\n    \t\t\t/*width: 300px;*/\n    \t\t\t/*选中我们的设置class=\"div\"*/\t\n    \t\t}\n    \n    \t\t.element{\n    \t\t\tbackground-color: green;\n    \t\t\t/*height: 400px;*/\n    \t\t\t/*width: 400px;*/\n    \t\t\t/*选中我们的设置class=\"element\"*/\t\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div\">这是div标签里面的内容</div>\n    \t<span class=\"element\">这是span标签的内容</span>\n    </body>\n    </html>\n</code>\n\n![效果图](/image/back-2-font-xinfa-1/block-inline-elemet.jpg)\n\n是不是又看出来一个区别呢？\n\n**块状元素是独占一行的，而相邻的行内元素会排在同一行。**\n\n看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。\n\n![效果图](/image/back-2-font-xinfa-1/block-element.jpg)\n\n**即使我们设置了块状元素的高度和宽度，它还是独占一行的**。真的是霸道啊！\n\n如果不会使用谷歌浏览器检查网页的同学，可以参考[如何使用谷歌浏览器检查页面。](https://jingyan.baidu.com/article/2f9b480db6cde741ca6cc246.html)\n\n\n说了这么多，我好像还是没有教你们如何去写一个浮动布局。\n\n咳咳，下面正式开始。\n\n\n## 为什么要使用浮动布局\n\n在开始之前，我们按照套路，还是要问一个问题：为什么要使用浮动布局，仅仅是因为它是高效的？\n\n答案当然是否定的。\n\n在上面的我们分析了块状元素是独占一行的，但是在页面布局的时候，往往都是要求许多块状元素是在一行的。\n\n怎么解决这个问题呢？\n\n解决问题有两种方案：\n* 我们可以使用 CSS 把块状元素变成行内元素\n* 我们使用浮动\n\n对于第一种方案，我们直接否定！**因为它存在误差！**\n下面我们使用今天学的 HTML 和 CSS 来写一段代码有误差的代码： \n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>使用行内元素是有误差的</title>\n    \t<style type=\"text/css\">\n    \t\t.div-1{\n    \t\t\tbackground-color: red;\n    \t\t\t/*让其作为行内元素显示*/\n    \t\t\tdisplay: inline-block;\n    \t\t\t\n    \t\t}\n    \n    \t\t.div-2{\n    \t\t\tbackground-color: green;\n    \t\t\t/*让其作为行内元素显示*/\n    \t\t\tdisplay:inline-block;\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div-1\">123</div>\n    \t<div class=\"div-2\">123</div>\n    </body>\n    </html>\n</code>\n\n上面的这段代码，我们使用块状元素 div 写了两个区块，并且使用 \n<code>\n\n    display:inline-block; \n</code> \n\n让块状元素 div 来作为行内元素显示，然后我们来看效果：\n\n![行内元素误差效果显示](/image/back-2-font-xinfa-1/inline-element-error.jpg)\n\n我们发现**虽然两个 div 可以变成行内元素在一行显示，但是他们之间还是存在空白，不能完美的相邻在一起。**\n\n这点空白会给我们布局带来很大的麻烦，这就是我们为什么选择浮动布局的原因。\n\n选择浮动布局的原因知道了，下面我们来写一个浮动布局吧。\n\n真的开始写喽，不是骗你们的！\n\n\n## 一个简单的浮动布局\n\n首先我们画两个 div，并且设置它们的背景颜色，高度以及宽度，代码如下：\n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n       \n<code/>\n\n打开浏览器看效果是这个样子滴：\n\n![浮动之前的效果图](/image/back-2-font-xinfa-1/float-layout.jpg)\n\n这个效果很正常嘛。 div 作为很霸道的块状元素，当然占据一整行，两个 div 就分别占据两行喽。\n\n下面我们就要使用浮动了，注意看清楚哦！\n\n我们只要在上面代码中 div 的 class 选择器里面添加如下代码即可实现浮动。\n\n<code>\n\n    float: left;\n</code>\n\n来来来，完整代码走一波！\n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n                /*设置为浮动*/\n                float: left;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n                /*设置为浮动*/\n                float: left;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n</code>\n\n然后我们用浏览器打开看效果：\n\n![简单浮动效果图](/image/back-2-font-xinfa-1/float-layout-show-1.png)\n\n我们发现两个原本很难相邻在一起的块状元素，竟然完美的 **无缝** 的相邻在一起。\n\n浮动的布局是不是很简单呢？我们只要添加 「 float: left;」即可实现浮动。你们学会了吗？\n\n现在让我们重新来看一下「 float: left;」这段代码。\n\n我们都知道「 float 」这个字是指定使用浮动的关键字，但是「 left 」是干嘛用的？难道还是指定 right？\n\n当然可以啦。left 的意思是指定左浮动，意思是让元素悬浮在浏览器的左边，right就是相反的意思，让元素悬浮在浏览器的右边。\n\n来来来，让我们把上面代码中的 left 变成right，代码再走一波!\n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n                /*设置为浮动*/\n                float: right;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n                /*设置为浮动*/\n                float: right;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n</code>\n\n让我们打开浏览器看效果！\n\n![右浮动效果图](/image/back-2-font-xinfa-1/float-right.jpg)\n\n是不是被浮动的结果吓了一跳呢？设置浮动的元素竟然都跑到右边去了。\n\n到了这里，关于怎么写浮动，我想你们应该已经会了。下面我们来看一个问题，要跟着我的思路走哦。\n\n还是回到我们之前设置的左浮动的页面。我们可以使用谷歌浏览器来检查一下它们的高度和宽度，和我们设置的完全一样。\n\n这段代码没问题。\n\n![](/image/back-2-font-xinfa-1/div-show-height.png)\n\n## 还是一个简单的浮动布局\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>还是一个简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                float: left;\n                background: red;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                float: left;\n                background: green;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"block-1\">\n                我是第一个子元素\n            </div>\n    \n            <div class=\"block-2\">\n                我是第二个子元素\n            </div>\n        </div>\n    </body>\n    </html>\n    \n</code>\n\n![效果图](/image/back-2-font-xinfa-1/float-layout-show-2.png)\n\n这段代码还是很简单，我们还是使用　DIV　标签画了两个　200 * 200　区块，和之前代码的唯一区别在于\n\n这两个区块被一个「父区块 parent」包含着。\n\n这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。\n\n![](/image/back-2-font-xinfa-1/second-check-child.png)\n\n子元素宽度和高度都是 OK 的。\n\n我们再来看看它父元素高度和宽度。\n\n![](/image/back-2-font-xinfa-1/parent-check.png)\n\n我去！父元素的高度竟然是 **０**！！　我是不是安装了假的浏览器？\n\n解铃还须系铃人，要想知道原因，我们需要去了解一下　DIV　标签和「浮动」的之间的关系。\n\n\n## 这也是一个简单的浮动布局\n\n还是一个很简单的布局，我们有三个DIV区块，分别为「first」、「second」、「third」它们父区块「parent」包含着\n\n并且设置三个DIV区块为左浮动的。\n\n代码如下：\n<code>\n    \n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>清除浮动演示</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n        </div>\n    </body>\n    </html>\n    \n</code>\n\n![效果图](/image/back-2-font-xinfa-1/div-float-1.png)\n\n\n我们使用谷歌浏览器来检查一下，发现子元素的高度和宽度和设置的值一样，但是父元素高度还是为０。\n\n![](/image/back-2-font-xinfa-1/origin-parent-height.png)\n\n\n现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做？\n\n这就要使用到另一个招式 「清除浮动」\n\n我们只要在第三块区块的「.third」中添加\n<code>\n\n    clear: left;\n</code> \n\n即可。\n\n来来来，代码敲一波：\n\n<code>\n    \n    <!DOCTYPE html>\n        <html>\n        <head>\n            <title>清除浮动演示</title>\n            <style type=\"text/css\">\n                .first{\n                    background: red;\n                    width: 200px;\n                    height: 200px;\n                    float: left;\n                }\n                .second{\n                    background: yellow;\n                    width: 200px;\n                    float: left;\n                    height: 200px;\n        \n                }\n                .third{\n                    float: left;\n                    background: green;\n                    width: 200px;\n                    height: 200px;\n                    clear: left;\n                }\n            </style>\n        </head>\n        <body>\n            <div class=\"parent\">\n                <div class=\"first\">\n                    第一个区块\n                </div>\n        \n                <div class=\"second\">\n                    第二个区块\n                </div>\n        \n                <div class=\"third\">\n                    第三个区块\n                </div>\n            </div>\n        </body>\n        </html>\n\n</code>\n\n话不多说，让我们先看效果。\n\n![添加 clear: left;的效果图](/image/back-2-font-xinfa-1/add-clear-left-1.png)\n\n真的把第三个区块给压下来了！\n\n\n\n还是按照上面的套路，我们来分析这段代码「 clear: left; 」：\n\n它用到的关键字是「 clear 」，它的含义是清除。\n\n而 「 left 」 代表是左边。\n\n那么它合起来的意思是：**清除左边的浮动元素**。\n\n说到更明白一点就是：**不让当前元素的左边有浮动元素。**\n\n当前元素是第三个区块，它的左边有两个浮动元素 first 和second 。\n\n那这段代码的意思就是：**不让第三个区块左边有浮动元素**，那浏览器这么处理呢？\n\n浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到 **下一行** 来吧！”\n\n于是第三个区块就到了下一行啦。  \n\n虽然有点复杂，但是按照上面思路进行一步步分解，是不是就变的很简单呢？\n\n让我们再来拓展一下，clear 除了可以设置为 left,还可以设置为 「 right 」 和 「 both 」。\n\n我相信不用我说你们也明白了吧！\n\nright 就是不让当前元素 **右边** 存在浮动元素嘛。\n\n那 both 就是不让当前元素的 **两边** 出现浮动元素喽。\n\n说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！\n\n这个有点尴尬！\n\n## 父元素高度真的需要吗？\n\n![](/image/back-2-font-xinfa-1/clear-float-parent.png)\n\n那么，在解决之前，按照我们的套路，我们要问一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。\n\n我的实习导师告诉我：“这是不行的。**浮动布局的占位空间往往是我们理想的父元素高度。**”\n\n他说的太抽象，我们来说的直白一点：\n\n「在布局中我们往往使用浮动布局来实现某一块区域的布局」。\n\n「然后我们最好用一个DIV去包裹整个浮动布局，用于和其它的布局区分开」。\n\n「最后我们要求这个父DIV和高度要和浮动布局的高度一样」。\n\n对于上面的三点内容，前两点我们已经做到了。在上面的代码中，我们使用「parent」包裹着「first」、「second」、「third」，并且\n\n而且它们都是浮动的。\n\n想要解决第三个问题，就是使用我们上面讲的招式-**清除浮动**。\n\n我们在父区块最后面增加一个空的DIV,将它设置它为「 clear:both 」。\n\n为什么要这么使用呢，具体的原因我也讲不清楚，大概是这样的吧：\n\n因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受 **任何** 浮动元素干扰,我们必须清除浮动对它的干扰。\n\n注意哦！最后一个元素不是浮动的哦。\n\n来来来，代码走一波！\n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS的前世今生</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n            .last{\n                clear: both;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n            <div class=\"last\">\n    \n            </div>\n        </div>\n    </body>\n    </html>\n\n</code>\n\n然后我们会发现，父元素竟然有高度了，而且和浮动布局的高度是一样的！\n\n![父元素有高度了](/image/back-2-font-xinfa-1/parrent-height.png)\n\n哈哈，到了这里，我们已经完全解决父元素高度为 0 的问题，那么我想问：\n\n上面的解决方法是最好的吗？\n\n\n## 清除浮动－最佳实践\n\n按照套路，我们得问一个问题：上面的解决方案有问题吗？\n\n回答是肯定的！\n\n因为按照上面的方法，我们需要在 **手动** 在每个父区块最后添加一个空的 DIV，这样的做法是 **低效的**！\n\n因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。\n\n我们可不可以在某个地方统一定义，然后全局使用呢？就像Java一样，一次编译，到处运行。\n\n哈哈哈，程序员都喜欢偷懒，我也不例外。回答是当然可以啦。\n\n这个要使用到另一个新的招式-CSS 的「伪类」,伪类的具体用法可以参考[W3C的CSS伪类教程。](http://www.w3school.com.cn/css/css_pseudo_elements.asp)\n\n我们这里使用的是「after」伪类，它可以自动的在某个父元素的最后一行添加最后一个子元素，并且设置属性。\n\n上面的话有点拗口，来来来，我们直接上代码分析：\n\n<code>\n    \n    .parent:after{\n        /*设置最后一个元素的内容为空*/\n        content: \"\";\n        /*设置最后一个元素为清除两边浮动*/\n        clear: both;\n        /*设置最后一个元素为块状元素*/\n        display: block;\n    }\n\n</code>\n\n上面的代码会自动在「parent」作用的标签的最后一行添加一个子元素，并且设置该元素为「块状元素」「内容为空」以及「清除浮动」。\n\n是不是很神奇呢？我们可以使用 CSS 自动的添加元素。并且设置其属性。\n\n那么还有一个问题，如何让上面的这个代码被所有的父元素共享呢？\n\n这个很简单啦，只要把需要样式的父元素的 class属性设置值为 「parent」，那么就可以直接使用啦。\n\n来来来，让我们完整的敲一次代码！\n\n<code>\n    \n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS最佳实践</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n    \n            /*\n              伪类\n             */\n            .parent:after{\n                /*设置最后一个元素的内容为空*/\n                content: \"\";\n                /*设置最后一个元素为清除两边浮动*/\n                clear: both;\n                /*设置最后一个元素为块状元素*/\n                display: block;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n    \n        </div>\n    </body>\n    </html>\n    \n</code>\n\n![使用最佳实践-伪类后的效果图](/image/back-2-font-xinfa-1/div-float-after.png)\n\n## 你说的都是真的吗\n\n从头到尾说了这么多，有的同学或许会问，你说的都是真的吗？，那些大型网站的页面都是按照你说的这么设计的的吗？\n\n我读书少，你可别骗我。\n\n不信？\n\n我们去看看一些大型网站的页面的浮动布局的设计代码。\n\n我们先看豆瓣的\n\n![使用after](/image/back-2-font-xinfa-1/douban-1.jpg)\n\n![使用after+浮动布局](/image/back-2-font-xinfa-1/douban-2.jpg)\n\n我们再看看天猫的\n\n![使用after](/image/back-2-font-xinfa-1/tianmao-1.jpg)\n![使用after+浮动布局](/image/back-2-font-xinfa-1/tianmao-2.jpg)\n\n哈哈，我可没有骗你们哦！大型网站都是这么用的，而且貌似高手都使用 「float:right;」呢！\n\n\n最后，我们再来回顾一下，这篇文章从如何写一个 HTML 网页开始，到浮动布局，最后以清除浮动和最佳实践收尾。\n\n可以让一个连 HTML 都不会写的小白慢慢的窥视到大型网页设计的理念。\n\n中间有一些招式可能说的太粗糙。不要捉急嘛，我们先学心法。招式到后面慢慢再学习。\n\n这篇文章结束喽，不要太想我哦！我会在下一篇博文继续介绍心法 II\n\n","source":"_drafts/xinfa-1/back-2-font-xinfa-1-2.0.md","raw":"\n---\ntitle: 后端工程师入门前端页面重构（二）：心法 I：修改版\n---\n\n上一篇博客我们介绍了布局的口诀，并且说明使用浮动布局是高效的。\n\n这篇博客我们介绍如何去写一个简单的浮动布局。\n\n想要去写一个布局，基础的「HTML」标签和基础「CSS」是必须要掌握的。\n\n下面我们开始来学习基础的 HTML 和 CSS。\n\n## 基础的 HTML 和 CSS\n\n### 什么是 HTML\n\n首先我们有一个问题：什么是 HTML？\n\n简单来说， HTML 是一门编程语言。浏览器可以读取HTML文件，并将其渲染成可视化网页。\n\n说到编程语言，大家可能觉得很难，要学很多东西。但是对于 HTML 来说，你根本不需要担心，它唯一的语法就是「标签」。而且标签往往是成对出现的，\n\n它们往往以\n<code>  \n\n        <xxx> \n</code>开头，\n\n以\n<code> \n\n    </xxx> \n\n</code>结束\n\nHTML的标签有很多，但是我们这篇文章只会用到几个HTML标签，不用担心，我会告诉你们它们的用法的。\n\n而且我后期会有专门的一两篇文章来专门讲解 HTML 标签的具体用法，大家先不用捉急啦！\n\n如果你很急切的想了解 HTML 标签的使用，可以参考 [W3C HTML 参考手册](http://www.w3school.com.cn/tags/index.asp)\n\n下面跟着我一起学习一下基础的 HTML\n\n### 简单的 HTML 标签\n\n首先我们需要新建一个以 「.html」结尾的文件，然后使用编辑器打开它，编辑里面的内容即可。当然一开始什么都没有啦。\n\n在一个 HTML文件中，文本需要使用「html」作为根元素，在 html 标签的里面需要使用「head」标签和「body」标签来把网页的头部和主体内容分隔开。\n\n在 head 标签内，我们嵌套使用「title」标签来声明本网页的主题。\n\n在 body 标签内，我们可以写入网页的具体内容，当然也可以嵌套其它的标签。\n\n在写完上面的内容，我们需要在文本的最上方添加「 <!DOCTYPE html> 」来告诉浏览器，我们使用的哪个版本的 HTML。\n\n这里的 <!DOCTYPE html> 表示我们告诉浏览器我们使用的「HTML5」版本\n\n来来来，代码敲一波！\n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>这是网页的主题</title>\n    </head>\n    <body>\n        这是网页的内容\n        \n        <!-- 这里是注释的内容 -->\n    </body>\n    </html>\n    \n</code>\n\n代码写完后，我们使用「浏览器」打开我们的文件，就会看到如下的效果啦。\n \n![一个最简单的网页](/image/back-2-font-xinfa-1/simple-html.jpg)\n \n看完效果图后，我们发现，原来注释是不显示在网页上面的。\n\n在本篇文章中，我们只会用到表示区块的「div」标签和表示文本内容的「span」标签。\n\n来来来，让我们敲一波代码，看看这个两个标签怎么用。\n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>div和span标签的使用</title>\n    </head>\n    <body>\n    \t<div>这是div标签里面的内容</div>\n    \t<span>这是span标签的内容</span>\n    </body>\n    </html>\n\n</code>\n\n![div和span标签使用的效果图](/image/back-2-font-xinfa-1/div-span-show.jpg)\n\n是不是感觉很简单呢？你们学会了吗？\n\n\n### 什么是 CSS\n\n在上面的网页中，我们只有文字，没有绚丽的背景和缤纷的颜色。这怎么能满足我们设计如诗如画布局的需求呢？\n\n这就要使用到另一门编程语言，叫做「CSS」。\n\n那么什么是 CSS 呢？\n\n简单来说，CSS 就是给 HTML 标签添加背景、颜色等样式的一种语言，它也是被 「浏览器」 解析的。\n\nCSS 要完全学会，还是有一点难度的。不过不要捉急啦。在这篇中，我们只要会使用CSS给我们的标签设置背景颜色，高度和宽度即可。\n\n后续我会在「招式篇」中陆续的给出一些 CSS 的用法和最佳实践，大家敬请期待哦！\n\n下面就跟着我来学一些简单的 CSS 吧。\n\n### 一些简单的 CSS 使用\n\n#### 第一个问题：我们在哪里写 CSS？ 重新建一个 .css 文件吗\n\n新建一个.css文件当然是可以的，但这种方式适合大型的项目。我们现在是学习，不需要那么麻烦。\n\n我们直接在 HTML 文件的 head 标签里插入如下代码即可\n\n<code>\n\n        <head>\n        \t<title>div和span标签的使用</title>\n        \t<style type=\"text/css\">\n        \t\t这里是我们写 CSS 代码的地方\n        \t</style>\n        </head>   \n        \n</code>\n\n#### 第二个问题：如何让 CSS 给我们的标签添加样式\n\n这其实是一个如何让 CSS 和我们的 HTML 标签绑定的问题。绑定的方法有很多，我们这篇文章里面使用「class」选择器。\n\nclass 选择器你可能现在还不明白，按照我们的套路，先不用管它。如果你很迫切的想了解，可以参考[W3C CSS 选择器](http://www.w3school.com.cn/css/css_selector_type.asp)\n\n我们首先需要为 HTML 标签添加一个 class 属性，并且设置属性的值，如下面的代码：\n\n<code>\n    \n    <div class=\"div\">这是div标签里面的内容</div>\n    <span class=\"element\">这是span标签的内容</span>\n\n</code>\n\n然后我们在 CSS 代码里面使用「 . 」+对应的 class 的「属性值」来选中我们设置的 class，代码如下：\n\n<code>\n    \n    <style type=\"text/css\">\n    \t\t.div{\n    \t\t\t/*选中我们的设置class=\"div\"*/\t\n    \t\t}\n    \n    \t\t.element{\n    \t\t\t/*选中我们的设置class=\"element\"*/\t\n    \t\t}\n    </style>\n</code>\n\n在 CSS 里面，我们可以使用 「/**/」来添加注释。\n\n#### 第三个问题：如何给元素设置背景颜色，高度和宽度\n* 设置背景颜色使用：background-color: red(指定颜色)\n* 设置高度使用：height: 300px(指定高度的值为300px);\n* 设置宽度使用：width: 300px(指定宽度的值为300px);\n\n我们现在按照上面方法来给我们的 div 和 element（它们是class选择器，和标签没有关系哦） 设置背景颜色，高度和宽度，代码如下:\n\n<code>\n\n    <style type=\"text/css\">\n\t\t.div{\n\t\t\tbackground-color: red;\n\t\t\theight: 300px;\n\t\t\twidth: 300px;\n\t\t\t/*选中我们的设置class=\"div\"*/\t\n\t\t}\n\n\t\t.element{\n\t\t\tbackground-color: green;\n\t\t\theight: 400px;\n\t\t\twidth: 400px;\n\t\t\t/*选中我们的设置class=\"element\"*/\t\n\t\t}\n\t</style>\n\n</code>\n\n然后完整的 HTML + CSS 代码如下。来来来，代码敲一波！\n\n<code>\n    \n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>div和span标签的使用</title>\n    \t<style type=\"text/css\">\n    \t\t.div{\n    \t\t\tbackground-color: red;\n    \t\t\theight: 300px;\n    \t\t\twidth: 300px;\n    \t\t\t/*选中我们的设置class=\"div\"*/\t\n    \t\t}\n    \n    \t\t.element{\n    \t\t\tbackground-color: green;\n    \t\t\theight: 400px;\n    \t\t\twidth: 400px;\n    \t\t\t/*选中我们的设置class=\"element\"*/\t\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div\">这是div标签里面的内容</div>\n    \t<span class=\"element\">这是span标签的内容</span>\n    </body>\n    </html>\n</code>\n\n让我们使用浏览器打开这个文件看效果：\n\n![CSS+HTML 效果图](/image/back-2-font-xinfa-1/html-css-show.jpg)\n\n有了背景颜色和形状，是不是很美呢？\n\n哈哈！先别急嘛，只要把我的博客完整的看完，如诗如画的布局不是梦！\n\n等一下，我们的代码是不是有问题啊？\n\n为什么我们设置了 span 标签的高度和宽度，为什么它还是只有一行的高度呢？\n\n这就要归根于 HTML 的元素种类了。想要知道原因，我们接着往下看。\n\n### HTML 块状元素和行内元素\n\n在 HTML 中，我们可以把标签分为块状元素和行内元素，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。\n\n* 块状元素的标签还有：p、ul、ol等。\n\n* 行内元素的标签还有：img、code、input等。\n\n\n\n那么块状元素和行内元素有什么区别呢？\n\n从我们的代码的效果图里面我们已经看出来一个区别了：**块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。**\n\n我们再来写一段代码试试，我们使用我们熟悉的 div 标签和 span 标签来演示。\n\n我们把上面代码的高度和宽度注释掉，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。\n\n来来来，代码走一波！\n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>div和span标签的使用</title>\n    \t<style type=\"text/css\">\n    \t\t.div{\n    \t\t\tbackground-color: red;\n    \t\t\t/*height: 300px;*/\n    \t\t\t/*width: 300px;*/\n    \t\t\t/*选中我们的设置class=\"div\"*/\t\n    \t\t}\n    \n    \t\t.element{\n    \t\t\tbackground-color: green;\n    \t\t\t/*height: 400px;*/\n    \t\t\t/*width: 400px;*/\n    \t\t\t/*选中我们的设置class=\"element\"*/\t\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div\">这是div标签里面的内容</div>\n    \t<span class=\"element\">这是span标签的内容</span>\n    </body>\n    </html>\n</code>\n\n![效果图](/image/back-2-font-xinfa-1/block-inline-elemet.jpg)\n\n是不是又看出来一个区别呢？\n\n**块状元素是独占一行的，而相邻的行内元素会排在同一行。**\n\n看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。\n\n![效果图](/image/back-2-font-xinfa-1/block-element.jpg)\n\n**即使我们设置了块状元素的高度和宽度，它还是独占一行的**。真的是霸道啊！\n\n如果不会使用谷歌浏览器检查网页的同学，可以参考[如何使用谷歌浏览器检查页面。](https://jingyan.baidu.com/article/2f9b480db6cde741ca6cc246.html)\n\n\n说了这么多，我好像还是没有教你们如何去写一个浮动布局。\n\n咳咳，下面正式开始。\n\n\n## 为什么要使用浮动布局\n\n在开始之前，我们按照套路，还是要问一个问题：为什么要使用浮动布局，仅仅是因为它是高效的？\n\n答案当然是否定的。\n\n在上面的我们分析了块状元素是独占一行的，但是在页面布局的时候，往往都是要求许多块状元素是在一行的。\n\n怎么解决这个问题呢？\n\n解决问题有两种方案：\n* 我们可以使用 CSS 把块状元素变成行内元素\n* 我们使用浮动\n\n对于第一种方案，我们直接否定！**因为它存在误差！**\n下面我们使用今天学的 HTML 和 CSS 来写一段代码有误差的代码： \n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>使用行内元素是有误差的</title>\n    \t<style type=\"text/css\">\n    \t\t.div-1{\n    \t\t\tbackground-color: red;\n    \t\t\t/*让其作为行内元素显示*/\n    \t\t\tdisplay: inline-block;\n    \t\t\t\n    \t\t}\n    \n    \t\t.div-2{\n    \t\t\tbackground-color: green;\n    \t\t\t/*让其作为行内元素显示*/\n    \t\t\tdisplay:inline-block;\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div-1\">123</div>\n    \t<div class=\"div-2\">123</div>\n    </body>\n    </html>\n</code>\n\n上面的这段代码，我们使用块状元素 div 写了两个区块，并且使用 \n<code>\n\n    display:inline-block; \n</code> \n\n让块状元素 div 来作为行内元素显示，然后我们来看效果：\n\n![行内元素误差效果显示](/image/back-2-font-xinfa-1/inline-element-error.jpg)\n\n我们发现**虽然两个 div 可以变成行内元素在一行显示，但是他们之间还是存在空白，不能完美的相邻在一起。**\n\n这点空白会给我们布局带来很大的麻烦，这就是我们为什么选择浮动布局的原因。\n\n选择浮动布局的原因知道了，下面我们来写一个浮动布局吧。\n\n真的开始写喽，不是骗你们的！\n\n\n## 一个简单的浮动布局\n\n首先我们画两个 div，并且设置它们的背景颜色，高度以及宽度，代码如下：\n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n       \n<code/>\n\n打开浏览器看效果是这个样子滴：\n\n![浮动之前的效果图](/image/back-2-font-xinfa-1/float-layout.jpg)\n\n这个效果很正常嘛。 div 作为很霸道的块状元素，当然占据一整行，两个 div 就分别占据两行喽。\n\n下面我们就要使用浮动了，注意看清楚哦！\n\n我们只要在上面代码中 div 的 class 选择器里面添加如下代码即可实现浮动。\n\n<code>\n\n    float: left;\n</code>\n\n来来来，完整代码走一波！\n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n                /*设置为浮动*/\n                float: left;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n                /*设置为浮动*/\n                float: left;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n</code>\n\n然后我们用浏览器打开看效果：\n\n![简单浮动效果图](/image/back-2-font-xinfa-1/float-layout-show-1.png)\n\n我们发现两个原本很难相邻在一起的块状元素，竟然完美的 **无缝** 的相邻在一起。\n\n浮动的布局是不是很简单呢？我们只要添加 「 float: left;」即可实现浮动。你们学会了吗？\n\n现在让我们重新来看一下「 float: left;」这段代码。\n\n我们都知道「 float 」这个字是指定使用浮动的关键字，但是「 left 」是干嘛用的？难道还是指定 right？\n\n当然可以啦。left 的意思是指定左浮动，意思是让元素悬浮在浏览器的左边，right就是相反的意思，让元素悬浮在浏览器的右边。\n\n来来来，让我们把上面代码中的 left 变成right，代码再走一波!\n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n                /*设置为浮动*/\n                float: right;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n                /*设置为浮动*/\n                float: right;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n</code>\n\n让我们打开浏览器看效果！\n\n![右浮动效果图](/image/back-2-font-xinfa-1/float-right.jpg)\n\n是不是被浮动的结果吓了一跳呢？设置浮动的元素竟然都跑到右边去了。\n\n到了这里，关于怎么写浮动，我想你们应该已经会了。下面我们来看一个问题，要跟着我的思路走哦。\n\n还是回到我们之前设置的左浮动的页面。我们可以使用谷歌浏览器来检查一下它们的高度和宽度，和我们设置的完全一样。\n\n这段代码没问题。\n\n![](/image/back-2-font-xinfa-1/div-show-height.png)\n\n## 还是一个简单的浮动布局\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>还是一个简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                float: left;\n                background: red;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                float: left;\n                background: green;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"block-1\">\n                我是第一个子元素\n            </div>\n    \n            <div class=\"block-2\">\n                我是第二个子元素\n            </div>\n        </div>\n    </body>\n    </html>\n    \n</code>\n\n![效果图](/image/back-2-font-xinfa-1/float-layout-show-2.png)\n\n这段代码还是很简单，我们还是使用　DIV　标签画了两个　200 * 200　区块，和之前代码的唯一区别在于\n\n这两个区块被一个「父区块 parent」包含着。\n\n这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。\n\n![](/image/back-2-font-xinfa-1/second-check-child.png)\n\n子元素宽度和高度都是 OK 的。\n\n我们再来看看它父元素高度和宽度。\n\n![](/image/back-2-font-xinfa-1/parent-check.png)\n\n我去！父元素的高度竟然是 **０**！！　我是不是安装了假的浏览器？\n\n解铃还须系铃人，要想知道原因，我们需要去了解一下　DIV　标签和「浮动」的之间的关系。\n\n\n## 这也是一个简单的浮动布局\n\n还是一个很简单的布局，我们有三个DIV区块，分别为「first」、「second」、「third」它们父区块「parent」包含着\n\n并且设置三个DIV区块为左浮动的。\n\n代码如下：\n<code>\n    \n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>清除浮动演示</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n        </div>\n    </body>\n    </html>\n    \n</code>\n\n![效果图](/image/back-2-font-xinfa-1/div-float-1.png)\n\n\n我们使用谷歌浏览器来检查一下，发现子元素的高度和宽度和设置的值一样，但是父元素高度还是为０。\n\n![](/image/back-2-font-xinfa-1/origin-parent-height.png)\n\n\n现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做？\n\n这就要使用到另一个招式 「清除浮动」\n\n我们只要在第三块区块的「.third」中添加\n<code>\n\n    clear: left;\n</code> \n\n即可。\n\n来来来，代码敲一波：\n\n<code>\n    \n    <!DOCTYPE html>\n        <html>\n        <head>\n            <title>清除浮动演示</title>\n            <style type=\"text/css\">\n                .first{\n                    background: red;\n                    width: 200px;\n                    height: 200px;\n                    float: left;\n                }\n                .second{\n                    background: yellow;\n                    width: 200px;\n                    float: left;\n                    height: 200px;\n        \n                }\n                .third{\n                    float: left;\n                    background: green;\n                    width: 200px;\n                    height: 200px;\n                    clear: left;\n                }\n            </style>\n        </head>\n        <body>\n            <div class=\"parent\">\n                <div class=\"first\">\n                    第一个区块\n                </div>\n        \n                <div class=\"second\">\n                    第二个区块\n                </div>\n        \n                <div class=\"third\">\n                    第三个区块\n                </div>\n            </div>\n        </body>\n        </html>\n\n</code>\n\n话不多说，让我们先看效果。\n\n![添加 clear: left;的效果图](/image/back-2-font-xinfa-1/add-clear-left-1.png)\n\n真的把第三个区块给压下来了！\n\n\n\n还是按照上面的套路，我们来分析这段代码「 clear: left; 」：\n\n它用到的关键字是「 clear 」，它的含义是清除。\n\n而 「 left 」 代表是左边。\n\n那么它合起来的意思是：**清除左边的浮动元素**。\n\n说到更明白一点就是：**不让当前元素的左边有浮动元素。**\n\n当前元素是第三个区块，它的左边有两个浮动元素 first 和second 。\n\n那这段代码的意思就是：**不让第三个区块左边有浮动元素**，那浏览器这么处理呢？\n\n浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到 **下一行** 来吧！”\n\n于是第三个区块就到了下一行啦。  \n\n虽然有点复杂，但是按照上面思路进行一步步分解，是不是就变的很简单呢？\n\n让我们再来拓展一下，clear 除了可以设置为 left,还可以设置为 「 right 」 和 「 both 」。\n\n我相信不用我说你们也明白了吧！\n\nright 就是不让当前元素 **右边** 存在浮动元素嘛。\n\n那 both 就是不让当前元素的 **两边** 出现浮动元素喽。\n\n说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！\n\n这个有点尴尬！\n\n## 父元素高度真的需要吗？\n\n![](/image/back-2-font-xinfa-1/clear-float-parent.png)\n\n那么，在解决之前，按照我们的套路，我们要问一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。\n\n我的实习导师告诉我：“这是不行的。**浮动布局的占位空间往往是我们理想的父元素高度。**”\n\n他说的太抽象，我们来说的直白一点：\n\n「在布局中我们往往使用浮动布局来实现某一块区域的布局」。\n\n「然后我们最好用一个DIV去包裹整个浮动布局，用于和其它的布局区分开」。\n\n「最后我们要求这个父DIV和高度要和浮动布局的高度一样」。\n\n对于上面的三点内容，前两点我们已经做到了。在上面的代码中，我们使用「parent」包裹着「first」、「second」、「third」，并且\n\n而且它们都是浮动的。\n\n想要解决第三个问题，就是使用我们上面讲的招式-**清除浮动**。\n\n我们在父区块最后面增加一个空的DIV,将它设置它为「 clear:both 」。\n\n为什么要这么使用呢，具体的原因我也讲不清楚，大概是这样的吧：\n\n因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受 **任何** 浮动元素干扰,我们必须清除浮动对它的干扰。\n\n注意哦！最后一个元素不是浮动的哦。\n\n来来来，代码走一波！\n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS的前世今生</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n            .last{\n                clear: both;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n            <div class=\"last\">\n    \n            </div>\n        </div>\n    </body>\n    </html>\n\n</code>\n\n然后我们会发现，父元素竟然有高度了，而且和浮动布局的高度是一样的！\n\n![父元素有高度了](/image/back-2-font-xinfa-1/parrent-height.png)\n\n哈哈，到了这里，我们已经完全解决父元素高度为 0 的问题，那么我想问：\n\n上面的解决方法是最好的吗？\n\n\n## 清除浮动－最佳实践\n\n按照套路，我们得问一个问题：上面的解决方案有问题吗？\n\n回答是肯定的！\n\n因为按照上面的方法，我们需要在 **手动** 在每个父区块最后添加一个空的 DIV，这样的做法是 **低效的**！\n\n因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。\n\n我们可不可以在某个地方统一定义，然后全局使用呢？就像Java一样，一次编译，到处运行。\n\n哈哈哈，程序员都喜欢偷懒，我也不例外。回答是当然可以啦。\n\n这个要使用到另一个新的招式-CSS 的「伪类」,伪类的具体用法可以参考[W3C的CSS伪类教程。](http://www.w3school.com.cn/css/css_pseudo_elements.asp)\n\n我们这里使用的是「after」伪类，它可以自动的在某个父元素的最后一行添加最后一个子元素，并且设置属性。\n\n上面的话有点拗口，来来来，我们直接上代码分析：\n\n<code>\n    \n    .parent:after{\n        /*设置最后一个元素的内容为空*/\n        content: \"\";\n        /*设置最后一个元素为清除两边浮动*/\n        clear: both;\n        /*设置最后一个元素为块状元素*/\n        display: block;\n    }\n\n</code>\n\n上面的代码会自动在「parent」作用的标签的最后一行添加一个子元素，并且设置该元素为「块状元素」「内容为空」以及「清除浮动」。\n\n是不是很神奇呢？我们可以使用 CSS 自动的添加元素。并且设置其属性。\n\n那么还有一个问题，如何让上面的这个代码被所有的父元素共享呢？\n\n这个很简单啦，只要把需要样式的父元素的 class属性设置值为 「parent」，那么就可以直接使用啦。\n\n来来来，让我们完整的敲一次代码！\n\n<code>\n    \n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS最佳实践</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n    \n            /*\n              伪类\n             */\n            .parent:after{\n                /*设置最后一个元素的内容为空*/\n                content: \"\";\n                /*设置最后一个元素为清除两边浮动*/\n                clear: both;\n                /*设置最后一个元素为块状元素*/\n                display: block;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n    \n        </div>\n    </body>\n    </html>\n    \n</code>\n\n![使用最佳实践-伪类后的效果图](/image/back-2-font-xinfa-1/div-float-after.png)\n\n## 你说的都是真的吗\n\n从头到尾说了这么多，有的同学或许会问，你说的都是真的吗？，那些大型网站的页面都是按照你说的这么设计的的吗？\n\n我读书少，你可别骗我。\n\n不信？\n\n我们去看看一些大型网站的页面的浮动布局的设计代码。\n\n我们先看豆瓣的\n\n![使用after](/image/back-2-font-xinfa-1/douban-1.jpg)\n\n![使用after+浮动布局](/image/back-2-font-xinfa-1/douban-2.jpg)\n\n我们再看看天猫的\n\n![使用after](/image/back-2-font-xinfa-1/tianmao-1.jpg)\n![使用after+浮动布局](/image/back-2-font-xinfa-1/tianmao-2.jpg)\n\n哈哈，我可没有骗你们哦！大型网站都是这么用的，而且貌似高手都使用 「float:right;」呢！\n\n\n最后，我们再来回顾一下，这篇文章从如何写一个 HTML 网页开始，到浮动布局，最后以清除浮动和最佳实践收尾。\n\n可以让一个连 HTML 都不会写的小白慢慢的窥视到大型网页设计的理念。\n\n中间有一些招式可能说的太粗糙。不要捉急嘛，我们先学心法。招式到后面慢慢再学习。\n\n这篇文章结束喽，不要太想我哦！我会在下一篇博文继续介绍心法 II\n\n","slug":"xinfa-1/back-2-font-xinfa-1-2.0","published":0,"date":"2018-02-18T08:12:37.445Z","updated":"2018-02-18T08:12:37.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpk70007mc559dheq0yw","content":"<p>上一篇博客我们介绍了布局的口诀，并且说明使用浮动布局是高效的。</p>\n<p>这篇博客我们介绍如何去写一个简单的浮动布局。</p>\n<p>想要去写一个布局，基础的「HTML」标签和基础「CSS」是必须要掌握的。</p>\n<p>下面我们开始来学习基础的 HTML 和 CSS。</p>\n<h2 id=\"基础的-HTML-和-CSS\"><a href=\"#基础的-HTML-和-CSS\" class=\"headerlink\" title=\"基础的 HTML 和 CSS\"></a>基础的 HTML 和 CSS</h2><h3 id=\"什么是-HTML\"><a href=\"#什么是-HTML\" class=\"headerlink\" title=\"什么是 HTML\"></a>什么是 HTML</h3><p>首先我们有一个问题：什么是 HTML？</p>\n<p>简单来说， HTML 是一门编程语言。浏览器可以读取HTML文件，并将其渲染成可视化网页。</p>\n<p>说到编程语言，大家可能觉得很难，要学很多东西。但是对于 HTML 来说，你根本不需要担心，它唯一的语法就是「标签」。而且标签往往是成对出现的，</p>\n<p>它们往往以<br><code>  </code></p>\n<pre><code>&lt;xxx&gt; \n</code></pre><p>开头，</p>\n<p>以<br><code> </code></p>\n<pre><code>&lt;/xxx&gt; \n</code></pre><p>结束</p>\n<p>HTML的标签有很多，但是我们这篇文章只会用到几个HTML标签，不用担心，我会告诉你们它们的用法的。</p>\n<p>而且我后期会有专门的一两篇文章来专门讲解 HTML 标签的具体用法，大家先不用捉急啦！</p>\n<p>如果你很急切的想了解 HTML 标签的使用，可以参考 <a href=\"http://www.w3school.com.cn/tags/index.asp\" target=\"_blank\" rel=\"noopener\">W3C HTML 参考手册</a></p>\n<p>下面跟着我一起学习一下基础的 HTML</p>\n<h3 id=\"简单的-HTML-标签\"><a href=\"#简单的-HTML-标签\" class=\"headerlink\" title=\"简单的 HTML 标签\"></a>简单的 HTML 标签</h3><p>首先我们需要新建一个以 「.html」结尾的文件，然后使用编辑器打开它，编辑里面的内容即可。当然一开始什么都没有啦。</p>\n<p>在一个 HTML文件中，文本需要使用「html」作为根元素，在 html 标签的里面需要使用「head」标签和「body」标签来把网页的头部和主体内容分隔开。</p>\n<p>在 head 标签内，我们嵌套使用「title」标签来声明本网页的主题。</p>\n<p>在 body 标签内，我们可以写入网页的具体内容，当然也可以嵌套其它的标签。</p>\n<p>在写完上面的内容，我们需要在文本的最上方添加「 &lt;!DOCTYPE html&gt; 」来告诉浏览器，我们使用的哪个版本的 HTML。</p>\n<p>这里的 &lt;!DOCTYPE html&gt; 表示我们告诉浏览器我们使用的「HTML5」版本</p>\n<p>来来来，代码敲一波！</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;这是网页的主题&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    这是网页的内容\n\n    &lt;!-- 这里是注释的内容 --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p>代码写完后，我们使用「浏览器」打开我们的文件，就会看到如下的效果啦。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/simple-html.jpg\" alt=\"一个最简单的网页\"></p>\n<p>看完效果图后，我们发现，原来注释是不显示在网页上面的。</p>\n<p>在本篇文章中，我们只会用到表示区块的「div」标签和表示文本内容的「span」标签。</p>\n<p>来来来，让我们敲一波代码，看看这个两个标签怎么用。</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;div和span标签的使用&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div&gt;这是div标签里面的内容&lt;/div&gt;\n    &lt;span&gt;这是span标签的内容&lt;/span&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-span-show.jpg\" alt=\"div和span标签使用的效果图\"></p>\n<p>是不是感觉很简单呢？你们学会了吗？</p>\n<h3 id=\"什么是-CSS\"><a href=\"#什么是-CSS\" class=\"headerlink\" title=\"什么是 CSS\"></a>什么是 CSS</h3><p>在上面的网页中，我们只有文字，没有绚丽的背景和缤纷的颜色。这怎么能满足我们设计如诗如画布局的需求呢？</p>\n<p>这就要使用到另一门编程语言，叫做「CSS」。</p>\n<p>那么什么是 CSS 呢？</p>\n<p>简单来说，CSS 就是给 HTML 标签添加背景、颜色等样式的一种语言，它也是被 「浏览器」 解析的。</p>\n<p>CSS 要完全学会，还是有一点难度的。不过不要捉急啦。在这篇中，我们只要会使用CSS给我们的标签设置背景颜色，高度和宽度即可。</p>\n<p>后续我会在「招式篇」中陆续的给出一些 CSS 的用法和最佳实践，大家敬请期待哦！</p>\n<p>下面就跟着我来学一些简单的 CSS 吧。</p>\n<h3 id=\"一些简单的-CSS-使用\"><a href=\"#一些简单的-CSS-使用\" class=\"headerlink\" title=\"一些简单的 CSS 使用\"></a>一些简单的 CSS 使用</h3><h4 id=\"第一个问题：我们在哪里写-CSS？-重新建一个-css-文件吗\"><a href=\"#第一个问题：我们在哪里写-CSS？-重新建一个-css-文件吗\" class=\"headerlink\" title=\"第一个问题：我们在哪里写 CSS？ 重新建一个 .css 文件吗\"></a>第一个问题：我们在哪里写 CSS？ 重新建一个 .css 文件吗</h4><p>新建一个.css文件当然是可以的，但这种方式适合大型的项目。我们现在是学习，不需要那么麻烦。</p>\n<p>我们直接在 HTML 文件的 head 标签里插入如下代码即可</p>\n<p><code></code></p>\n<pre><code>&lt;head&gt;\n    &lt;title&gt;div和span标签的使用&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        这里是我们写 CSS 代码的地方\n    &lt;/style&gt;\n&lt;/head&gt;   \n</code></pre><p></p>\n<h4 id=\"第二个问题：如何让-CSS-给我们的标签添加样式\"><a href=\"#第二个问题：如何让-CSS-给我们的标签添加样式\" class=\"headerlink\" title=\"第二个问题：如何让 CSS 给我们的标签添加样式\"></a>第二个问题：如何让 CSS 给我们的标签添加样式</h4><p>这其实是一个如何让 CSS 和我们的 HTML 标签绑定的问题。绑定的方法有很多，我们这篇文章里面使用「class」选择器。</p>\n<p>class 选择器你可能现在还不明白，按照我们的套路，先不用管它。如果你很迫切的想了解，可以参考<a href=\"http://www.w3school.com.cn/css/css_selector_type.asp\" target=\"_blank\" rel=\"noopener\">W3C CSS 选择器</a></p>\n<p>我们首先需要为 HTML 标签添加一个 class 属性，并且设置属性的值，如下面的代码：</p>\n<p><code></code></p>\n<pre><code>&lt;div class=&quot;div&quot;&gt;这是div标签里面的内容&lt;/div&gt;\n&lt;span class=&quot;element&quot;&gt;这是span标签的内容&lt;/span&gt;\n</code></pre><p></p>\n<p>然后我们在 CSS 代码里面使用「 . 」+对应的 class 的「属性值」来选中我们设置的 class，代码如下：</p>\n<p><code></code></p>\n<pre><code>&lt;style type=&quot;text/css&quot;&gt;\n        .div{\n            /*选中我们的设置class=&quot;div&quot;*/    \n        }\n\n        .element{\n            /*选中我们的设置class=&quot;element&quot;*/    \n        }\n&lt;/style&gt;\n</code></pre><p></p>\n<p>在 CSS 里面，我们可以使用 「/**/」来添加注释。</p>\n<h4 id=\"第三个问题：如何给元素设置背景颜色，高度和宽度\"><a href=\"#第三个问题：如何给元素设置背景颜色，高度和宽度\" class=\"headerlink\" title=\"第三个问题：如何给元素设置背景颜色，高度和宽度\"></a>第三个问题：如何给元素设置背景颜色，高度和宽度</h4><ul>\n<li>设置背景颜色使用：background-color: red(指定颜色)</li>\n<li>设置高度使用：height: 300px(指定高度的值为300px);</li>\n<li>设置宽度使用：width: 300px(指定宽度的值为300px);</li>\n</ul>\n<p>我们现在按照上面方法来给我们的 div 和 element（它们是class选择器，和标签没有关系哦） 设置背景颜色，高度和宽度，代码如下:</p>\n<p><code></code></p>\n<pre><code>&lt;style type=&quot;text/css&quot;&gt;\n    .div{\n        background-color: red;\n        height: 300px;\n        width: 300px;\n        /*选中我们的设置class=&quot;div&quot;*/    \n    }\n\n    .element{\n        background-color: green;\n        height: 400px;\n        width: 400px;\n        /*选中我们的设置class=&quot;element&quot;*/    \n    }\n&lt;/style&gt;\n</code></pre><p></p>\n<p>然后完整的 HTML + CSS 代码如下。来来来，代码敲一波！</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;div和span标签的使用&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .div{\n            background-color: red;\n            height: 300px;\n            width: 300px;\n            /*选中我们的设置class=&quot;div&quot;*/    \n        }\n\n        .element{\n            background-color: green;\n            height: 400px;\n            width: 400px;\n            /*选中我们的设置class=&quot;element&quot;*/    \n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;div&quot;&gt;这是div标签里面的内容&lt;/div&gt;\n    &lt;span class=&quot;element&quot;&gt;这是span标签的内容&lt;/span&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p>让我们使用浏览器打开这个文件看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/html-css-show.jpg\" alt=\"CSS+HTML 效果图\"></p>\n<p>有了背景颜色和形状，是不是很美呢？</p>\n<p>哈哈！先别急嘛，只要把我的博客完整的看完，如诗如画的布局不是梦！</p>\n<p>等一下，我们的代码是不是有问题啊？</p>\n<p>为什么我们设置了 span 标签的高度和宽度，为什么它还是只有一行的高度呢？</p>\n<p>这就要归根于 HTML 的元素种类了。想要知道原因，我们接着往下看。</p>\n<h3 id=\"HTML-块状元素和行内元素\"><a href=\"#HTML-块状元素和行内元素\" class=\"headerlink\" title=\"HTML 块状元素和行内元素\"></a>HTML 块状元素和行内元素</h3><p>在 HTML 中，我们可以把标签分为块状元素和行内元素，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。</p>\n<ul>\n<li><p>块状元素的标签还有：p、ul、ol等。</p>\n</li>\n<li><p>行内元素的标签还有：img、code、input等。</p>\n</li>\n</ul>\n<p>那么块状元素和行内元素有什么区别呢？</p>\n<p>从我们的代码的效果图里面我们已经看出来一个区别了：<strong>块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。</strong></p>\n<p>我们再来写一段代码试试，我们使用我们熟悉的 div 标签和 span 标签来演示。</p>\n<p>我们把上面代码的高度和宽度注释掉，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。</p>\n<p>来来来，代码走一波！</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;div和span标签的使用&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .div{\n            background-color: red;\n            /*height: 300px;*/\n            /*width: 300px;*/\n            /*选中我们的设置class=&quot;div&quot;*/    \n        }\n\n        .element{\n            background-color: green;\n            /*height: 400px;*/\n            /*width: 400px;*/\n            /*选中我们的设置class=&quot;element&quot;*/    \n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;div&quot;&gt;这是div标签里面的内容&lt;/div&gt;\n    &lt;span class=&quot;element&quot;&gt;这是span标签的内容&lt;/span&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-inline-elemet.jpg\" alt=\"效果图\"></p>\n<p>是不是又看出来一个区别呢？</p>\n<p><strong>块状元素是独占一行的，而相邻的行内元素会排在同一行。</strong></p>\n<p>看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-element.jpg\" alt=\"效果图\"></p>\n<p><strong>即使我们设置了块状元素的高度和宽度，它还是独占一行的</strong>。真的是霸道啊！</p>\n<p>如果不会使用谷歌浏览器检查网页的同学，可以参考<a href=\"https://jingyan.baidu.com/article/2f9b480db6cde741ca6cc246.html\" target=\"_blank\" rel=\"noopener\">如何使用谷歌浏览器检查页面。</a></p>\n<p>说了这么多，我好像还是没有教你们如何去写一个浮动布局。</p>\n<p>咳咳，下面正式开始。</p>\n<h2 id=\"为什么要使用浮动布局\"><a href=\"#为什么要使用浮动布局\" class=\"headerlink\" title=\"为什么要使用浮动布局\"></a>为什么要使用浮动布局</h2><p>在开始之前，我们按照套路，还是要问一个问题：为什么要使用浮动布局，仅仅是因为它是高效的？</p>\n<p>答案当然是否定的。</p>\n<p>在上面的我们分析了块状元素是独占一行的，但是在页面布局的时候，往往都是要求许多块状元素是在一行的。</p>\n<p>怎么解决这个问题呢？</p>\n<p>解决问题有两种方案：</p>\n<ul>\n<li>我们可以使用 CSS 把块状元素变成行内元素</li>\n<li>我们使用浮动</li>\n</ul>\n<p>对于第一种方案，我们直接否定！<strong>因为它存在误差！</strong><br>下面我们使用今天学的 HTML 和 CSS 来写一段代码有误差的代码： </p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;使用行内元素是有误差的&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .div-1{\n            background-color: red;\n            /*让其作为行内元素显示*/\n            display: inline-block;\n\n        }\n\n        .div-2{\n            background-color: green;\n            /*让其作为行内元素显示*/\n            display:inline-block;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;div-1&quot;&gt;123&lt;/div&gt;\n    &lt;div class=&quot;div-2&quot;&gt;123&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p>上面的这段代码，我们使用块状元素 div 写了两个区块，并且使用<br><code></code></p>\n<pre><code>display:inline-block; \n</code></pre><p> </p>\n<p>让块状元素 div 来作为行内元素显示，然后我们来看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/inline-element-error.jpg\" alt=\"行内元素误差效果显示\"></p>\n<p>我们发现<strong>虽然两个 div 可以变成行内元素在一行显示，但是他们之间还是存在空白，不能完美的相邻在一起。</strong></p>\n<p>这点空白会给我们布局带来很大的麻烦，这就是我们为什么选择浮动布局的原因。</p>\n<p>选择浮动布局的原因知道了，下面我们来写一个浮动布局吧。</p>\n<p>真的开始写喽，不是骗你们的！</p>\n<h2 id=\"一个简单的浮动布局\"><a href=\"#一个简单的浮动布局\" class=\"headerlink\" title=\"一个简单的浮动布局\"></a>一个简单的浮动布局</h2><p>首先我们画两个 div，并且设置它们的背景颜色，高度以及宽度，代码如下：</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;简单的浮动布局&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .block-1{\n            width: 200px;\n            height: 200px;\n            background: red;\n        }\n\n        .block-2{\n            width: 200px;\n            height: 200px;\n            background: green;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div class=&quot;block-1&quot;&gt;\n    这是第一个区块\n&lt;/div&gt;\n\n&lt;div class=&quot;block-2&quot;&gt;\n    这是第二个区块\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p><code></code></p>\n<p>打开浏览器看效果是这个样子滴：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout.jpg\" alt=\"浮动之前的效果图\"></p>\n<p>这个效果很正常嘛。 div 作为很霸道的块状元素，当然占据一整行，两个 div 就分别占据两行喽。</p>\n<p>下面我们就要使用浮动了，注意看清楚哦！</p>\n<p>我们只要在上面代码中 div 的 class 选择器里面添加如下代码即可实现浮动。</p>\n<p><code></code></p>\n<pre><code>float: left;\n</code></pre><p></p>\n<p>来来来，完整代码走一波！</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;简单的浮动布局&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .block-1{\n            width: 200px;\n            height: 200px;\n            background: red;\n            /*设置为浮动*/\n            float: left;\n        }\n\n        .block-2{\n            width: 200px;\n            height: 200px;\n            background: green;\n            /*设置为浮动*/\n            float: left;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div class=&quot;block-1&quot;&gt;\n    这是第一个区块\n&lt;/div&gt;\n\n&lt;div class=&quot;block-2&quot;&gt;\n    这是第二个区块\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p>然后我们用浏览器打开看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-1.png\" alt=\"简单浮动效果图\"></p>\n<p>我们发现两个原本很难相邻在一起的块状元素，竟然完美的 <strong>无缝</strong> 的相邻在一起。</p>\n<p>浮动的布局是不是很简单呢？我们只要添加 「 float: left;」即可实现浮动。你们学会了吗？</p>\n<p>现在让我们重新来看一下「 float: left;」这段代码。</p>\n<p>我们都知道「 float 」这个字是指定使用浮动的关键字，但是「 left 」是干嘛用的？难道还是指定 right？</p>\n<p>当然可以啦。left 的意思是指定左浮动，意思是让元素悬浮在浏览器的左边，right就是相反的意思，让元素悬浮在浏览器的右边。</p>\n<p>来来来，让我们把上面代码中的 left 变成right，代码再走一波!</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;简单的浮动布局&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .block-1{\n            width: 200px;\n            height: 200px;\n            background: red;\n            /*设置为浮动*/\n            float: right;\n        }\n\n        .block-2{\n            width: 200px;\n            height: 200px;\n            background: green;\n            /*设置为浮动*/\n            float: right;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div class=&quot;block-1&quot;&gt;\n    这是第一个区块\n&lt;/div&gt;\n\n&lt;div class=&quot;block-2&quot;&gt;\n    这是第二个区块\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p>让我们打开浏览器看效果！</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-right.jpg\" alt=\"右浮动效果图\"></p>\n<p>是不是被浮动的结果吓了一跳呢？设置浮动的元素竟然都跑到右边去了。</p>\n<p>到了这里，关于怎么写浮动，我想你们应该已经会了。下面我们来看一个问题，要跟着我的思路走哦。</p>\n<p>还是回到我们之前设置的左浮动的页面。我们可以使用谷歌浏览器来检查一下它们的高度和宽度，和我们设置的完全一样。</p>\n<p>这段代码没问题。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-show-height.png\" alt=\"\"></p>\n<h2 id=\"还是一个简单的浮动布局\"><a href=\"#还是一个简单的浮动布局\" class=\"headerlink\" title=\"还是一个简单的浮动布局\"></a>还是一个简单的浮动布局</h2><p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;还是一个简单的浮动布局&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .block-1{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: red;\n        }\n\n        .block-2{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: green;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;block-1&quot;&gt;\n            我是第一个子元素\n        &lt;/div&gt;\n\n        &lt;div class=&quot;block-2&quot;&gt;\n            我是第二个子元素\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-2.png\" alt=\"效果图\"></p>\n<p>这段代码还是很简单，我们还是使用　DIV　标签画了两个　200 * 200　区块，和之前代码的唯一区别在于</p>\n<p>这两个区块被一个「父区块 parent」包含着。</p>\n<p>这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/second-check-child.png\" alt=\"\"></p>\n<p>子元素宽度和高度都是 OK 的。</p>\n<p>我们再来看看它父元素高度和宽度。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parent-check.png\" alt=\"\"></p>\n<p>我去！父元素的高度竟然是 <strong>０</strong>！！　我是不是安装了假的浏览器？</p>\n<p>解铃还须系铃人，要想知道原因，我们需要去了解一下　DIV　标签和「浮动」的之间的关系。</p>\n<h2 id=\"这也是一个简单的浮动布局\"><a href=\"#这也是一个简单的浮动布局\" class=\"headerlink\" title=\"这也是一个简单的浮动布局\"></a>这也是一个简单的浮动布局</h2><p>还是一个很简单的布局，我们有三个DIV区块，分别为「first」、「second」、「third」它们父区块「parent」包含着</p>\n<p>并且设置三个DIV区块为左浮动的。</p>\n<p>代码如下：<br><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;清除浮动演示&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            float: left;\n            background: green;\n            width: 200px;\n            height: 200px;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;first&quot;&gt;\n            第一个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;second&quot;&gt;\n            第二个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;third&quot;&gt;\n            第三个区块\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-1.png\" alt=\"效果图\"></p>\n<p>我们使用谷歌浏览器来检查一下，发现子元素的高度和宽度和设置的值一样，但是父元素高度还是为０。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/origin-parent-height.png\" alt=\"\"></p>\n<p>现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做？</p>\n<p>这就要使用到另一个招式 「清除浮动」</p>\n<p>我们只要在第三块区块的「.third」中添加<br><code></code></p>\n<pre><code>clear: left;\n</code></pre><p> </p>\n<p>即可。</p>\n<p>来来来，代码敲一波：</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;清除浮动演示&lt;/title&gt;\n        &lt;style type=&quot;text/css&quot;&gt;\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n\n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=&quot;parent&quot;&gt;\n            &lt;div class=&quot;first&quot;&gt;\n                第一个区块\n            &lt;/div&gt;\n\n            &lt;div class=&quot;second&quot;&gt;\n                第二个区块\n            &lt;/div&gt;\n\n            &lt;div class=&quot;third&quot;&gt;\n                第三个区块\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre><p></p>\n<p>话不多说，让我们先看效果。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/add-clear-left-1.png\" alt=\"添加 clear: left;的效果图\"></p>\n<p>真的把第三个区块给压下来了！</p>\n<p>还是按照上面的套路，我们来分析这段代码「 clear: left; 」：</p>\n<p>它用到的关键字是「 clear 」，它的含义是清除。</p>\n<p>而 「 left 」 代表是左边。</p>\n<p>那么它合起来的意思是：<strong>清除左边的浮动元素</strong>。</p>\n<p>说到更明白一点就是：<strong>不让当前元素的左边有浮动元素。</strong></p>\n<p>当前元素是第三个区块，它的左边有两个浮动元素 first 和second 。</p>\n<p>那这段代码的意思就是：<strong>不让第三个区块左边有浮动元素</strong>，那浏览器这么处理呢？</p>\n<p>浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到 <strong>下一行</strong> 来吧！”</p>\n<p>于是第三个区块就到了下一行啦。  </p>\n<p>虽然有点复杂，但是按照上面思路进行一步步分解，是不是就变的很简单呢？</p>\n<p>让我们再来拓展一下，clear 除了可以设置为 left,还可以设置为 「 right 」 和 「 both 」。</p>\n<p>我相信不用我说你们也明白了吧！</p>\n<p>right 就是不让当前元素 <strong>右边</strong> 存在浮动元素嘛。</p>\n<p>那 both 就是不让当前元素的 <strong>两边</strong> 出现浮动元素喽。</p>\n<p>说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！</p>\n<p>这个有点尴尬！</p>\n<h2 id=\"父元素高度真的需要吗？\"><a href=\"#父元素高度真的需要吗？\" class=\"headerlink\" title=\"父元素高度真的需要吗？\"></a>父元素高度真的需要吗？</h2><p><img src=\"/image/back-2-font-xinfa-1/clear-float-parent.png\" alt=\"\"></p>\n<p>那么，在解决之前，按照我们的套路，我们要问一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。</p>\n<p>我的实习导师告诉我：“这是不行的。<strong>浮动布局的占位空间往往是我们理想的父元素高度。</strong>”</p>\n<p>他说的太抽象，我们来说的直白一点：</p>\n<p>「在布局中我们往往使用浮动布局来实现某一块区域的布局」。</p>\n<p>「然后我们最好用一个DIV去包裹整个浮动布局，用于和其它的布局区分开」。</p>\n<p>「最后我们要求这个父DIV和高度要和浮动布局的高度一样」。</p>\n<p>对于上面的三点内容，前两点我们已经做到了。在上面的代码中，我们使用「parent」包裹着「first」、「second」、「third」，并且</p>\n<p>而且它们都是浮动的。</p>\n<p>想要解决第三个问题，就是使用我们上面讲的招式-<strong>清除浮动</strong>。</p>\n<p>我们在父区块最后面增加一个空的DIV,将它设置它为「 clear:both 」。</p>\n<p>为什么要这么使用呢，具体的原因我也讲不清楚，大概是这样的吧：</p>\n<p>因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受 <strong>任何</strong> 浮动元素干扰,我们必须清除浮动对它的干扰。</p>\n<p>注意哦！最后一个元素不是浮动的哦。</p>\n<p>来来来，代码走一波！</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;DIV和CSS的前世今生&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            float: left;\n            background: green;\n            width: 200px;\n            height: 200px;\n            clear: left;\n        }\n        .last{\n            clear: both;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;first&quot;&gt;\n            第一个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;second&quot;&gt;\n            第二个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;third&quot;&gt;\n            第三个区块\n        &lt;/div&gt;\n        &lt;div class=&quot;last&quot;&gt;\n\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p>然后我们会发现，父元素竟然有高度了，而且和浮动布局的高度是一样的！</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parrent-height.png\" alt=\"父元素有高度了\"></p>\n<p>哈哈，到了这里，我们已经完全解决父元素高度为 0 的问题，那么我想问：</p>\n<p>上面的解决方法是最好的吗？</p>\n<h2 id=\"清除浮动－最佳实践\"><a href=\"#清除浮动－最佳实践\" class=\"headerlink\" title=\"清除浮动－最佳实践\"></a>清除浮动－最佳实践</h2><p>按照套路，我们得问一个问题：上面的解决方案有问题吗？</p>\n<p>回答是肯定的！</p>\n<p>因为按照上面的方法，我们需要在 <strong>手动</strong> 在每个父区块最后添加一个空的 DIV，这样的做法是 <strong>低效的</strong>！</p>\n<p>因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。</p>\n<p>我们可不可以在某个地方统一定义，然后全局使用呢？就像Java一样，一次编译，到处运行。</p>\n<p>哈哈哈，程序员都喜欢偷懒，我也不例外。回答是当然可以啦。</p>\n<p>这个要使用到另一个新的招式-CSS 的「伪类」,伪类的具体用法可以参考<a href=\"http://www.w3school.com.cn/css/css_pseudo_elements.asp\" target=\"_blank\" rel=\"noopener\">W3C的CSS伪类教程。</a></p>\n<p>我们这里使用的是「after」伪类，它可以自动的在某个父元素的最后一行添加最后一个子元素，并且设置属性。</p>\n<p>上面的话有点拗口，来来来，我们直接上代码分析：</p>\n<p><code></code></p>\n<pre><code>.parent:after{\n    /*设置最后一个元素的内容为空*/\n    content: &quot;&quot;;\n    /*设置最后一个元素为清除两边浮动*/\n    clear: both;\n    /*设置最后一个元素为块状元素*/\n    display: block;\n}\n</code></pre><p></p>\n<p>上面的代码会自动在「parent」作用的标签的最后一行添加一个子元素，并且设置该元素为「块状元素」「内容为空」以及「清除浮动」。</p>\n<p>是不是很神奇呢？我们可以使用 CSS 自动的添加元素。并且设置其属性。</p>\n<p>那么还有一个问题，如何让上面的这个代码被所有的父元素共享呢？</p>\n<p>这个很简单啦，只要把需要样式的父元素的 class属性设置值为 「parent」，那么就可以直接使用啦。</p>\n<p>来来来，让我们完整的敲一次代码！</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;DIV和CSS最佳实践&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            float: left;\n            background: green;\n            width: 200px;\n            height: 200px;\n            clear: left;\n        }\n\n        /*\n          伪类\n         */\n        .parent:after{\n            /*设置最后一个元素的内容为空*/\n            content: &quot;&quot;;\n            /*设置最后一个元素为清除两边浮动*/\n            clear: both;\n            /*设置最后一个元素为块状元素*/\n            display: block;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;first&quot;&gt;\n            第一个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;second&quot;&gt;\n            第二个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;third&quot;&gt;\n            第三个区块\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-after.png\" alt=\"使用最佳实践-伪类后的效果图\"></p>\n<h2 id=\"你说的都是真的吗\"><a href=\"#你说的都是真的吗\" class=\"headerlink\" title=\"你说的都是真的吗\"></a>你说的都是真的吗</h2><p>从头到尾说了这么多，有的同学或许会问，你说的都是真的吗？，那些大型网站的页面都是按照你说的这么设计的的吗？</p>\n<p>我读书少，你可别骗我。</p>\n<p>不信？</p>\n<p>我们去看看一些大型网站的页面的浮动布局的设计代码。</p>\n<p>我们先看豆瓣的</p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-1.jpg\" alt=\"使用after\"></p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-2.jpg\" alt=\"使用after+浮动布局\"></p>\n<p>我们再看看天猫的</p>\n<p><img src=\"/image/back-2-font-xinfa-1/tianmao-1.jpg\" alt=\"使用after\"><br><img src=\"/image/back-2-font-xinfa-1/tianmao-2.jpg\" alt=\"使用after+浮动布局\"></p>\n<p>哈哈，我可没有骗你们哦！大型网站都是这么用的，而且貌似高手都使用 「float:right;」呢！</p>\n<p>最后，我们再来回顾一下，这篇文章从如何写一个 HTML 网页开始，到浮动布局，最后以清除浮动和最佳实践收尾。</p>\n<p>可以让一个连 HTML 都不会写的小白慢慢的窥视到大型网页设计的理念。</p>\n<p>中间有一些招式可能说的太粗糙。不要捉急嘛，我们先学心法。招式到后面慢慢再学习。</p>\n<p>这篇文章结束喽，不要太想我哦！我会在下一篇博文继续介绍心法 II</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇博客我们介绍了布局的口诀，并且说明使用浮动布局是高效的。</p>\n<p>这篇博客我们介绍如何去写一个简单的浮动布局。</p>\n<p>想要去写一个布局，基础的「HTML」标签和基础「CSS」是必须要掌握的。</p>\n<p>下面我们开始来学习基础的 HTML 和 CSS。</p>\n<h2 id=\"基础的-HTML-和-CSS\"><a href=\"#基础的-HTML-和-CSS\" class=\"headerlink\" title=\"基础的 HTML 和 CSS\"></a>基础的 HTML 和 CSS</h2><h3 id=\"什么是-HTML\"><a href=\"#什么是-HTML\" class=\"headerlink\" title=\"什么是 HTML\"></a>什么是 HTML</h3><p>首先我们有一个问题：什么是 HTML？</p>\n<p>简单来说， HTML 是一门编程语言。浏览器可以读取HTML文件，并将其渲染成可视化网页。</p>\n<p>说到编程语言，大家可能觉得很难，要学很多东西。但是对于 HTML 来说，你根本不需要担心，它唯一的语法就是「标签」。而且标签往往是成对出现的，</p>\n<p>它们往往以<br><code>  </code></p>\n<pre><code>&lt;xxx&gt; \n</code></pre><p>开头，</p>\n<p>以<br><code> </code></p>\n<pre><code>&lt;/xxx&gt; \n</code></pre><p>结束</p>\n<p>HTML的标签有很多，但是我们这篇文章只会用到几个HTML标签，不用担心，我会告诉你们它们的用法的。</p>\n<p>而且我后期会有专门的一两篇文章来专门讲解 HTML 标签的具体用法，大家先不用捉急啦！</p>\n<p>如果你很急切的想了解 HTML 标签的使用，可以参考 <a href=\"http://www.w3school.com.cn/tags/index.asp\" target=\"_blank\" rel=\"noopener\">W3C HTML 参考手册</a></p>\n<p>下面跟着我一起学习一下基础的 HTML</p>\n<h3 id=\"简单的-HTML-标签\"><a href=\"#简单的-HTML-标签\" class=\"headerlink\" title=\"简单的 HTML 标签\"></a>简单的 HTML 标签</h3><p>首先我们需要新建一个以 「.html」结尾的文件，然后使用编辑器打开它，编辑里面的内容即可。当然一开始什么都没有啦。</p>\n<p>在一个 HTML文件中，文本需要使用「html」作为根元素，在 html 标签的里面需要使用「head」标签和「body」标签来把网页的头部和主体内容分隔开。</p>\n<p>在 head 标签内，我们嵌套使用「title」标签来声明本网页的主题。</p>\n<p>在 body 标签内，我们可以写入网页的具体内容，当然也可以嵌套其它的标签。</p>\n<p>在写完上面的内容，我们需要在文本的最上方添加「 &lt;!DOCTYPE html&gt; 」来告诉浏览器，我们使用的哪个版本的 HTML。</p>\n<p>这里的 &lt;!DOCTYPE html&gt; 表示我们告诉浏览器我们使用的「HTML5」版本</p>\n<p>来来来，代码敲一波！</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;这是网页的主题&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    这是网页的内容\n\n    &lt;!-- 这里是注释的内容 --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p>代码写完后，我们使用「浏览器」打开我们的文件，就会看到如下的效果啦。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/simple-html.jpg\" alt=\"一个最简单的网页\"></p>\n<p>看完效果图后，我们发现，原来注释是不显示在网页上面的。</p>\n<p>在本篇文章中，我们只会用到表示区块的「div」标签和表示文本内容的「span」标签。</p>\n<p>来来来，让我们敲一波代码，看看这个两个标签怎么用。</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;div和span标签的使用&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div&gt;这是div标签里面的内容&lt;/div&gt;\n    &lt;span&gt;这是span标签的内容&lt;/span&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-span-show.jpg\" alt=\"div和span标签使用的效果图\"></p>\n<p>是不是感觉很简单呢？你们学会了吗？</p>\n<h3 id=\"什么是-CSS\"><a href=\"#什么是-CSS\" class=\"headerlink\" title=\"什么是 CSS\"></a>什么是 CSS</h3><p>在上面的网页中，我们只有文字，没有绚丽的背景和缤纷的颜色。这怎么能满足我们设计如诗如画布局的需求呢？</p>\n<p>这就要使用到另一门编程语言，叫做「CSS」。</p>\n<p>那么什么是 CSS 呢？</p>\n<p>简单来说，CSS 就是给 HTML 标签添加背景、颜色等样式的一种语言，它也是被 「浏览器」 解析的。</p>\n<p>CSS 要完全学会，还是有一点难度的。不过不要捉急啦。在这篇中，我们只要会使用CSS给我们的标签设置背景颜色，高度和宽度即可。</p>\n<p>后续我会在「招式篇」中陆续的给出一些 CSS 的用法和最佳实践，大家敬请期待哦！</p>\n<p>下面就跟着我来学一些简单的 CSS 吧。</p>\n<h3 id=\"一些简单的-CSS-使用\"><a href=\"#一些简单的-CSS-使用\" class=\"headerlink\" title=\"一些简单的 CSS 使用\"></a>一些简单的 CSS 使用</h3><h4 id=\"第一个问题：我们在哪里写-CSS？-重新建一个-css-文件吗\"><a href=\"#第一个问题：我们在哪里写-CSS？-重新建一个-css-文件吗\" class=\"headerlink\" title=\"第一个问题：我们在哪里写 CSS？ 重新建一个 .css 文件吗\"></a>第一个问题：我们在哪里写 CSS？ 重新建一个 .css 文件吗</h4><p>新建一个.css文件当然是可以的，但这种方式适合大型的项目。我们现在是学习，不需要那么麻烦。</p>\n<p>我们直接在 HTML 文件的 head 标签里插入如下代码即可</p>\n<p><code></code></p>\n<pre><code>&lt;head&gt;\n    &lt;title&gt;div和span标签的使用&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        这里是我们写 CSS 代码的地方\n    &lt;/style&gt;\n&lt;/head&gt;   \n</code></pre><p></p>\n<h4 id=\"第二个问题：如何让-CSS-给我们的标签添加样式\"><a href=\"#第二个问题：如何让-CSS-给我们的标签添加样式\" class=\"headerlink\" title=\"第二个问题：如何让 CSS 给我们的标签添加样式\"></a>第二个问题：如何让 CSS 给我们的标签添加样式</h4><p>这其实是一个如何让 CSS 和我们的 HTML 标签绑定的问题。绑定的方法有很多，我们这篇文章里面使用「class」选择器。</p>\n<p>class 选择器你可能现在还不明白，按照我们的套路，先不用管它。如果你很迫切的想了解，可以参考<a href=\"http://www.w3school.com.cn/css/css_selector_type.asp\" target=\"_blank\" rel=\"noopener\">W3C CSS 选择器</a></p>\n<p>我们首先需要为 HTML 标签添加一个 class 属性，并且设置属性的值，如下面的代码：</p>\n<p><code></code></p>\n<pre><code>&lt;div class=&quot;div&quot;&gt;这是div标签里面的内容&lt;/div&gt;\n&lt;span class=&quot;element&quot;&gt;这是span标签的内容&lt;/span&gt;\n</code></pre><p></p>\n<p>然后我们在 CSS 代码里面使用「 . 」+对应的 class 的「属性值」来选中我们设置的 class，代码如下：</p>\n<p><code></code></p>\n<pre><code>&lt;style type=&quot;text/css&quot;&gt;\n        .div{\n            /*选中我们的设置class=&quot;div&quot;*/    \n        }\n\n        .element{\n            /*选中我们的设置class=&quot;element&quot;*/    \n        }\n&lt;/style&gt;\n</code></pre><p></p>\n<p>在 CSS 里面，我们可以使用 「/**/」来添加注释。</p>\n<h4 id=\"第三个问题：如何给元素设置背景颜色，高度和宽度\"><a href=\"#第三个问题：如何给元素设置背景颜色，高度和宽度\" class=\"headerlink\" title=\"第三个问题：如何给元素设置背景颜色，高度和宽度\"></a>第三个问题：如何给元素设置背景颜色，高度和宽度</h4><ul>\n<li>设置背景颜色使用：background-color: red(指定颜色)</li>\n<li>设置高度使用：height: 300px(指定高度的值为300px);</li>\n<li>设置宽度使用：width: 300px(指定宽度的值为300px);</li>\n</ul>\n<p>我们现在按照上面方法来给我们的 div 和 element（它们是class选择器，和标签没有关系哦） 设置背景颜色，高度和宽度，代码如下:</p>\n<p><code></code></p>\n<pre><code>&lt;style type=&quot;text/css&quot;&gt;\n    .div{\n        background-color: red;\n        height: 300px;\n        width: 300px;\n        /*选中我们的设置class=&quot;div&quot;*/    \n    }\n\n    .element{\n        background-color: green;\n        height: 400px;\n        width: 400px;\n        /*选中我们的设置class=&quot;element&quot;*/    \n    }\n&lt;/style&gt;\n</code></pre><p></p>\n<p>然后完整的 HTML + CSS 代码如下。来来来，代码敲一波！</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;div和span标签的使用&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .div{\n            background-color: red;\n            height: 300px;\n            width: 300px;\n            /*选中我们的设置class=&quot;div&quot;*/    \n        }\n\n        .element{\n            background-color: green;\n            height: 400px;\n            width: 400px;\n            /*选中我们的设置class=&quot;element&quot;*/    \n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;div&quot;&gt;这是div标签里面的内容&lt;/div&gt;\n    &lt;span class=&quot;element&quot;&gt;这是span标签的内容&lt;/span&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p>让我们使用浏览器打开这个文件看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/html-css-show.jpg\" alt=\"CSS+HTML 效果图\"></p>\n<p>有了背景颜色和形状，是不是很美呢？</p>\n<p>哈哈！先别急嘛，只要把我的博客完整的看完，如诗如画的布局不是梦！</p>\n<p>等一下，我们的代码是不是有问题啊？</p>\n<p>为什么我们设置了 span 标签的高度和宽度，为什么它还是只有一行的高度呢？</p>\n<p>这就要归根于 HTML 的元素种类了。想要知道原因，我们接着往下看。</p>\n<h3 id=\"HTML-块状元素和行内元素\"><a href=\"#HTML-块状元素和行内元素\" class=\"headerlink\" title=\"HTML 块状元素和行内元素\"></a>HTML 块状元素和行内元素</h3><p>在 HTML 中，我们可以把标签分为块状元素和行内元素，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。</p>\n<ul>\n<li><p>块状元素的标签还有：p、ul、ol等。</p>\n</li>\n<li><p>行内元素的标签还有：img、code、input等。</p>\n</li>\n</ul>\n<p>那么块状元素和行内元素有什么区别呢？</p>\n<p>从我们的代码的效果图里面我们已经看出来一个区别了：<strong>块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。</strong></p>\n<p>我们再来写一段代码试试，我们使用我们熟悉的 div 标签和 span 标签来演示。</p>\n<p>我们把上面代码的高度和宽度注释掉，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。</p>\n<p>来来来，代码走一波！</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;div和span标签的使用&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .div{\n            background-color: red;\n            /*height: 300px;*/\n            /*width: 300px;*/\n            /*选中我们的设置class=&quot;div&quot;*/    \n        }\n\n        .element{\n            background-color: green;\n            /*height: 400px;*/\n            /*width: 400px;*/\n            /*选中我们的设置class=&quot;element&quot;*/    \n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;div&quot;&gt;这是div标签里面的内容&lt;/div&gt;\n    &lt;span class=&quot;element&quot;&gt;这是span标签的内容&lt;/span&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-inline-elemet.jpg\" alt=\"效果图\"></p>\n<p>是不是又看出来一个区别呢？</p>\n<p><strong>块状元素是独占一行的，而相邻的行内元素会排在同一行。</strong></p>\n<p>看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-element.jpg\" alt=\"效果图\"></p>\n<p><strong>即使我们设置了块状元素的高度和宽度，它还是独占一行的</strong>。真的是霸道啊！</p>\n<p>如果不会使用谷歌浏览器检查网页的同学，可以参考<a href=\"https://jingyan.baidu.com/article/2f9b480db6cde741ca6cc246.html\" target=\"_blank\" rel=\"noopener\">如何使用谷歌浏览器检查页面。</a></p>\n<p>说了这么多，我好像还是没有教你们如何去写一个浮动布局。</p>\n<p>咳咳，下面正式开始。</p>\n<h2 id=\"为什么要使用浮动布局\"><a href=\"#为什么要使用浮动布局\" class=\"headerlink\" title=\"为什么要使用浮动布局\"></a>为什么要使用浮动布局</h2><p>在开始之前，我们按照套路，还是要问一个问题：为什么要使用浮动布局，仅仅是因为它是高效的？</p>\n<p>答案当然是否定的。</p>\n<p>在上面的我们分析了块状元素是独占一行的，但是在页面布局的时候，往往都是要求许多块状元素是在一行的。</p>\n<p>怎么解决这个问题呢？</p>\n<p>解决问题有两种方案：</p>\n<ul>\n<li>我们可以使用 CSS 把块状元素变成行内元素</li>\n<li>我们使用浮动</li>\n</ul>\n<p>对于第一种方案，我们直接否定！<strong>因为它存在误差！</strong><br>下面我们使用今天学的 HTML 和 CSS 来写一段代码有误差的代码： </p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;使用行内元素是有误差的&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .div-1{\n            background-color: red;\n            /*让其作为行内元素显示*/\n            display: inline-block;\n\n        }\n\n        .div-2{\n            background-color: green;\n            /*让其作为行内元素显示*/\n            display:inline-block;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;div-1&quot;&gt;123&lt;/div&gt;\n    &lt;div class=&quot;div-2&quot;&gt;123&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p>上面的这段代码，我们使用块状元素 div 写了两个区块，并且使用<br><code></code></p>\n<pre><code>display:inline-block; \n</code></pre><p> </p>\n<p>让块状元素 div 来作为行内元素显示，然后我们来看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/inline-element-error.jpg\" alt=\"行内元素误差效果显示\"></p>\n<p>我们发现<strong>虽然两个 div 可以变成行内元素在一行显示，但是他们之间还是存在空白，不能完美的相邻在一起。</strong></p>\n<p>这点空白会给我们布局带来很大的麻烦，这就是我们为什么选择浮动布局的原因。</p>\n<p>选择浮动布局的原因知道了，下面我们来写一个浮动布局吧。</p>\n<p>真的开始写喽，不是骗你们的！</p>\n<h2 id=\"一个简单的浮动布局\"><a href=\"#一个简单的浮动布局\" class=\"headerlink\" title=\"一个简单的浮动布局\"></a>一个简单的浮动布局</h2><p>首先我们画两个 div，并且设置它们的背景颜色，高度以及宽度，代码如下：</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;简单的浮动布局&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .block-1{\n            width: 200px;\n            height: 200px;\n            background: red;\n        }\n\n        .block-2{\n            width: 200px;\n            height: 200px;\n            background: green;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div class=&quot;block-1&quot;&gt;\n    这是第一个区块\n&lt;/div&gt;\n\n&lt;div class=&quot;block-2&quot;&gt;\n    这是第二个区块\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p><code></code></p>\n<p>打开浏览器看效果是这个样子滴：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout.jpg\" alt=\"浮动之前的效果图\"></p>\n<p>这个效果很正常嘛。 div 作为很霸道的块状元素，当然占据一整行，两个 div 就分别占据两行喽。</p>\n<p>下面我们就要使用浮动了，注意看清楚哦！</p>\n<p>我们只要在上面代码中 div 的 class 选择器里面添加如下代码即可实现浮动。</p>\n<p><code></code></p>\n<pre><code>float: left;\n</code></pre><p></p>\n<p>来来来，完整代码走一波！</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;简单的浮动布局&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .block-1{\n            width: 200px;\n            height: 200px;\n            background: red;\n            /*设置为浮动*/\n            float: left;\n        }\n\n        .block-2{\n            width: 200px;\n            height: 200px;\n            background: green;\n            /*设置为浮动*/\n            float: left;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div class=&quot;block-1&quot;&gt;\n    这是第一个区块\n&lt;/div&gt;\n\n&lt;div class=&quot;block-2&quot;&gt;\n    这是第二个区块\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p>然后我们用浏览器打开看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-1.png\" alt=\"简单浮动效果图\"></p>\n<p>我们发现两个原本很难相邻在一起的块状元素，竟然完美的 <strong>无缝</strong> 的相邻在一起。</p>\n<p>浮动的布局是不是很简单呢？我们只要添加 「 float: left;」即可实现浮动。你们学会了吗？</p>\n<p>现在让我们重新来看一下「 float: left;」这段代码。</p>\n<p>我们都知道「 float 」这个字是指定使用浮动的关键字，但是「 left 」是干嘛用的？难道还是指定 right？</p>\n<p>当然可以啦。left 的意思是指定左浮动，意思是让元素悬浮在浏览器的左边，right就是相反的意思，让元素悬浮在浏览器的右边。</p>\n<p>来来来，让我们把上面代码中的 left 变成right，代码再走一波!</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;简单的浮动布局&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .block-1{\n            width: 200px;\n            height: 200px;\n            background: red;\n            /*设置为浮动*/\n            float: right;\n        }\n\n        .block-2{\n            width: 200px;\n            height: 200px;\n            background: green;\n            /*设置为浮动*/\n            float: right;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div class=&quot;block-1&quot;&gt;\n    这是第一个区块\n&lt;/div&gt;\n\n&lt;div class=&quot;block-2&quot;&gt;\n    这是第二个区块\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p>让我们打开浏览器看效果！</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-right.jpg\" alt=\"右浮动效果图\"></p>\n<p>是不是被浮动的结果吓了一跳呢？设置浮动的元素竟然都跑到右边去了。</p>\n<p>到了这里，关于怎么写浮动，我想你们应该已经会了。下面我们来看一个问题，要跟着我的思路走哦。</p>\n<p>还是回到我们之前设置的左浮动的页面。我们可以使用谷歌浏览器来检查一下它们的高度和宽度，和我们设置的完全一样。</p>\n<p>这段代码没问题。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-show-height.png\" alt=\"\"></p>\n<h2 id=\"还是一个简单的浮动布局\"><a href=\"#还是一个简单的浮动布局\" class=\"headerlink\" title=\"还是一个简单的浮动布局\"></a>还是一个简单的浮动布局</h2><p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;还是一个简单的浮动布局&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .block-1{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: red;\n        }\n\n        .block-2{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: green;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;block-1&quot;&gt;\n            我是第一个子元素\n        &lt;/div&gt;\n\n        &lt;div class=&quot;block-2&quot;&gt;\n            我是第二个子元素\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-2.png\" alt=\"效果图\"></p>\n<p>这段代码还是很简单，我们还是使用　DIV　标签画了两个　200 * 200　区块，和之前代码的唯一区别在于</p>\n<p>这两个区块被一个「父区块 parent」包含着。</p>\n<p>这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/second-check-child.png\" alt=\"\"></p>\n<p>子元素宽度和高度都是 OK 的。</p>\n<p>我们再来看看它父元素高度和宽度。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parent-check.png\" alt=\"\"></p>\n<p>我去！父元素的高度竟然是 <strong>０</strong>！！　我是不是安装了假的浏览器？</p>\n<p>解铃还须系铃人，要想知道原因，我们需要去了解一下　DIV　标签和「浮动」的之间的关系。</p>\n<h2 id=\"这也是一个简单的浮动布局\"><a href=\"#这也是一个简单的浮动布局\" class=\"headerlink\" title=\"这也是一个简单的浮动布局\"></a>这也是一个简单的浮动布局</h2><p>还是一个很简单的布局，我们有三个DIV区块，分别为「first」、「second」、「third」它们父区块「parent」包含着</p>\n<p>并且设置三个DIV区块为左浮动的。</p>\n<p>代码如下：<br><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;清除浮动演示&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            float: left;\n            background: green;\n            width: 200px;\n            height: 200px;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;first&quot;&gt;\n            第一个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;second&quot;&gt;\n            第二个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;third&quot;&gt;\n            第三个区块\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-1.png\" alt=\"效果图\"></p>\n<p>我们使用谷歌浏览器来检查一下，发现子元素的高度和宽度和设置的值一样，但是父元素高度还是为０。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/origin-parent-height.png\" alt=\"\"></p>\n<p>现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做？</p>\n<p>这就要使用到另一个招式 「清除浮动」</p>\n<p>我们只要在第三块区块的「.third」中添加<br><code></code></p>\n<pre><code>clear: left;\n</code></pre><p> </p>\n<p>即可。</p>\n<p>来来来，代码敲一波：</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;清除浮动演示&lt;/title&gt;\n        &lt;style type=&quot;text/css&quot;&gt;\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n\n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=&quot;parent&quot;&gt;\n            &lt;div class=&quot;first&quot;&gt;\n                第一个区块\n            &lt;/div&gt;\n\n            &lt;div class=&quot;second&quot;&gt;\n                第二个区块\n            &lt;/div&gt;\n\n            &lt;div class=&quot;third&quot;&gt;\n                第三个区块\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre><p></p>\n<p>话不多说，让我们先看效果。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/add-clear-left-1.png\" alt=\"添加 clear: left;的效果图\"></p>\n<p>真的把第三个区块给压下来了！</p>\n<p>还是按照上面的套路，我们来分析这段代码「 clear: left; 」：</p>\n<p>它用到的关键字是「 clear 」，它的含义是清除。</p>\n<p>而 「 left 」 代表是左边。</p>\n<p>那么它合起来的意思是：<strong>清除左边的浮动元素</strong>。</p>\n<p>说到更明白一点就是：<strong>不让当前元素的左边有浮动元素。</strong></p>\n<p>当前元素是第三个区块，它的左边有两个浮动元素 first 和second 。</p>\n<p>那这段代码的意思就是：<strong>不让第三个区块左边有浮动元素</strong>，那浏览器这么处理呢？</p>\n<p>浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到 <strong>下一行</strong> 来吧！”</p>\n<p>于是第三个区块就到了下一行啦。  </p>\n<p>虽然有点复杂，但是按照上面思路进行一步步分解，是不是就变的很简单呢？</p>\n<p>让我们再来拓展一下，clear 除了可以设置为 left,还可以设置为 「 right 」 和 「 both 」。</p>\n<p>我相信不用我说你们也明白了吧！</p>\n<p>right 就是不让当前元素 <strong>右边</strong> 存在浮动元素嘛。</p>\n<p>那 both 就是不让当前元素的 <strong>两边</strong> 出现浮动元素喽。</p>\n<p>说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！</p>\n<p>这个有点尴尬！</p>\n<h2 id=\"父元素高度真的需要吗？\"><a href=\"#父元素高度真的需要吗？\" class=\"headerlink\" title=\"父元素高度真的需要吗？\"></a>父元素高度真的需要吗？</h2><p><img src=\"/image/back-2-font-xinfa-1/clear-float-parent.png\" alt=\"\"></p>\n<p>那么，在解决之前，按照我们的套路，我们要问一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。</p>\n<p>我的实习导师告诉我：“这是不行的。<strong>浮动布局的占位空间往往是我们理想的父元素高度。</strong>”</p>\n<p>他说的太抽象，我们来说的直白一点：</p>\n<p>「在布局中我们往往使用浮动布局来实现某一块区域的布局」。</p>\n<p>「然后我们最好用一个DIV去包裹整个浮动布局，用于和其它的布局区分开」。</p>\n<p>「最后我们要求这个父DIV和高度要和浮动布局的高度一样」。</p>\n<p>对于上面的三点内容，前两点我们已经做到了。在上面的代码中，我们使用「parent」包裹着「first」、「second」、「third」，并且</p>\n<p>而且它们都是浮动的。</p>\n<p>想要解决第三个问题，就是使用我们上面讲的招式-<strong>清除浮动</strong>。</p>\n<p>我们在父区块最后面增加一个空的DIV,将它设置它为「 clear:both 」。</p>\n<p>为什么要这么使用呢，具体的原因我也讲不清楚，大概是这样的吧：</p>\n<p>因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受 <strong>任何</strong> 浮动元素干扰,我们必须清除浮动对它的干扰。</p>\n<p>注意哦！最后一个元素不是浮动的哦。</p>\n<p>来来来，代码走一波！</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;DIV和CSS的前世今生&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            float: left;\n            background: green;\n            width: 200px;\n            height: 200px;\n            clear: left;\n        }\n        .last{\n            clear: both;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;first&quot;&gt;\n            第一个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;second&quot;&gt;\n            第二个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;third&quot;&gt;\n            第三个区块\n        &lt;/div&gt;\n        &lt;div class=&quot;last&quot;&gt;\n\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p>然后我们会发现，父元素竟然有高度了，而且和浮动布局的高度是一样的！</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parrent-height.png\" alt=\"父元素有高度了\"></p>\n<p>哈哈，到了这里，我们已经完全解决父元素高度为 0 的问题，那么我想问：</p>\n<p>上面的解决方法是最好的吗？</p>\n<h2 id=\"清除浮动－最佳实践\"><a href=\"#清除浮动－最佳实践\" class=\"headerlink\" title=\"清除浮动－最佳实践\"></a>清除浮动－最佳实践</h2><p>按照套路，我们得问一个问题：上面的解决方案有问题吗？</p>\n<p>回答是肯定的！</p>\n<p>因为按照上面的方法，我们需要在 <strong>手动</strong> 在每个父区块最后添加一个空的 DIV，这样的做法是 <strong>低效的</strong>！</p>\n<p>因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。</p>\n<p>我们可不可以在某个地方统一定义，然后全局使用呢？就像Java一样，一次编译，到处运行。</p>\n<p>哈哈哈，程序员都喜欢偷懒，我也不例外。回答是当然可以啦。</p>\n<p>这个要使用到另一个新的招式-CSS 的「伪类」,伪类的具体用法可以参考<a href=\"http://www.w3school.com.cn/css/css_pseudo_elements.asp\" target=\"_blank\" rel=\"noopener\">W3C的CSS伪类教程。</a></p>\n<p>我们这里使用的是「after」伪类，它可以自动的在某个父元素的最后一行添加最后一个子元素，并且设置属性。</p>\n<p>上面的话有点拗口，来来来，我们直接上代码分析：</p>\n<p><code></code></p>\n<pre><code>.parent:after{\n    /*设置最后一个元素的内容为空*/\n    content: &quot;&quot;;\n    /*设置最后一个元素为清除两边浮动*/\n    clear: both;\n    /*设置最后一个元素为块状元素*/\n    display: block;\n}\n</code></pre><p></p>\n<p>上面的代码会自动在「parent」作用的标签的最后一行添加一个子元素，并且设置该元素为「块状元素」「内容为空」以及「清除浮动」。</p>\n<p>是不是很神奇呢？我们可以使用 CSS 自动的添加元素。并且设置其属性。</p>\n<p>那么还有一个问题，如何让上面的这个代码被所有的父元素共享呢？</p>\n<p>这个很简单啦，只要把需要样式的父元素的 class属性设置值为 「parent」，那么就可以直接使用啦。</p>\n<p>来来来，让我们完整的敲一次代码！</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;DIV和CSS最佳实践&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            float: left;\n            background: green;\n            width: 200px;\n            height: 200px;\n            clear: left;\n        }\n\n        /*\n          伪类\n         */\n        .parent:after{\n            /*设置最后一个元素的内容为空*/\n            content: &quot;&quot;;\n            /*设置最后一个元素为清除两边浮动*/\n            clear: both;\n            /*设置最后一个元素为块状元素*/\n            display: block;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;first&quot;&gt;\n            第一个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;second&quot;&gt;\n            第二个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;third&quot;&gt;\n            第三个区块\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-after.png\" alt=\"使用最佳实践-伪类后的效果图\"></p>\n<h2 id=\"你说的都是真的吗\"><a href=\"#你说的都是真的吗\" class=\"headerlink\" title=\"你说的都是真的吗\"></a>你说的都是真的吗</h2><p>从头到尾说了这么多，有的同学或许会问，你说的都是真的吗？，那些大型网站的页面都是按照你说的这么设计的的吗？</p>\n<p>我读书少，你可别骗我。</p>\n<p>不信？</p>\n<p>我们去看看一些大型网站的页面的浮动布局的设计代码。</p>\n<p>我们先看豆瓣的</p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-1.jpg\" alt=\"使用after\"></p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-2.jpg\" alt=\"使用after+浮动布局\"></p>\n<p>我们再看看天猫的</p>\n<p><img src=\"/image/back-2-font-xinfa-1/tianmao-1.jpg\" alt=\"使用after\"><br><img src=\"/image/back-2-font-xinfa-1/tianmao-2.jpg\" alt=\"使用after+浮动布局\"></p>\n<p>哈哈，我可没有骗你们哦！大型网站都是这么用的，而且貌似高手都使用 「float:right;」呢！</p>\n<p>最后，我们再来回顾一下，这篇文章从如何写一个 HTML 网页开始，到浮动布局，最后以清除浮动和最佳实践收尾。</p>\n<p>可以让一个连 HTML 都不会写的小白慢慢的窥视到大型网页设计的理念。</p>\n<p>中间有一些招式可能说的太粗糙。不要捉急嘛，我们先学心法。招式到后面慢慢再学习。</p>\n<p>这篇文章结束喽，不要太想我哦！我会在下一篇博文继续介绍心法 II</p>\n"},{"title":"后端工程师入门前端页面重构（二）：心法 I","date":"2018-01-04T16:00:00.000Z","_content":"\n上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：\n\n**从左到右，从上到下，化整为零。**\n\n那么在接下来的几篇文章中，我们就来聊聊页面布局的「心法」和一些具体的「招式」。\n\n那么什么是心法呢？\n\n<!-- more -->\n\n如果说口诀是页面布局的原则，那么心法就是对页面布局中一些重要概念的认识。\n\n在上一篇文章，我们一直推荐使用高效的浮动布局，类似大家都玩过的磁铁，在磁铁的周围，所有的铁块会被磁铁所吸引。\n\n那么浮动就好比页面上的一块磁铁，它会吸引页面上的元素块，让它们朝一个方向进行组合、包含、交叠，进而完成整个页面的布局。\n\n下面就让我们来看看页面中元素有什么类型。\n\n## HTML 块状元素和行内元素\n\n在我们熟知的页面布局中，网页的标题，logo等都是有高度和宽度的。我们来看下面的豆瓣首页的切图：\n\n![豆瓣首页切图](/image/back-2-font-xinfa-1/douban-index.png)\n\n在上面的图片中，我们使用红色的线条和文字标注豆瓣 logo 的高度和宽度。不仅仅是 logo 图有高度和宽度，搜索框，热搜主题等其它元素，几乎都有高度和宽度。\n\n那么在 HTML 语言中，我们如何指定元素的高度和宽度呢？\n\n我们先来写一段 HTML：\n\n```html\n<div>这是 div 标签里面的内容</div>\n<span>这是 span 标签的内容</span>\n```\n\n然后给它们定义样式：\n\n```css\ndiv {\n  background-color: red;\n  height: 100px;\n  width: 100px;\n}\nspan {\n  background-color: green;\n  height: 100px;\n  width: 100px;\n```\n\n效果如下：\n\n![效果图](/image/back-2-font-xinfa-1/html-css-show.png)\n\n发现一个问题：\n\n**我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？**\n\n\n其实在 HTML 中，我们可以把标签分为「块状元素」和「行内元素」，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。\n\n那么这两类元素有什么区别呢？\n\n从我们的代码的效果图里面我们已经看出来一个区别了：**块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。**\n\n我们把上面元素的宽度和高度都删除，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。\n\n![效果图](/image/back-2-font-xinfa-1/block-inline-elemet.png)\n\n是不是又看出来一个区别呢？\n\n**块状元素是独占一行的，而行内元素只占本身内容的大小。**\n\n看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。\n\n![效果图](/image/back-2-font-xinfa-1/block-element.jpg)\n\n**即使我们设置了块状元素的高度和宽度，它还是独占一行的**。真的是霸道啊！\n\n然而，现实中的网页（如豆瓣），很多内容块都是拼接的，如果我们使用块状元素来表示这些内容块，如果消除它独占一行的情况呢？\n\n\n关于这个问题，似乎有两种解决方案。\n\n\n### inline-block\n\n其实在 css 的 diplay 属性中，有一个属性值 `inline-block` 可以将标签呈现出「块状元素」和「行内元素」之间的中间态，即它可以拥有宽高度的同时，也可以具备行内元素的占位属性。\n\n```html\n<div>123</div>\n<div>123</div>\n```\n\n然后给它们定义样式：\n\n```css\ndiv{\n    background-color: red;\n    display: inline-block;\n}\n```\n\n看效果：\n![行内元素误差效果显示](/image/back-2-font-xinfa-1/inline-element-error.png)\n\n我们发现**虽然两个 div 可以变成行内元素在一行显示，但是它们之间还是存在空白，不能完美的相邻在一起。这点空白会让我们的布局很不美观！**\n\n### 浮动\n上面我们说了，浮动可以把页面上的元素往某一个方向吸引，那么如何吸引呢？\n在 CSS 中，我们可以通过 `float:left` 把元素往左边吸引\n\n```html\n<div style=\"background-color: red\">这是第一个区块</div>\n<div style=\"background-color: green\">这是第二个区块</div>\n```\n\n使用浮动：\n\n```css\ndiv{\n    width: 200px;\n    height: 200px;\n    float: left;\n}\n```\n看效果：\n\n![简单浮动效果图](/image/back-2-font-xinfa-1/float-layout-show-1.png)\n\n我们发现，通过浮动，可以使两个原本很难相邻在一起的块状元素，**完美** 的相邻在一起。\n\n使用 `left` 是把元素往左边吸引，而 `right` 是把元素往右边吸引。\n\n\n## 清除浮动\n\n上面我们已经介绍了浮动的基本用法，那么在实际的开发过程中，我们可能有这样的需要：我们有三个元素块状元素，前两个块状元素需要使用浮动进行相邻，在上一行；第三个元素不使用浮动，让他保持块状元素的特征在下一行。\n\n```html\n<div class=\"float-div\" style=\"background-color: red\"> 第一个浮动元素块 </div>\n<div class=\"float-div\" style=\"background-color: green\"> 第二个浮动元素块 </div>\n<div class=\"nofloat-div\"  style=\"background-color: yellow\"> 非浮动元素块 </div>\n```\n\n定义样式：\n\n```css\n.float-div{\n\t\twidth: 100px;\n    height: 100px;\n    float: left;\n}\n.nofloat-div{\n    width: 100px;\n    height: 100px;\n}\n```\n\n看效果：\n![](/image/back-2-font-xinfa-1/float-problem.png)\n\n我去，我们的非浮动元素块去哪了？为什么只剩下文字了？ 这和我们预想的情况不一样啊！我们使用浏览器检查一下，发现，非浮动元素竟然跑到上面去了。\n\n![](/image/back-2-font-xinfa-1/float-problem-nofloat.png)\n\n这个不符合我们的需求啊！那么怎样解决这个问题呢？\n\n要解决这个问题，就要使用 **清除浮动**\n\n我们在非浮动元素的样式里面添加一行 `clear:left`，即可实现清除浮动，让我们来看效果：\n\n![](/image/back-2-font-xinfa-1/clear-left.png)\n\n真的把非浮动元素给压下来了！而且完美发符合我们的设计需求！\n\n我们来分析「 clear: left; 」这段代码：\n\n它用到的关键字是「 clear 」，它的含义是清除。\n\n而 「 left 」 代表是左边。\n\n那么它合起来的意思是：清除左边的浮动元素。\n\n说到更明白一点就是：不让当前元素的左边有浮动元素（也可以理解为让浮动元素持有站位空间）。于是就把非浮动元素压到下一行来咯。\n\n让我们再来拓展一下，clear 除了可以设置为 left，还可以设置为 「 right 」 和 「 both 」。\n\n我相信不用我说你们也明白了吧！\n\nright 就是不让当前元素 **右边** 存在浮动元素嘛。\n\n那 both 就是不让当前元素的 **两边** 出现浮动元素喽。\n\n到这里，我们介绍完了浮动布局和清除浮动的概念和基本用法，那它们在页面布局中是如何被使用的呢？\n## 浮动布局--最佳实践\n我们在心法篇中提到页面从上到下都是有层级的，那么我们如何进行明确的分层呢？\n\n如豆瓣的首页，有着明显是上下分层。在每一层中，我们都需要使用 **浮动布局** 来使我们的元素紧密的交叠在一起，但是在每一行的最后，我们需要使用 **清除浮动** 来让浮动元素保持站位空间。\n\n![](/image/back-2-font-xinfa-1/line.png)\n\n因此我们需要在每一行的末尾加一个空的 div 标签，并在设置它为清除浮动。\n\n在 CSS 中，我们可以使用 「after 选择器」 来实现添加元素，具体的用法可以参考:[W3C after 选择器](http://www.w3school.com.cn/cssref/selector_after.asp)\n\n下面直接给出代码： \n\n```css\nxxxdiv:after{\n  \tcontent: \"\";\n  \tclear: both;\n  \tdisplay: block;\n}\n```        \n\n## 心法小结\n最后，我们再来回顾一下文章介绍的一些心法：\n\n**1. HTML 分为块状元素和行内元素的，块状元素是独占一行的**\n\n**2. 浮动布局是解决多个块状元素在同一行的最佳方法**\n\n**3. 清除浮动是解决页面上下分层的一个重要方式**\n\n**4. 浮动 + 清除浮动是页面布局的一个最佳实践**\n\n文章中的一些招式可能说的太粗糙，先不用捉急，我们先学心法，招式到后面再专门的学习。\n\n我会在下一篇博文继续介绍心法 II。\n\n","source":"_drafts/xinfa-1/back-2-font-xinfa-1-5.0.md","raw":"\n---\ntitle: 后端工程师入门前端页面重构（二）：心法 I\ndate: 2018/01/05\ncategories: 前端页面重构系列\ntags:\n- 前端\n---\n\n上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：\n\n**从左到右，从上到下，化整为零。**\n\n那么在接下来的几篇文章中，我们就来聊聊页面布局的「心法」和一些具体的「招式」。\n\n那么什么是心法呢？\n\n<!-- more -->\n\n如果说口诀是页面布局的原则，那么心法就是对页面布局中一些重要概念的认识。\n\n在上一篇文章，我们一直推荐使用高效的浮动布局，类似大家都玩过的磁铁，在磁铁的周围，所有的铁块会被磁铁所吸引。\n\n那么浮动就好比页面上的一块磁铁，它会吸引页面上的元素块，让它们朝一个方向进行组合、包含、交叠，进而完成整个页面的布局。\n\n下面就让我们来看看页面中元素有什么类型。\n\n## HTML 块状元素和行内元素\n\n在我们熟知的页面布局中，网页的标题，logo等都是有高度和宽度的。我们来看下面的豆瓣首页的切图：\n\n![豆瓣首页切图](/image/back-2-font-xinfa-1/douban-index.png)\n\n在上面的图片中，我们使用红色的线条和文字标注豆瓣 logo 的高度和宽度。不仅仅是 logo 图有高度和宽度，搜索框，热搜主题等其它元素，几乎都有高度和宽度。\n\n那么在 HTML 语言中，我们如何指定元素的高度和宽度呢？\n\n我们先来写一段 HTML：\n\n```html\n<div>这是 div 标签里面的内容</div>\n<span>这是 span 标签的内容</span>\n```\n\n然后给它们定义样式：\n\n```css\ndiv {\n  background-color: red;\n  height: 100px;\n  width: 100px;\n}\nspan {\n  background-color: green;\n  height: 100px;\n  width: 100px;\n```\n\n效果如下：\n\n![效果图](/image/back-2-font-xinfa-1/html-css-show.png)\n\n发现一个问题：\n\n**我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？**\n\n\n其实在 HTML 中，我们可以把标签分为「块状元素」和「行内元素」，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。\n\n那么这两类元素有什么区别呢？\n\n从我们的代码的效果图里面我们已经看出来一个区别了：**块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。**\n\n我们把上面元素的宽度和高度都删除，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。\n\n![效果图](/image/back-2-font-xinfa-1/block-inline-elemet.png)\n\n是不是又看出来一个区别呢？\n\n**块状元素是独占一行的，而行内元素只占本身内容的大小。**\n\n看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。\n\n![效果图](/image/back-2-font-xinfa-1/block-element.jpg)\n\n**即使我们设置了块状元素的高度和宽度，它还是独占一行的**。真的是霸道啊！\n\n然而，现实中的网页（如豆瓣），很多内容块都是拼接的，如果我们使用块状元素来表示这些内容块，如果消除它独占一行的情况呢？\n\n\n关于这个问题，似乎有两种解决方案。\n\n\n### inline-block\n\n其实在 css 的 diplay 属性中，有一个属性值 `inline-block` 可以将标签呈现出「块状元素」和「行内元素」之间的中间态，即它可以拥有宽高度的同时，也可以具备行内元素的占位属性。\n\n```html\n<div>123</div>\n<div>123</div>\n```\n\n然后给它们定义样式：\n\n```css\ndiv{\n    background-color: red;\n    display: inline-block;\n}\n```\n\n看效果：\n![行内元素误差效果显示](/image/back-2-font-xinfa-1/inline-element-error.png)\n\n我们发现**虽然两个 div 可以变成行内元素在一行显示，但是它们之间还是存在空白，不能完美的相邻在一起。这点空白会让我们的布局很不美观！**\n\n### 浮动\n上面我们说了，浮动可以把页面上的元素往某一个方向吸引，那么如何吸引呢？\n在 CSS 中，我们可以通过 `float:left` 把元素往左边吸引\n\n```html\n<div style=\"background-color: red\">这是第一个区块</div>\n<div style=\"background-color: green\">这是第二个区块</div>\n```\n\n使用浮动：\n\n```css\ndiv{\n    width: 200px;\n    height: 200px;\n    float: left;\n}\n```\n看效果：\n\n![简单浮动效果图](/image/back-2-font-xinfa-1/float-layout-show-1.png)\n\n我们发现，通过浮动，可以使两个原本很难相邻在一起的块状元素，**完美** 的相邻在一起。\n\n使用 `left` 是把元素往左边吸引，而 `right` 是把元素往右边吸引。\n\n\n## 清除浮动\n\n上面我们已经介绍了浮动的基本用法，那么在实际的开发过程中，我们可能有这样的需要：我们有三个元素块状元素，前两个块状元素需要使用浮动进行相邻，在上一行；第三个元素不使用浮动，让他保持块状元素的特征在下一行。\n\n```html\n<div class=\"float-div\" style=\"background-color: red\"> 第一个浮动元素块 </div>\n<div class=\"float-div\" style=\"background-color: green\"> 第二个浮动元素块 </div>\n<div class=\"nofloat-div\"  style=\"background-color: yellow\"> 非浮动元素块 </div>\n```\n\n定义样式：\n\n```css\n.float-div{\n\t\twidth: 100px;\n    height: 100px;\n    float: left;\n}\n.nofloat-div{\n    width: 100px;\n    height: 100px;\n}\n```\n\n看效果：\n![](/image/back-2-font-xinfa-1/float-problem.png)\n\n我去，我们的非浮动元素块去哪了？为什么只剩下文字了？ 这和我们预想的情况不一样啊！我们使用浏览器检查一下，发现，非浮动元素竟然跑到上面去了。\n\n![](/image/back-2-font-xinfa-1/float-problem-nofloat.png)\n\n这个不符合我们的需求啊！那么怎样解决这个问题呢？\n\n要解决这个问题，就要使用 **清除浮动**\n\n我们在非浮动元素的样式里面添加一行 `clear:left`，即可实现清除浮动，让我们来看效果：\n\n![](/image/back-2-font-xinfa-1/clear-left.png)\n\n真的把非浮动元素给压下来了！而且完美发符合我们的设计需求！\n\n我们来分析「 clear: left; 」这段代码：\n\n它用到的关键字是「 clear 」，它的含义是清除。\n\n而 「 left 」 代表是左边。\n\n那么它合起来的意思是：清除左边的浮动元素。\n\n说到更明白一点就是：不让当前元素的左边有浮动元素（也可以理解为让浮动元素持有站位空间）。于是就把非浮动元素压到下一行来咯。\n\n让我们再来拓展一下，clear 除了可以设置为 left，还可以设置为 「 right 」 和 「 both 」。\n\n我相信不用我说你们也明白了吧！\n\nright 就是不让当前元素 **右边** 存在浮动元素嘛。\n\n那 both 就是不让当前元素的 **两边** 出现浮动元素喽。\n\n到这里，我们介绍完了浮动布局和清除浮动的概念和基本用法，那它们在页面布局中是如何被使用的呢？\n## 浮动布局--最佳实践\n我们在心法篇中提到页面从上到下都是有层级的，那么我们如何进行明确的分层呢？\n\n如豆瓣的首页，有着明显是上下分层。在每一层中，我们都需要使用 **浮动布局** 来使我们的元素紧密的交叠在一起，但是在每一行的最后，我们需要使用 **清除浮动** 来让浮动元素保持站位空间。\n\n![](/image/back-2-font-xinfa-1/line.png)\n\n因此我们需要在每一行的末尾加一个空的 div 标签，并在设置它为清除浮动。\n\n在 CSS 中，我们可以使用 「after 选择器」 来实现添加元素，具体的用法可以参考:[W3C after 选择器](http://www.w3school.com.cn/cssref/selector_after.asp)\n\n下面直接给出代码： \n\n```css\nxxxdiv:after{\n  \tcontent: \"\";\n  \tclear: both;\n  \tdisplay: block;\n}\n```        \n\n## 心法小结\n最后，我们再来回顾一下文章介绍的一些心法：\n\n**1. HTML 分为块状元素和行内元素的，块状元素是独占一行的**\n\n**2. 浮动布局是解决多个块状元素在同一行的最佳方法**\n\n**3. 清除浮动是解决页面上下分层的一个重要方式**\n\n**4. 浮动 + 清除浮动是页面布局的一个最佳实践**\n\n文章中的一些招式可能说的太粗糙，先不用捉急，我们先学心法，招式到后面再专门的学习。\n\n我会在下一篇博文继续介绍心法 II。\n\n","slug":"xinfa-1/back-2-font-xinfa-1-5.0","published":0,"updated":"2018-02-18T08:12:37.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpk90008mc55sy6evix6","content":"<p>上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：</p>\n<p><strong>从左到右，从上到下，化整为零。</strong></p>\n<p>那么在接下来的几篇文章中，我们就来聊聊页面布局的「心法」和一些具体的「招式」。</p>\n<p>那么什么是心法呢？</p>\n<a id=\"more\"></a>\n<p>如果说口诀是页面布局的原则，那么心法就是对页面布局中一些重要概念的认识。</p>\n<p>在上一篇文章，我们一直推荐使用高效的浮动布局，类似大家都玩过的磁铁，在磁铁的周围，所有的铁块会被磁铁所吸引。</p>\n<p>那么浮动就好比页面上的一块磁铁，它会吸引页面上的元素块，让它们朝一个方向进行组合、包含、交叠，进而完成整个页面的布局。</p>\n<p>下面就让我们来看看页面中元素有什么类型。</p>\n<h2 id=\"HTML-块状元素和行内元素\"><a href=\"#HTML-块状元素和行内元素\" class=\"headerlink\" title=\"HTML 块状元素和行内元素\"></a>HTML 块状元素和行内元素</h2><p>在我们熟知的页面布局中，网页的标题，logo等都是有高度和宽度的。我们来看下面的豆瓣首页的切图：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-index.png\" alt=\"豆瓣首页切图\"></p>\n<p>在上面的图片中，我们使用红色的线条和文字标注豆瓣 logo 的高度和宽度。不仅仅是 logo 图有高度和宽度，搜索框，热搜主题等其它元素，几乎都有高度和宽度。</p>\n<p>那么在 HTML 语言中，我们如何指定元素的高度和宽度呢？</p>\n<p>我们先来写一段 HTML：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这是 div 标签里面的内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是 span 标签的内容<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后给它们定义样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/html-css-show.png\" alt=\"效果图\"></p>\n<p>发现一个问题：</p>\n<p><strong>我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？</strong></p>\n<p>其实在 HTML 中，我们可以把标签分为「块状元素」和「行内元素」，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。</p>\n<p>那么这两类元素有什么区别呢？</p>\n<p>从我们的代码的效果图里面我们已经看出来一个区别了：<strong>块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。</strong></p>\n<p>我们把上面元素的宽度和高度都删除，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-inline-elemet.png\" alt=\"效果图\"></p>\n<p>是不是又看出来一个区别呢？</p>\n<p><strong>块状元素是独占一行的，而行内元素只占本身内容的大小。</strong></p>\n<p>看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-element.jpg\" alt=\"效果图\"></p>\n<p><strong>即使我们设置了块状元素的高度和宽度，它还是独占一行的</strong>。真的是霸道啊！</p>\n<p>然而，现实中的网页（如豆瓣），很多内容块都是拼接的，如果我们使用块状元素来表示这些内容块，如果消除它独占一行的情况呢？</p>\n<p>关于这个问题，似乎有两种解决方案。</p>\n<h3 id=\"inline-block\"><a href=\"#inline-block\" class=\"headerlink\" title=\"inline-block\"></a>inline-block</h3><p>其实在 css 的 diplay 属性中，有一个属性值 <code>inline-block</code> 可以将标签呈现出「块状元素」和「行内元素」之间的中间态，即它可以拥有宽高度的同时，也可以具备行内元素的占位属性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后给它们定义样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看效果：<br><img src=\"/image/back-2-font-xinfa-1/inline-element-error.png\" alt=\"行内元素误差效果显示\"></p>\n<p>我们发现<strong>虽然两个 div 可以变成行内元素在一行显示，但是它们之间还是存在空白，不能完美的相邻在一起。这点空白会让我们的布局很不美观！</strong></p>\n<h3 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h3><p>上面我们说了，浮动可以把页面上的元素往某一个方向吸引，那么如何吸引呢？<br>在 CSS 中，我们可以通过 <code>float:left</code> 把元素往左边吸引</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color: red\"</span>&gt;</span>这是第一个区块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color: green\"</span>&gt;</span>这是第二个区块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用浮动：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-1.png\" alt=\"简单浮动效果图\"></p>\n<p>我们发现，通过浮动，可以使两个原本很难相邻在一起的块状元素，<strong>完美</strong> 的相邻在一起。</p>\n<p>使用 <code>left</code> 是把元素往左边吸引，而 <code>right</code> 是把元素往右边吸引。</p>\n<h2 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h2><p>上面我们已经介绍了浮动的基本用法，那么在实际的开发过程中，我们可能有这样的需要：我们有三个元素块状元素，前两个块状元素需要使用浮动进行相邻，在上一行；第三个元素不使用浮动，让他保持块状元素的特征在下一行。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float-div\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color: red\"</span>&gt;</span> 第一个浮动元素块 <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float-div\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color: green\"</span>&gt;</span> 第二个浮动元素块 <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nofloat-div\"</span>  <span class=\"attr\">style</span>=<span class=\"string\">\"background-color: yellow\"</span>&gt;</span> 非浮动元素块 <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>定义样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.float-div</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nofloat-div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看效果：<br><img src=\"/image/back-2-font-xinfa-1/float-problem.png\" alt=\"\"></p>\n<p>我去，我们的非浮动元素块去哪了？为什么只剩下文字了？ 这和我们预想的情况不一样啊！我们使用浏览器检查一下，发现，非浮动元素竟然跑到上面去了。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-problem-nofloat.png\" alt=\"\"></p>\n<p>这个不符合我们的需求啊！那么怎样解决这个问题呢？</p>\n<p>要解决这个问题，就要使用 <strong>清除浮动</strong></p>\n<p>我们在非浮动元素的样式里面添加一行 <code>clear:left</code>，即可实现清除浮动，让我们来看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/clear-left.png\" alt=\"\"></p>\n<p>真的把非浮动元素给压下来了！而且完美发符合我们的设计需求！</p>\n<p>我们来分析「 clear: left; 」这段代码：</p>\n<p>它用到的关键字是「 clear 」，它的含义是清除。</p>\n<p>而 「 left 」 代表是左边。</p>\n<p>那么它合起来的意思是：清除左边的浮动元素。</p>\n<p>说到更明白一点就是：不让当前元素的左边有浮动元素（也可以理解为让浮动元素持有站位空间）。于是就把非浮动元素压到下一行来咯。</p>\n<p>让我们再来拓展一下，clear 除了可以设置为 left，还可以设置为 「 right 」 和 「 both 」。</p>\n<p>我相信不用我说你们也明白了吧！</p>\n<p>right 就是不让当前元素 <strong>右边</strong> 存在浮动元素嘛。</p>\n<p>那 both 就是不让当前元素的 <strong>两边</strong> 出现浮动元素喽。</p>\n<p>到这里，我们介绍完了浮动布局和清除浮动的概念和基本用法，那它们在页面布局中是如何被使用的呢？</p>\n<h2 id=\"浮动布局–最佳实践\"><a href=\"#浮动布局–最佳实践\" class=\"headerlink\" title=\"浮动布局–最佳实践\"></a>浮动布局–最佳实践</h2><p>我们在心法篇中提到页面从上到下都是有层级的，那么我们如何进行明确的分层呢？</p>\n<p>如豆瓣的首页，有着明显是上下分层。在每一层中，我们都需要使用 <strong>浮动布局</strong> 来使我们的元素紧密的交叠在一起，但是在每一行的最后，我们需要使用 <strong>清除浮动</strong> 来让浮动元素保持站位空间。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/line.png\" alt=\"\"></p>\n<p>因此我们需要在每一行的末尾加一个空的 div 标签，并在设置它为清除浮动。</p>\n<p>在 CSS 中，我们可以使用 「after 选择器」 来实现添加元素，具体的用法可以参考:<a href=\"http://www.w3school.com.cn/cssref/selector_after.asp\" target=\"_blank\" rel=\"noopener\">W3C after 选择器</a></p>\n<p>下面直接给出代码： </p>\n<pre><code class=\"css\"><span class=\"selector-tag\">xxxdiv</span><span class=\"selector-pseudo\">:after</span>{\n      <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;\n      <span class=\"attribute\">clear</span>: both;\n      <span class=\"attribute\">display</span>: block;\n}\n</code></pre>\n<h2 id=\"心法小结\"><a href=\"#心法小结\" class=\"headerlink\" title=\"心法小结\"></a>心法小结</h2><p>最后，我们再来回顾一下文章介绍的一些心法：</p>\n<p><strong>1. HTML 分为块状元素和行内元素的，块状元素是独占一行的</strong></p>\n<p><strong>2. 浮动布局是解决多个块状元素在同一行的最佳方法</strong></p>\n<p><strong>3. 清除浮动是解决页面上下分层的一个重要方式</strong></p>\n<p><strong>4. 浮动 + 清除浮动是页面布局的一个最佳实践</strong></p>\n<p>文章中的一些招式可能说的太粗糙，先不用捉急，我们先学心法，招式到后面再专门的学习。</p>\n<p>我会在下一篇博文继续介绍心法 II。</p>\n","site":{"data":{}},"excerpt":"<p>上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：</p>\n<p><strong>从左到右，从上到下，化整为零。</strong></p>\n<p>那么在接下来的几篇文章中，我们就来聊聊页面布局的「心法」和一些具体的「招式」。</p>\n<p>那么什么是心法呢？</p>","more":"<p>如果说口诀是页面布局的原则，那么心法就是对页面布局中一些重要概念的认识。</p>\n<p>在上一篇文章，我们一直推荐使用高效的浮动布局，类似大家都玩过的磁铁，在磁铁的周围，所有的铁块会被磁铁所吸引。</p>\n<p>那么浮动就好比页面上的一块磁铁，它会吸引页面上的元素块，让它们朝一个方向进行组合、包含、交叠，进而完成整个页面的布局。</p>\n<p>下面就让我们来看看页面中元素有什么类型。</p>\n<h2 id=\"HTML-块状元素和行内元素\"><a href=\"#HTML-块状元素和行内元素\" class=\"headerlink\" title=\"HTML 块状元素和行内元素\"></a>HTML 块状元素和行内元素</h2><p>在我们熟知的页面布局中，网页的标题，logo等都是有高度和宽度的。我们来看下面的豆瓣首页的切图：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-index.png\" alt=\"豆瓣首页切图\"></p>\n<p>在上面的图片中，我们使用红色的线条和文字标注豆瓣 logo 的高度和宽度。不仅仅是 logo 图有高度和宽度，搜索框，热搜主题等其它元素，几乎都有高度和宽度。</p>\n<p>那么在 HTML 语言中，我们如何指定元素的高度和宽度呢？</p>\n<p>我们先来写一段 HTML：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这是 div 标签里面的内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是 span 标签的内容<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后给它们定义样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/html-css-show.png\" alt=\"效果图\"></p>\n<p>发现一个问题：</p>\n<p><strong>我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？</strong></p>\n<p>其实在 HTML 中，我们可以把标签分为「块状元素」和「行内元素」，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。</p>\n<p>那么这两类元素有什么区别呢？</p>\n<p>从我们的代码的效果图里面我们已经看出来一个区别了：<strong>块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。</strong></p>\n<p>我们把上面元素的宽度和高度都删除，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-inline-elemet.png\" alt=\"效果图\"></p>\n<p>是不是又看出来一个区别呢？</p>\n<p><strong>块状元素是独占一行的，而行内元素只占本身内容的大小。</strong></p>\n<p>看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-element.jpg\" alt=\"效果图\"></p>\n<p><strong>即使我们设置了块状元素的高度和宽度，它还是独占一行的</strong>。真的是霸道啊！</p>\n<p>然而，现实中的网页（如豆瓣），很多内容块都是拼接的，如果我们使用块状元素来表示这些内容块，如果消除它独占一行的情况呢？</p>\n<p>关于这个问题，似乎有两种解决方案。</p>\n<h3 id=\"inline-block\"><a href=\"#inline-block\" class=\"headerlink\" title=\"inline-block\"></a>inline-block</h3><p>其实在 css 的 diplay 属性中，有一个属性值 <code>inline-block</code> 可以将标签呈现出「块状元素」和「行内元素」之间的中间态，即它可以拥有宽高度的同时，也可以具备行内元素的占位属性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后给它们定义样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看效果：<br><img src=\"/image/back-2-font-xinfa-1/inline-element-error.png\" alt=\"行内元素误差效果显示\"></p>\n<p>我们发现<strong>虽然两个 div 可以变成行内元素在一行显示，但是它们之间还是存在空白，不能完美的相邻在一起。这点空白会让我们的布局很不美观！</strong></p>\n<h3 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h3><p>上面我们说了，浮动可以把页面上的元素往某一个方向吸引，那么如何吸引呢？<br>在 CSS 中，我们可以通过 <code>float:left</code> 把元素往左边吸引</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color: red\"</span>&gt;</span>这是第一个区块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color: green\"</span>&gt;</span>这是第二个区块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用浮动：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-1.png\" alt=\"简单浮动效果图\"></p>\n<p>我们发现，通过浮动，可以使两个原本很难相邻在一起的块状元素，<strong>完美</strong> 的相邻在一起。</p>\n<p>使用 <code>left</code> 是把元素往左边吸引，而 <code>right</code> 是把元素往右边吸引。</p>\n<h2 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h2><p>上面我们已经介绍了浮动的基本用法，那么在实际的开发过程中，我们可能有这样的需要：我们有三个元素块状元素，前两个块状元素需要使用浮动进行相邻，在上一行；第三个元素不使用浮动，让他保持块状元素的特征在下一行。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float-div\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color: red\"</span>&gt;</span> 第一个浮动元素块 <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float-div\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color: green\"</span>&gt;</span> 第二个浮动元素块 <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nofloat-div\"</span>  <span class=\"attr\">style</span>=<span class=\"string\">\"background-color: yellow\"</span>&gt;</span> 非浮动元素块 <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>定义样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.float-div</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nofloat-div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看效果：<br><img src=\"/image/back-2-font-xinfa-1/float-problem.png\" alt=\"\"></p>\n<p>我去，我们的非浮动元素块去哪了？为什么只剩下文字了？ 这和我们预想的情况不一样啊！我们使用浏览器检查一下，发现，非浮动元素竟然跑到上面去了。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-problem-nofloat.png\" alt=\"\"></p>\n<p>这个不符合我们的需求啊！那么怎样解决这个问题呢？</p>\n<p>要解决这个问题，就要使用 <strong>清除浮动</strong></p>\n<p>我们在非浮动元素的样式里面添加一行 <code>clear:left</code>，即可实现清除浮动，让我们来看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/clear-left.png\" alt=\"\"></p>\n<p>真的把非浮动元素给压下来了！而且完美发符合我们的设计需求！</p>\n<p>我们来分析「 clear: left; 」这段代码：</p>\n<p>它用到的关键字是「 clear 」，它的含义是清除。</p>\n<p>而 「 left 」 代表是左边。</p>\n<p>那么它合起来的意思是：清除左边的浮动元素。</p>\n<p>说到更明白一点就是：不让当前元素的左边有浮动元素（也可以理解为让浮动元素持有站位空间）。于是就把非浮动元素压到下一行来咯。</p>\n<p>让我们再来拓展一下，clear 除了可以设置为 left，还可以设置为 「 right 」 和 「 both 」。</p>\n<p>我相信不用我说你们也明白了吧！</p>\n<p>right 就是不让当前元素 <strong>右边</strong> 存在浮动元素嘛。</p>\n<p>那 both 就是不让当前元素的 <strong>两边</strong> 出现浮动元素喽。</p>\n<p>到这里，我们介绍完了浮动布局和清除浮动的概念和基本用法，那它们在页面布局中是如何被使用的呢？</p>\n<h2 id=\"浮动布局–最佳实践\"><a href=\"#浮动布局–最佳实践\" class=\"headerlink\" title=\"浮动布局–最佳实践\"></a>浮动布局–最佳实践</h2><p>我们在心法篇中提到页面从上到下都是有层级的，那么我们如何进行明确的分层呢？</p>\n<p>如豆瓣的首页，有着明显是上下分层。在每一层中，我们都需要使用 <strong>浮动布局</strong> 来使我们的元素紧密的交叠在一起，但是在每一行的最后，我们需要使用 <strong>清除浮动</strong> 来让浮动元素保持站位空间。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/line.png\" alt=\"\"></p>\n<p>因此我们需要在每一行的末尾加一个空的 div 标签，并在设置它为清除浮动。</p>\n<p>在 CSS 中，我们可以使用 「after 选择器」 来实现添加元素，具体的用法可以参考:<a href=\"http://www.w3school.com.cn/cssref/selector_after.asp\" target=\"_blank\" rel=\"noopener\">W3C after 选择器</a></p>\n<p>下面直接给出代码： </p>\n<pre><code class=\"css\"><span class=\"selector-tag\">xxxdiv</span><span class=\"selector-pseudo\">:after</span>{\n      <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;\n      <span class=\"attribute\">clear</span>: both;\n      <span class=\"attribute\">display</span>: block;\n}\n</code></pre>\n<h2 id=\"心法小结\"><a href=\"#心法小结\" class=\"headerlink\" title=\"心法小结\"></a>心法小结</h2><p>最后，我们再来回顾一下文章介绍的一些心法：</p>\n<p><strong>1. HTML 分为块状元素和行内元素的，块状元素是独占一行的</strong></p>\n<p><strong>2. 浮动布局是解决多个块状元素在同一行的最佳方法</strong></p>\n<p><strong>3. 清除浮动是解决页面上下分层的一个重要方式</strong></p>\n<p><strong>4. 浮动 + 清除浮动是页面布局的一个最佳实践</strong></p>\n<p>文章中的一些招式可能说的太粗糙，先不用捉急，我们先学心法，招式到后面再专门的学习。</p>\n<p>我会在下一篇博文继续介绍心法 II。</p>"},{"title":"后端工程师入门前端页面重构（二）：心法 I","_content":"\n上一篇博客我们介绍了布局的口诀，这篇博客我们介绍布局的心法－**清除浮动**。\n\n「清除浮动」这个四个字现在看来有点难懂，我们先不管它。\n\n我们先来写一个简单的浮动布局。\n\n## 一个简单的浮动布局\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>简单的浮动布局</title>\n    \t<style type=\"text/css\">\n    \t\t.block-1{\n    \t\t\twidth: 200px;\n    \t\t\theight: 200px;\n    \t\t\tfloat: left;\n    \t\t\tbackground: red;\n    \t\t}\n    \n    \t\t.block-2{\n    \t\t\twidth: 200px;\n    \t\t\theight: 200px;\n    \t\t\tfloat: left;\n    \t\t\tbackground: green;\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n    \t这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n    \t这是第二个区块\n    </div>\n    </body>\n    </html>\n       \n<code/>\n\n![效果图](/image/back-2-font-xinfa-1/float-layout-show-1.png)\n\n上面的这段代码很简单，我们使用　DIV　标签画了两个　200 * 200　的区块，它们分别是「block-1」、「block-2」，并且设置它们为「左浮动」，然后发现它们的彼此紧挨着。\n\n这段代码没问题，我们可以使用谷歌浏览器来检查一下它们的高度和宽度，和我们设置的完全一样。\n\n![](/image/back-2-font-xinfa-1/div-show-height.png)\n\n如果你想看看它们浮动前样子，可以把两个 DIV 的　<code>float: left;</code> 注释掉，我保证你会被它们的样子吓到。\n\n## 还是一个简单的浮动布局\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>还是一个简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                float: left;\n                background: red;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                float: left;\n                background: green;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"block-1\">\n                我是第一个子元素\n            </div>\n    \n            <div class=\"block-2\">\n                我是第二个子元素\n            </div>\n        </div>\n    </body>\n    </html>\n    \n</code>\n\n![效果图](/image/back-2-font-xinfa-1/float-layout-show-2.png)\n\n这段代码还是很简单，我们还是使用　DIV　标签画了两个　200 * 200　区块，和之前代码的唯一区别在于\n\n这两个区块被一个「父区块 parent」包含着。\n\n这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。\n\n![](/image/back-2-font-xinfa-1/second-check-child.png)\n\n子元素宽度和高度都是 OK 的。\n\n我们再来看看它父元素高度和宽度。\n\n![](/image/back-2-font-xinfa-1/parent-check.png)\n\n我去！父元素的高度竟然是 **０**！！　我是不是安装了假的浏览器！\n\n解铃还须系铃人，要想知道原因，我们需要去了解一下　DIV　标签和「浮动」的之间的关系。\n\n\n## 这也是一个简单的浮动布局\n\n还是一个很简单的布局，我们有三个DIV区块，分别为「first」、「second」、「third」它们父区块「parent」包含着\n\n并且设置三个DIV区块为浮动的。\n\n代码如下：\n<code>\n    \n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS的前世今生</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n        </div>\n    </body>\n    </html>\n    \n</code>\n\n![效果图](/image/back-2-font-xinfa-1/div-float-1.png)\n\n\n我们使用谷歌浏览器来检查一下，发现子元素的高度和宽度和设置的值一样，但是父元素高度还是为０。\n\n![](/image/back-2-font-xinfa-1/origin-parent-height.png)\n\n\n现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做。\n\n这就要用到我们这篇博文的主题：「清除浮动」。\n\n我们只要在第三块区块的「.third」中添加<code>clear: left;</code> 即可。\n\n话不多说，让我们先看效果。\n\n![添加 clear: left;的效果图](/image/back-2-font-xinfa-1/add-clear-left-1.png)\n\n真的把第三个区块给压下来了！\n\n让我们再次来分析这段代码<code>clear: left;</code>：\n\n它用到的关键字是 **clear**，它的含义是**不让当前元素的的左边或者右边存在浮动元素**。\n\n当前元素是第三个区块，它的左边有两个浮动元素 first和second。\n\n那这段代码的意思就是：**不让第三个区块左边有浮动元素**，那浏览器这么处理呢？\n\n浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到下一行来吧！”\n\n于是第三个区块就到了下一行啦。  \n\n是不是很简单呢！\n\n其实clear还可以有right和both,用法和left是一样的。只不过both是左右两边都不允许有浮动元素。\n\n说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！\n\n## 父元素高度真的需要吗？\n\n![](/image/back-2-font-xinfa-1/clear-float-parent.png)\n\n那么，在解决之前，我们有一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。\n\n我的实习导师告诉我：“这是不行的。**浮动布局的占位空间往往是我们理想的父元素高度。**”\n\n他说的太抽象，我们来说的直白一点：\n\n「在布局中我们往往使用浮动布局来实现某一块区域的布局」。\n\n「然后我们最好用一个DIV去包裹整个浮动布局，用于和其它的布局区分开」。\n\n「最后我们要求这个父DIV和高度要和浮动布局的高度一样」。\n\n对于上面的三点内容，前两点我们已经做到了。在上面的代码中，我们使用「parent」包裹着「first」、「second」、「third」，并且\n\n而且它们都是浮动的。\n\n其实第三个我们可以这么解决：我们在父区块最后面增加一个空的DIV,让设置它为clear:both。\n\n为什么要加上<code>clear:both</code>呢？\n\n**因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受其它浮动元素干扰,我们必须清除浮动对它的干扰。**\n\n注意它不是浮动元素哦。\n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS的前世今生</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n            .last{\n                clear: both;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n            <div class=\"last\">\n    \n            </div>\n        </div>\n    </body>\n    </html>\n\n</code>\n\n然后我们会发现，父元素竟然有高度了，而且和浮动元素的高度是一样的！\n![父元素有高度了](/image/back-2-font-xinfa-1/parrent-height.png)\n\n\n## 清除浮动－最佳实践\n\n上面解决问题的方法是我们在每个父区块最后添加一个空的 DIV，这样的做法是**低效的**！\n\n因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。\n\n我们可不可以在某个地方统一定义，然后全局使用呢？\n\n回答是肯定。\n\n这就要使用到 CSS 的「伪类」,伪类的具体用法可以参考[W3C的CSS伪类教程。](http://www.w3school.com.cn/css/css_pseudo_elements.asp)\n\n我们这里就给出如何使用伪类来清除浮动的最佳实践的代码。\n\n这里使用的是「after」,它可以在被指定的元素最后添加元素，并且设置被添加元素「内容为空」，「清除浮动」和「块级显示」这三个属性。\n\n<code>\n    \n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS的前世今生</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n    \n            /*\n              after 伪类\n             */\n            .parent:after{\n                content: \"\";\n                clear: both;\n                display: block;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n    \n        </div>\n    </body>\n    </html>\n    \n</code>\n\n![使用伪类后的效果图](/image/back-2-font-xinfa-1/div-float-after.png)\n\n这篇文章我们主要介绍了清除浮动和它的最佳实践，你们学会了吗？是不是感觉很简单呢？\n\n我们会在下一篇博文继续介绍心法","source":"_drafts/xinfa-1/back-2-font-xinfa-1.md","raw":"\n---\ntitle: 后端工程师入门前端页面重构（二）：心法 I\n---\n\n上一篇博客我们介绍了布局的口诀，这篇博客我们介绍布局的心法－**清除浮动**。\n\n「清除浮动」这个四个字现在看来有点难懂，我们先不管它。\n\n我们先来写一个简单的浮动布局。\n\n## 一个简单的浮动布局\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>简单的浮动布局</title>\n    \t<style type=\"text/css\">\n    \t\t.block-1{\n    \t\t\twidth: 200px;\n    \t\t\theight: 200px;\n    \t\t\tfloat: left;\n    \t\t\tbackground: red;\n    \t\t}\n    \n    \t\t.block-2{\n    \t\t\twidth: 200px;\n    \t\t\theight: 200px;\n    \t\t\tfloat: left;\n    \t\t\tbackground: green;\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n    \t这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n    \t这是第二个区块\n    </div>\n    </body>\n    </html>\n       \n<code/>\n\n![效果图](/image/back-2-font-xinfa-1/float-layout-show-1.png)\n\n上面的这段代码很简单，我们使用　DIV　标签画了两个　200 * 200　的区块，它们分别是「block-1」、「block-2」，并且设置它们为「左浮动」，然后发现它们的彼此紧挨着。\n\n这段代码没问题，我们可以使用谷歌浏览器来检查一下它们的高度和宽度，和我们设置的完全一样。\n\n![](/image/back-2-font-xinfa-1/div-show-height.png)\n\n如果你想看看它们浮动前样子，可以把两个 DIV 的　<code>float: left;</code> 注释掉，我保证你会被它们的样子吓到。\n\n## 还是一个简单的浮动布局\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>还是一个简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                float: left;\n                background: red;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                float: left;\n                background: green;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"block-1\">\n                我是第一个子元素\n            </div>\n    \n            <div class=\"block-2\">\n                我是第二个子元素\n            </div>\n        </div>\n    </body>\n    </html>\n    \n</code>\n\n![效果图](/image/back-2-font-xinfa-1/float-layout-show-2.png)\n\n这段代码还是很简单，我们还是使用　DIV　标签画了两个　200 * 200　区块，和之前代码的唯一区别在于\n\n这两个区块被一个「父区块 parent」包含着。\n\n这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。\n\n![](/image/back-2-font-xinfa-1/second-check-child.png)\n\n子元素宽度和高度都是 OK 的。\n\n我们再来看看它父元素高度和宽度。\n\n![](/image/back-2-font-xinfa-1/parent-check.png)\n\n我去！父元素的高度竟然是 **０**！！　我是不是安装了假的浏览器！\n\n解铃还须系铃人，要想知道原因，我们需要去了解一下　DIV　标签和「浮动」的之间的关系。\n\n\n## 这也是一个简单的浮动布局\n\n还是一个很简单的布局，我们有三个DIV区块，分别为「first」、「second」、「third」它们父区块「parent」包含着\n\n并且设置三个DIV区块为浮动的。\n\n代码如下：\n<code>\n    \n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS的前世今生</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n        </div>\n    </body>\n    </html>\n    \n</code>\n\n![效果图](/image/back-2-font-xinfa-1/div-float-1.png)\n\n\n我们使用谷歌浏览器来检查一下，发现子元素的高度和宽度和设置的值一样，但是父元素高度还是为０。\n\n![](/image/back-2-font-xinfa-1/origin-parent-height.png)\n\n\n现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做。\n\n这就要用到我们这篇博文的主题：「清除浮动」。\n\n我们只要在第三块区块的「.third」中添加<code>clear: left;</code> 即可。\n\n话不多说，让我们先看效果。\n\n![添加 clear: left;的效果图](/image/back-2-font-xinfa-1/add-clear-left-1.png)\n\n真的把第三个区块给压下来了！\n\n让我们再次来分析这段代码<code>clear: left;</code>：\n\n它用到的关键字是 **clear**，它的含义是**不让当前元素的的左边或者右边存在浮动元素**。\n\n当前元素是第三个区块，它的左边有两个浮动元素 first和second。\n\n那这段代码的意思就是：**不让第三个区块左边有浮动元素**，那浏览器这么处理呢？\n\n浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到下一行来吧！”\n\n于是第三个区块就到了下一行啦。  \n\n是不是很简单呢！\n\n其实clear还可以有right和both,用法和left是一样的。只不过both是左右两边都不允许有浮动元素。\n\n说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！\n\n## 父元素高度真的需要吗？\n\n![](/image/back-2-font-xinfa-1/clear-float-parent.png)\n\n那么，在解决之前，我们有一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。\n\n我的实习导师告诉我：“这是不行的。**浮动布局的占位空间往往是我们理想的父元素高度。**”\n\n他说的太抽象，我们来说的直白一点：\n\n「在布局中我们往往使用浮动布局来实现某一块区域的布局」。\n\n「然后我们最好用一个DIV去包裹整个浮动布局，用于和其它的布局区分开」。\n\n「最后我们要求这个父DIV和高度要和浮动布局的高度一样」。\n\n对于上面的三点内容，前两点我们已经做到了。在上面的代码中，我们使用「parent」包裹着「first」、「second」、「third」，并且\n\n而且它们都是浮动的。\n\n其实第三个我们可以这么解决：我们在父区块最后面增加一个空的DIV,让设置它为clear:both。\n\n为什么要加上<code>clear:both</code>呢？\n\n**因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受其它浮动元素干扰,我们必须清除浮动对它的干扰。**\n\n注意它不是浮动元素哦。\n\n<code>\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS的前世今生</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n            .last{\n                clear: both;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n            <div class=\"last\">\n    \n            </div>\n        </div>\n    </body>\n    </html>\n\n</code>\n\n然后我们会发现，父元素竟然有高度了，而且和浮动元素的高度是一样的！\n![父元素有高度了](/image/back-2-font-xinfa-1/parrent-height.png)\n\n\n## 清除浮动－最佳实践\n\n上面解决问题的方法是我们在每个父区块最后添加一个空的 DIV，这样的做法是**低效的**！\n\n因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。\n\n我们可不可以在某个地方统一定义，然后全局使用呢？\n\n回答是肯定。\n\n这就要使用到 CSS 的「伪类」,伪类的具体用法可以参考[W3C的CSS伪类教程。](http://www.w3school.com.cn/css/css_pseudo_elements.asp)\n\n我们这里就给出如何使用伪类来清除浮动的最佳实践的代码。\n\n这里使用的是「after」,它可以在被指定的元素最后添加元素，并且设置被添加元素「内容为空」，「清除浮动」和「块级显示」这三个属性。\n\n<code>\n    \n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS的前世今生</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n    \n            /*\n              after 伪类\n             */\n            .parent:after{\n                content: \"\";\n                clear: both;\n                display: block;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n    \n        </div>\n    </body>\n    </html>\n    \n</code>\n\n![使用伪类后的效果图](/image/back-2-font-xinfa-1/div-float-after.png)\n\n这篇文章我们主要介绍了清除浮动和它的最佳实践，你们学会了吗？是不是感觉很简单呢？\n\n我们会在下一篇博文继续介绍心法","slug":"xinfa-1/back-2-font-xinfa-1","published":0,"date":"2018-02-18T08:12:37.445Z","updated":"2018-02-18T08:12:37.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpkb0009mc556bry6m5c","content":"<p>上一篇博客我们介绍了布局的口诀，这篇博客我们介绍布局的心法－<strong>清除浮动</strong>。</p>\n<p>「清除浮动」这个四个字现在看来有点难懂，我们先不管它。</p>\n<p>我们先来写一个简单的浮动布局。</p>\n<h2 id=\"一个简单的浮动布局\"><a href=\"#一个简单的浮动布局\" class=\"headerlink\" title=\"一个简单的浮动布局\"></a>一个简单的浮动布局</h2><p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;简单的浮动布局&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .block-1{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: red;\n        }\n\n        .block-2{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: green;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div class=&quot;block-1&quot;&gt;\n    这是第一个区块\n&lt;/div&gt;\n\n&lt;div class=&quot;block-2&quot;&gt;\n    这是第二个区块\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p><code></code></p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-1.png\" alt=\"效果图\"></p>\n<p>上面的这段代码很简单，我们使用　DIV　标签画了两个　200 * 200　的区块，它们分别是「block-1」、「block-2」，并且设置它们为「左浮动」，然后发现它们的彼此紧挨着。</p>\n<p>这段代码没问题，我们可以使用谷歌浏览器来检查一下它们的高度和宽度，和我们设置的完全一样。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-show-height.png\" alt=\"\"></p>\n<p>如果你想看看它们浮动前样子，可以把两个 DIV 的　<code>float: left;</code> 注释掉，我保证你会被它们的样子吓到。</p>\n<h2 id=\"还是一个简单的浮动布局\"><a href=\"#还是一个简单的浮动布局\" class=\"headerlink\" title=\"还是一个简单的浮动布局\"></a>还是一个简单的浮动布局</h2><p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;还是一个简单的浮动布局&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .block-1{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: red;\n        }\n\n        .block-2{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: green;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;block-1&quot;&gt;\n            我是第一个子元素\n        &lt;/div&gt;\n\n        &lt;div class=&quot;block-2&quot;&gt;\n            我是第二个子元素\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-2.png\" alt=\"效果图\"></p>\n<p>这段代码还是很简单，我们还是使用　DIV　标签画了两个　200 * 200　区块，和之前代码的唯一区别在于</p>\n<p>这两个区块被一个「父区块 parent」包含着。</p>\n<p>这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/second-check-child.png\" alt=\"\"></p>\n<p>子元素宽度和高度都是 OK 的。</p>\n<p>我们再来看看它父元素高度和宽度。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parent-check.png\" alt=\"\"></p>\n<p>我去！父元素的高度竟然是 <strong>０</strong>！！　我是不是安装了假的浏览器！</p>\n<p>解铃还须系铃人，要想知道原因，我们需要去了解一下　DIV　标签和「浮动」的之间的关系。</p>\n<h2 id=\"这也是一个简单的浮动布局\"><a href=\"#这也是一个简单的浮动布局\" class=\"headerlink\" title=\"这也是一个简单的浮动布局\"></a>这也是一个简单的浮动布局</h2><p>还是一个很简单的布局，我们有三个DIV区块，分别为「first」、「second」、「third」它们父区块「parent」包含着</p>\n<p>并且设置三个DIV区块为浮动的。</p>\n<p>代码如下：<br><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;DIV和CSS的前世今生&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            float: left;\n            background: green;\n            width: 200px;\n            height: 200px;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;first&quot;&gt;\n            第一个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;second&quot;&gt;\n            第二个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;third&quot;&gt;\n            第三个区块\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-1.png\" alt=\"效果图\"></p>\n<p>我们使用谷歌浏览器来检查一下，发现子元素的高度和宽度和设置的值一样，但是父元素高度还是为０。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/origin-parent-height.png\" alt=\"\"></p>\n<p>现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做。</p>\n<p>这就要用到我们这篇博文的主题：「清除浮动」。</p>\n<p>我们只要在第三块区块的「.third」中添加<code>clear: left;</code> 即可。</p>\n<p>话不多说，让我们先看效果。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/add-clear-left-1.png\" alt=\"添加 clear: left;的效果图\"></p>\n<p>真的把第三个区块给压下来了！</p>\n<p>让我们再次来分析这段代码<code>clear: left;</code>：</p>\n<p>它用到的关键字是 <strong>clear</strong>，它的含义是<strong>不让当前元素的的左边或者右边存在浮动元素</strong>。</p>\n<p>当前元素是第三个区块，它的左边有两个浮动元素 first和second。</p>\n<p>那这段代码的意思就是：<strong>不让第三个区块左边有浮动元素</strong>，那浏览器这么处理呢？</p>\n<p>浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到下一行来吧！”</p>\n<p>于是第三个区块就到了下一行啦。  </p>\n<p>是不是很简单呢！</p>\n<p>其实clear还可以有right和both,用法和left是一样的。只不过both是左右两边都不允许有浮动元素。</p>\n<p>说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！</p>\n<h2 id=\"父元素高度真的需要吗？\"><a href=\"#父元素高度真的需要吗？\" class=\"headerlink\" title=\"父元素高度真的需要吗？\"></a>父元素高度真的需要吗？</h2><p><img src=\"/image/back-2-font-xinfa-1/clear-float-parent.png\" alt=\"\"></p>\n<p>那么，在解决之前，我们有一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。</p>\n<p>我的实习导师告诉我：“这是不行的。<strong>浮动布局的占位空间往往是我们理想的父元素高度。</strong>”</p>\n<p>他说的太抽象，我们来说的直白一点：</p>\n<p>「在布局中我们往往使用浮动布局来实现某一块区域的布局」。</p>\n<p>「然后我们最好用一个DIV去包裹整个浮动布局，用于和其它的布局区分开」。</p>\n<p>「最后我们要求这个父DIV和高度要和浮动布局的高度一样」。</p>\n<p>对于上面的三点内容，前两点我们已经做到了。在上面的代码中，我们使用「parent」包裹着「first」、「second」、「third」，并且</p>\n<p>而且它们都是浮动的。</p>\n<p>其实第三个我们可以这么解决：我们在父区块最后面增加一个空的DIV,让设置它为clear:both。</p>\n<p>为什么要加上<code>clear:both</code>呢？</p>\n<p><strong>因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受其它浮动元素干扰,我们必须清除浮动对它的干扰。</strong></p>\n<p>注意它不是浮动元素哦。</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;DIV和CSS的前世今生&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            float: left;\n            background: green;\n            width: 200px;\n            height: 200px;\n            clear: left;\n        }\n        .last{\n            clear: both;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;first&quot;&gt;\n            第一个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;second&quot;&gt;\n            第二个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;third&quot;&gt;\n            第三个区块\n        &lt;/div&gt;\n        &lt;div class=&quot;last&quot;&gt;\n\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p>然后我们会发现，父元素竟然有高度了，而且和浮动元素的高度是一样的！<br><img src=\"/image/back-2-font-xinfa-1/parrent-height.png\" alt=\"父元素有高度了\"></p>\n<h2 id=\"清除浮动－最佳实践\"><a href=\"#清除浮动－最佳实践\" class=\"headerlink\" title=\"清除浮动－最佳实践\"></a>清除浮动－最佳实践</h2><p>上面解决问题的方法是我们在每个父区块最后添加一个空的 DIV，这样的做法是<strong>低效的</strong>！</p>\n<p>因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。</p>\n<p>我们可不可以在某个地方统一定义，然后全局使用呢？</p>\n<p>回答是肯定。</p>\n<p>这就要使用到 CSS 的「伪类」,伪类的具体用法可以参考<a href=\"http://www.w3school.com.cn/css/css_pseudo_elements.asp\" target=\"_blank\" rel=\"noopener\">W3C的CSS伪类教程。</a></p>\n<p>我们这里就给出如何使用伪类来清除浮动的最佳实践的代码。</p>\n<p>这里使用的是「after」,它可以在被指定的元素最后添加元素，并且设置被添加元素「内容为空」，「清除浮动」和「块级显示」这三个属性。</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;DIV和CSS的前世今生&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            float: left;\n            background: green;\n            width: 200px;\n            height: 200px;\n            clear: left;\n        }\n\n        /*\n          after 伪类\n         */\n        .parent:after{\n            content: &quot;&quot;;\n            clear: both;\n            display: block;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;first&quot;&gt;\n            第一个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;second&quot;&gt;\n            第二个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;third&quot;&gt;\n            第三个区块\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-after.png\" alt=\"使用伪类后的效果图\"></p>\n<p>这篇文章我们主要介绍了清除浮动和它的最佳实践，你们学会了吗？是不是感觉很简单呢？</p>\n<p>我们会在下一篇博文继续介绍心法</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇博客我们介绍了布局的口诀，这篇博客我们介绍布局的心法－<strong>清除浮动</strong>。</p>\n<p>「清除浮动」这个四个字现在看来有点难懂，我们先不管它。</p>\n<p>我们先来写一个简单的浮动布局。</p>\n<h2 id=\"一个简单的浮动布局\"><a href=\"#一个简单的浮动布局\" class=\"headerlink\" title=\"一个简单的浮动布局\"></a>一个简单的浮动布局</h2><p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;简单的浮动布局&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .block-1{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: red;\n        }\n\n        .block-2{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: green;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div class=&quot;block-1&quot;&gt;\n    这是第一个区块\n&lt;/div&gt;\n\n&lt;div class=&quot;block-2&quot;&gt;\n    这是第二个区块\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p><code></code></p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-1.png\" alt=\"效果图\"></p>\n<p>上面的这段代码很简单，我们使用　DIV　标签画了两个　200 * 200　的区块，它们分别是「block-1」、「block-2」，并且设置它们为「左浮动」，然后发现它们的彼此紧挨着。</p>\n<p>这段代码没问题，我们可以使用谷歌浏览器来检查一下它们的高度和宽度，和我们设置的完全一样。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-show-height.png\" alt=\"\"></p>\n<p>如果你想看看它们浮动前样子，可以把两个 DIV 的　<code>float: left;</code> 注释掉，我保证你会被它们的样子吓到。</p>\n<h2 id=\"还是一个简单的浮动布局\"><a href=\"#还是一个简单的浮动布局\" class=\"headerlink\" title=\"还是一个简单的浮动布局\"></a>还是一个简单的浮动布局</h2><p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;还是一个简单的浮动布局&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .block-1{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: red;\n        }\n\n        .block-2{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: green;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;block-1&quot;&gt;\n            我是第一个子元素\n        &lt;/div&gt;\n\n        &lt;div class=&quot;block-2&quot;&gt;\n            我是第二个子元素\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-2.png\" alt=\"效果图\"></p>\n<p>这段代码还是很简单，我们还是使用　DIV　标签画了两个　200 * 200　区块，和之前代码的唯一区别在于</p>\n<p>这两个区块被一个「父区块 parent」包含着。</p>\n<p>这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/second-check-child.png\" alt=\"\"></p>\n<p>子元素宽度和高度都是 OK 的。</p>\n<p>我们再来看看它父元素高度和宽度。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parent-check.png\" alt=\"\"></p>\n<p>我去！父元素的高度竟然是 <strong>０</strong>！！　我是不是安装了假的浏览器！</p>\n<p>解铃还须系铃人，要想知道原因，我们需要去了解一下　DIV　标签和「浮动」的之间的关系。</p>\n<h2 id=\"这也是一个简单的浮动布局\"><a href=\"#这也是一个简单的浮动布局\" class=\"headerlink\" title=\"这也是一个简单的浮动布局\"></a>这也是一个简单的浮动布局</h2><p>还是一个很简单的布局，我们有三个DIV区块，分别为「first」、「second」、「third」它们父区块「parent」包含着</p>\n<p>并且设置三个DIV区块为浮动的。</p>\n<p>代码如下：<br><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;DIV和CSS的前世今生&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            float: left;\n            background: green;\n            width: 200px;\n            height: 200px;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;first&quot;&gt;\n            第一个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;second&quot;&gt;\n            第二个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;third&quot;&gt;\n            第三个区块\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-1.png\" alt=\"效果图\"></p>\n<p>我们使用谷歌浏览器来检查一下，发现子元素的高度和宽度和设置的值一样，但是父元素高度还是为０。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/origin-parent-height.png\" alt=\"\"></p>\n<p>现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做。</p>\n<p>这就要用到我们这篇博文的主题：「清除浮动」。</p>\n<p>我们只要在第三块区块的「.third」中添加<code>clear: left;</code> 即可。</p>\n<p>话不多说，让我们先看效果。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/add-clear-left-1.png\" alt=\"添加 clear: left;的效果图\"></p>\n<p>真的把第三个区块给压下来了！</p>\n<p>让我们再次来分析这段代码<code>clear: left;</code>：</p>\n<p>它用到的关键字是 <strong>clear</strong>，它的含义是<strong>不让当前元素的的左边或者右边存在浮动元素</strong>。</p>\n<p>当前元素是第三个区块，它的左边有两个浮动元素 first和second。</p>\n<p>那这段代码的意思就是：<strong>不让第三个区块左边有浮动元素</strong>，那浏览器这么处理呢？</p>\n<p>浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到下一行来吧！”</p>\n<p>于是第三个区块就到了下一行啦。  </p>\n<p>是不是很简单呢！</p>\n<p>其实clear还可以有right和both,用法和left是一样的。只不过both是左右两边都不允许有浮动元素。</p>\n<p>说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！</p>\n<h2 id=\"父元素高度真的需要吗？\"><a href=\"#父元素高度真的需要吗？\" class=\"headerlink\" title=\"父元素高度真的需要吗？\"></a>父元素高度真的需要吗？</h2><p><img src=\"/image/back-2-font-xinfa-1/clear-float-parent.png\" alt=\"\"></p>\n<p>那么，在解决之前，我们有一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。</p>\n<p>我的实习导师告诉我：“这是不行的。<strong>浮动布局的占位空间往往是我们理想的父元素高度。</strong>”</p>\n<p>他说的太抽象，我们来说的直白一点：</p>\n<p>「在布局中我们往往使用浮动布局来实现某一块区域的布局」。</p>\n<p>「然后我们最好用一个DIV去包裹整个浮动布局，用于和其它的布局区分开」。</p>\n<p>「最后我们要求这个父DIV和高度要和浮动布局的高度一样」。</p>\n<p>对于上面的三点内容，前两点我们已经做到了。在上面的代码中，我们使用「parent」包裹着「first」、「second」、「third」，并且</p>\n<p>而且它们都是浮动的。</p>\n<p>其实第三个我们可以这么解决：我们在父区块最后面增加一个空的DIV,让设置它为clear:both。</p>\n<p>为什么要加上<code>clear:both</code>呢？</p>\n<p><strong>因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受其它浮动元素干扰,我们必须清除浮动对它的干扰。</strong></p>\n<p>注意它不是浮动元素哦。</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;DIV和CSS的前世今生&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            float: left;\n            background: green;\n            width: 200px;\n            height: 200px;\n            clear: left;\n        }\n        .last{\n            clear: both;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;first&quot;&gt;\n            第一个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;second&quot;&gt;\n            第二个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;third&quot;&gt;\n            第三个区块\n        &lt;/div&gt;\n        &lt;div class=&quot;last&quot;&gt;\n\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p>然后我们会发现，父元素竟然有高度了，而且和浮动元素的高度是一样的！<br><img src=\"/image/back-2-font-xinfa-1/parrent-height.png\" alt=\"父元素有高度了\"></p>\n<h2 id=\"清除浮动－最佳实践\"><a href=\"#清除浮动－最佳实践\" class=\"headerlink\" title=\"清除浮动－最佳实践\"></a>清除浮动－最佳实践</h2><p>上面解决问题的方法是我们在每个父区块最后添加一个空的 DIV，这样的做法是<strong>低效的</strong>！</p>\n<p>因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。</p>\n<p>我们可不可以在某个地方统一定义，然后全局使用呢？</p>\n<p>回答是肯定。</p>\n<p>这就要使用到 CSS 的「伪类」,伪类的具体用法可以参考<a href=\"http://www.w3school.com.cn/css/css_pseudo_elements.asp\" target=\"_blank\" rel=\"noopener\">W3C的CSS伪类教程。</a></p>\n<p>我们这里就给出如何使用伪类来清除浮动的最佳实践的代码。</p>\n<p>这里使用的是「after」,它可以在被指定的元素最后添加元素，并且设置被添加元素「内容为空」，「清除浮动」和「块级显示」这三个属性。</p>\n<p><code></code></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;DIV和CSS的前世今生&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            float: left;\n            background: green;\n            width: 200px;\n            height: 200px;\n            clear: left;\n        }\n\n        /*\n          after 伪类\n         */\n        .parent:after{\n            content: &quot;&quot;;\n            clear: both;\n            display: block;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;parent&quot;&gt;\n        &lt;div class=&quot;first&quot;&gt;\n            第一个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;second&quot;&gt;\n            第二个区块\n        &lt;/div&gt;\n\n        &lt;div class=&quot;third&quot;&gt;\n            第三个区块\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p></p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-after.png\" alt=\"使用伪类后的效果图\"></p>\n<p>这篇文章我们主要介绍了清除浮动和它的最佳实践，你们学会了吗？是不是感觉很简单呢？</p>\n<p>我们会在下一篇博文继续介绍心法</p>\n"},{"_content":"","source":"_drafts/code/xinfan-1/test.html","raw":"","slug":"code/xinfan-1/test","published":0,"date":"2018-02-18T08:12:37.445Z","updated":"2018-02-18T08:12:37.445Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpkx000emc5555vbwp9v","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"# play-scala-starter-example\n\n[<img src=\"https://img.shields.io/travis/playframework/play-scala-starter-example.svg\"/>](https://travis-ci.org/playframework/play-scala-starter-example)\n\nThis is a starter application that shows how Play works.  Please see the documentation at <https://www.playframework.com/documentation/latest/Home> for more details.\n\n## Running\n\nRun this using [sbt](http://www.scala-sbt.org/).  If you downloaded this project from <http://www.playframework.com/download> then you'll find a prepackaged version of sbt in the project directory:\n\n```bash\nsbt run\n```\n\nAnd then go to <http://localhost:9000> to see the running web application.\n\nThere are several demonstration files available in this template.\n\n## Controllers\n\n- HomeController.scala:\n\n  Shows how to handle simple HTTP requests.\n\n- AsyncController.scala:\n\n  Shows how to do asynchronous programming when handling a request.\n\n- CountController.scala:\n\n  Shows how to inject a component into a controller and use the component when\n  handling requests.\n\n## Components\n\n- Module.scala:\n\n  Shows how to use Guice to bind all the components needed by your application.\n\n- Counter.scala:\n\n  An example of a component that contains state, in this case a simple counter.\n\n- ApplicationTimer.scala:\n\n  An example of a component that starts when the application starts and stops\n  when the application stops.\n\n## Filters\n\n- Filters.scala:\n\n  Creates the list of HTTP filters used by your application.\n\n- ExampleFilter.scala\n\n  A simple filter that adds a header to every response.\n","source":"_drafts/2018/01/README.md","raw":"# play-scala-starter-example\n\n[<img src=\"https://img.shields.io/travis/playframework/play-scala-starter-example.svg\"/>](https://travis-ci.org/playframework/play-scala-starter-example)\n\nThis is a starter application that shows how Play works.  Please see the documentation at <https://www.playframework.com/documentation/latest/Home> for more details.\n\n## Running\n\nRun this using [sbt](http://www.scala-sbt.org/).  If you downloaded this project from <http://www.playframework.com/download> then you'll find a prepackaged version of sbt in the project directory:\n\n```bash\nsbt run\n```\n\nAnd then go to <http://localhost:9000> to see the running web application.\n\nThere are several demonstration files available in this template.\n\n## Controllers\n\n- HomeController.scala:\n\n  Shows how to handle simple HTTP requests.\n\n- AsyncController.scala:\n\n  Shows how to do asynchronous programming when handling a request.\n\n- CountController.scala:\n\n  Shows how to inject a component into a controller and use the component when\n  handling requests.\n\n## Components\n\n- Module.scala:\n\n  Shows how to use Guice to bind all the components needed by your application.\n\n- Counter.scala:\n\n  An example of a component that contains state, in this case a simple counter.\n\n- ApplicationTimer.scala:\n\n  An example of a component that starts when the application starts and stops\n  when the application stops.\n\n## Filters\n\n- Filters.scala:\n\n  Creates the list of HTTP filters used by your application.\n\n- ExampleFilter.scala\n\n  A simple filter that adds a header to every response.\n","slug":"2018/01/README","published":0,"date":"2018-02-18T08:12:37.445Z","updated":"2018-02-18T08:12:37.445Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpll000fmc55wqlwcfnh","content":"<h1 id=\"play-scala-starter-example\"><a href=\"#play-scala-starter-example\" class=\"headerlink\" title=\"play-scala-starter-example\"></a>play-scala-starter-example</h1><p><a href=\"https://travis-ci.org/playframework/play-scala-starter-example\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/travis/playframework/play-scala-starter-example.svg\"></a></p>\n<p>This is a starter application that shows how Play works.  Please see the documentation at <a href=\"https://www.playframework.com/documentation/latest/Home\" target=\"_blank\" rel=\"noopener\">https://www.playframework.com/documentation/latest/Home</a> for more details.</p>\n<h2 id=\"Running\"><a href=\"#Running\" class=\"headerlink\" title=\"Running\"></a>Running</h2><p>Run this using <a href=\"http://www.scala-sbt.org/\" target=\"_blank\" rel=\"noopener\">sbt</a>.  If you downloaded this project from <a href=\"http://www.playframework.com/download\" target=\"_blank\" rel=\"noopener\">http://www.playframework.com/download</a> then you’ll find a prepackaged version of sbt in the project directory:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sbt run</span><br></pre></td></tr></table></figure>\n<p>And then go to <a href=\"http://localhost:9000\" target=\"_blank\" rel=\"noopener\">http://localhost:9000</a> to see the running web application.</p>\n<p>There are several demonstration files available in this template.</p>\n<h2 id=\"Controllers\"><a href=\"#Controllers\" class=\"headerlink\" title=\"Controllers\"></a>Controllers</h2><ul>\n<li><p>HomeController.scala:</p>\n<p>Shows how to handle simple HTTP requests.</p>\n</li>\n<li><p>AsyncController.scala:</p>\n<p>Shows how to do asynchronous programming when handling a request.</p>\n</li>\n<li><p>CountController.scala:</p>\n<p>Shows how to inject a component into a controller and use the component when<br>handling requests.</p>\n</li>\n</ul>\n<h2 id=\"Components\"><a href=\"#Components\" class=\"headerlink\" title=\"Components\"></a>Components</h2><ul>\n<li><p>Module.scala:</p>\n<p>Shows how to use Guice to bind all the components needed by your application.</p>\n</li>\n<li><p>Counter.scala:</p>\n<p>An example of a component that contains state, in this case a simple counter.</p>\n</li>\n<li><p>ApplicationTimer.scala:</p>\n<p>An example of a component that starts when the application starts and stops<br>when the application stops.</p>\n</li>\n</ul>\n<h2 id=\"Filters\"><a href=\"#Filters\" class=\"headerlink\" title=\"Filters\"></a>Filters</h2><ul>\n<li><p>Filters.scala:</p>\n<p>Creates the list of HTTP filters used by your application.</p>\n</li>\n<li><p>ExampleFilter.scala</p>\n<p>A simple filter that adds a header to every response.</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"play-scala-starter-example\"><a href=\"#play-scala-starter-example\" class=\"headerlink\" title=\"play-scala-starter-example\"></a>play-scala-starter-example</h1><p><a href=\"https://travis-ci.org/playframework/play-scala-starter-example\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/travis/playframework/play-scala-starter-example.svg\"></a></p>\n<p>This is a starter application that shows how Play works.  Please see the documentation at <a href=\"https://www.playframework.com/documentation/latest/Home\" target=\"_blank\" rel=\"noopener\">https://www.playframework.com/documentation/latest/Home</a> for more details.</p>\n<h2 id=\"Running\"><a href=\"#Running\" class=\"headerlink\" title=\"Running\"></a>Running</h2><p>Run this using <a href=\"http://www.scala-sbt.org/\" target=\"_blank\" rel=\"noopener\">sbt</a>.  If you downloaded this project from <a href=\"http://www.playframework.com/download\" target=\"_blank\" rel=\"noopener\">http://www.playframework.com/download</a> then you’ll find a prepackaged version of sbt in the project directory:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sbt run</span><br></pre></td></tr></table></figure>\n<p>And then go to <a href=\"http://localhost:9000\" target=\"_blank\" rel=\"noopener\">http://localhost:9000</a> to see the running web application.</p>\n<p>There are several demonstration files available in this template.</p>\n<h2 id=\"Controllers\"><a href=\"#Controllers\" class=\"headerlink\" title=\"Controllers\"></a>Controllers</h2><ul>\n<li><p>HomeController.scala:</p>\n<p>Shows how to handle simple HTTP requests.</p>\n</li>\n<li><p>AsyncController.scala:</p>\n<p>Shows how to do asynchronous programming when handling a request.</p>\n</li>\n<li><p>CountController.scala:</p>\n<p>Shows how to inject a component into a controller and use the component when<br>handling requests.</p>\n</li>\n</ul>\n<h2 id=\"Components\"><a href=\"#Components\" class=\"headerlink\" title=\"Components\"></a>Components</h2><ul>\n<li><p>Module.scala:</p>\n<p>Shows how to use Guice to bind all the components needed by your application.</p>\n</li>\n<li><p>Counter.scala:</p>\n<p>An example of a component that contains state, in this case a simple counter.</p>\n</li>\n<li><p>ApplicationTimer.scala:</p>\n<p>An example of a component that starts when the application starts and stops<br>when the application stops.</p>\n</li>\n</ul>\n<h2 id=\"Filters\"><a href=\"#Filters\" class=\"headerlink\" title=\"Filters\"></a>Filters</h2><ul>\n<li><p>Filters.scala:</p>\n<p>Creates the list of HTTP filters used by your application.</p>\n</li>\n<li><p>ExampleFilter.scala</p>\n<p>A simple filter that adds a header to every response.</p>\n</li>\n</ul>\n"},{"_content":"# Sprint 4 Play与异步编程\n\n## 目标\n\n熟悉 Play 框架和全异步编程的套路\n\n## Task1\n\n> 时长 2d ~ 3d\n\n+ 用创建一个 `Play` 的工程\n+ 引入我们内部使用的 `quill` 0.7.25 版本作为数据库访问框架，可以参考其他工程\n+ 实现用户注册功能\n  * 注册时需填写邮箱，用户名密码，头像，城市\n  * 用户名必须是6-12英文和数字组合\n  * 密码必须是6-12英文和数字组合\n+ 实现用户登入功能\n  * 用户不存在|用户密码不匹配能给出相应提示\n  * 登入后调转到用户首页显示用户名和当前用户和天气情况\n\n### 要求\n\n+ 使用[天气接口](http://samples.openweathermap.org/data/2.5/weather?q=HangZhou&appid=b1b15e88fa797225412429c1c50c122a1)获取天气，可直接显示英文\n+ 可以使用 [IBM ICU4J](http://site.icu-project.org/) 实现中文到拼音转换\n+ 实现是全异步的\n+ 用户表包含 `email`, `username`, `avatar`, `city` , `password`, `gmt_create`, `gmt_modified` 字段\n+ 实现时考虑 SQL 注入，XSS 注入等安全问题\n+ 头像保存本地路径可以通过配置文件指定\n\n\n## Task 2\n\n> 时长 1d ~ 2d\n\n实现基于 WebSocket 的聊天功能\n\n+ 登入后显示最近20条聊天记录\n+ 一旦有用户发送了消息则在所有在线的用户显示该消息\n","source":"_drafts/2018/01/sprint-4.md","raw":"# Sprint 4 Play与异步编程\n\n## 目标\n\n熟悉 Play 框架和全异步编程的套路\n\n## Task1\n\n> 时长 2d ~ 3d\n\n+ 用创建一个 `Play` 的工程\n+ 引入我们内部使用的 `quill` 0.7.25 版本作为数据库访问框架，可以参考其他工程\n+ 实现用户注册功能\n  * 注册时需填写邮箱，用户名密码，头像，城市\n  * 用户名必须是6-12英文和数字组合\n  * 密码必须是6-12英文和数字组合\n+ 实现用户登入功能\n  * 用户不存在|用户密码不匹配能给出相应提示\n  * 登入后调转到用户首页显示用户名和当前用户和天气情况\n\n### 要求\n\n+ 使用[天气接口](http://samples.openweathermap.org/data/2.5/weather?q=HangZhou&appid=b1b15e88fa797225412429c1c50c122a1)获取天气，可直接显示英文\n+ 可以使用 [IBM ICU4J](http://site.icu-project.org/) 实现中文到拼音转换\n+ 实现是全异步的\n+ 用户表包含 `email`, `username`, `avatar`, `city` , `password`, `gmt_create`, `gmt_modified` 字段\n+ 实现时考虑 SQL 注入，XSS 注入等安全问题\n+ 头像保存本地路径可以通过配置文件指定\n\n\n## Task 2\n\n> 时长 1d ~ 2d\n\n实现基于 WebSocket 的聊天功能\n\n+ 登入后显示最近20条聊天记录\n+ 一旦有用户发送了消息则在所有在线的用户显示该消息\n","slug":"2018/01/sprint-4","published":0,"date":"2018-02-18T08:12:37.445Z","updated":"2018-02-18T08:12:37.445Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpln000gmc55dsu2u5cb","content":"<h1 id=\"Sprint-4-Play与异步编程\"><a href=\"#Sprint-4-Play与异步编程\" class=\"headerlink\" title=\"Sprint 4 Play与异步编程\"></a>Sprint 4 Play与异步编程</h1><h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>熟悉 Play 框架和全异步编程的套路</p>\n<h2 id=\"Task1\"><a href=\"#Task1\" class=\"headerlink\" title=\"Task1\"></a>Task1</h2><blockquote>\n<p>时长 2d ~ 3d</p>\n</blockquote>\n<ul>\n<li>用创建一个 <code>Play</code> 的工程</li>\n<li>引入我们内部使用的 <code>quill</code> 0.7.25 版本作为数据库访问框架，可以参考其他工程</li>\n<li>实现用户注册功能<ul>\n<li>注册时需填写邮箱，用户名密码，头像，城市</li>\n<li>用户名必须是6-12英文和数字组合</li>\n<li>密码必须是6-12英文和数字组合</li>\n</ul>\n</li>\n<li>实现用户登入功能<ul>\n<li>用户不存在|用户密码不匹配能给出相应提示</li>\n<li>登入后调转到用户首页显示用户名和当前用户和天气情况</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h3><ul>\n<li>使用<a href=\"http://samples.openweathermap.org/data/2.5/weather?q=HangZhou&amp;appid=b1b15e88fa797225412429c1c50c122a1\" target=\"_blank\" rel=\"noopener\">天气接口</a>获取天气，可直接显示英文</li>\n<li>可以使用 <a href=\"http://site.icu-project.org/\" target=\"_blank\" rel=\"noopener\">IBM ICU4J</a> 实现中文到拼音转换</li>\n<li>实现是全异步的</li>\n<li>用户表包含 <code>email</code>, <code>username</code>, <code>avatar</code>, <code>city</code> , <code>password</code>, <code>gmt_create</code>, <code>gmt_modified</code> 字段</li>\n<li>实现时考虑 SQL 注入，XSS 注入等安全问题</li>\n<li>头像保存本地路径可以通过配置文件指定</li>\n</ul>\n<h2 id=\"Task-2\"><a href=\"#Task-2\" class=\"headerlink\" title=\"Task 2\"></a>Task 2</h2><blockquote>\n<p>时长 1d ~ 2d</p>\n</blockquote>\n<p>实现基于 WebSocket 的聊天功能</p>\n<ul>\n<li>登入后显示最近20条聊天记录</li>\n<li>一旦有用户发送了消息则在所有在线的用户显示该消息</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Sprint-4-Play与异步编程\"><a href=\"#Sprint-4-Play与异步编程\" class=\"headerlink\" title=\"Sprint 4 Play与异步编程\"></a>Sprint 4 Play与异步编程</h1><h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>熟悉 Play 框架和全异步编程的套路</p>\n<h2 id=\"Task1\"><a href=\"#Task1\" class=\"headerlink\" title=\"Task1\"></a>Task1</h2><blockquote>\n<p>时长 2d ~ 3d</p>\n</blockquote>\n<ul>\n<li>用创建一个 <code>Play</code> 的工程</li>\n<li>引入我们内部使用的 <code>quill</code> 0.7.25 版本作为数据库访问框架，可以参考其他工程</li>\n<li>实现用户注册功能<ul>\n<li>注册时需填写邮箱，用户名密码，头像，城市</li>\n<li>用户名必须是6-12英文和数字组合</li>\n<li>密码必须是6-12英文和数字组合</li>\n</ul>\n</li>\n<li>实现用户登入功能<ul>\n<li>用户不存在|用户密码不匹配能给出相应提示</li>\n<li>登入后调转到用户首页显示用户名和当前用户和天气情况</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h3><ul>\n<li>使用<a href=\"http://samples.openweathermap.org/data/2.5/weather?q=HangZhou&amp;appid=b1b15e88fa797225412429c1c50c122a1\" target=\"_blank\" rel=\"noopener\">天气接口</a>获取天气，可直接显示英文</li>\n<li>可以使用 <a href=\"http://site.icu-project.org/\" target=\"_blank\" rel=\"noopener\">IBM ICU4J</a> 实现中文到拼音转换</li>\n<li>实现是全异步的</li>\n<li>用户表包含 <code>email</code>, <code>username</code>, <code>avatar</code>, <code>city</code> , <code>password</code>, <code>gmt_create</code>, <code>gmt_modified</code> 字段</li>\n<li>实现时考虑 SQL 注入，XSS 注入等安全问题</li>\n<li>头像保存本地路径可以通过配置文件指定</li>\n</ul>\n<h2 id=\"Task-2\"><a href=\"#Task-2\" class=\"headerlink\" title=\"Task 2\"></a>Task 2</h2><blockquote>\n<p>时长 1d ~ 2d</p>\n</blockquote>\n<p>实现基于 WebSocket 的聊天功能</p>\n<ul>\n<li>登入后显示最近20条聊天记录</li>\n<li>一旦有用户发送了消息则在所有在线的用户显示该消息</li>\n</ul>\n"},{"title":"后端工程师入门前端页面重构（二）：心法 I","date":"2018-01-04T16:00:00.000Z","_content":"\n上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：\n\n**从左到右，从上到下，从整体到布局，化整为零。**\n\n那么在接下来的几篇文章中，我们就来聊聊页面布局的心法。\n\n如果说口诀可以让你学会布局一个简单的页面，那么心法会很大程度上提升你的布局效率。\n\n在上一篇文章，我们一直推荐使用高效的浮动布局，那么这篇文章我们就先来看看什么是浮动布局吧。\n\n要想了解浮动布局，得先了解　HTML 的元素种类。\n\n## HTML 块状元素和行内元素\n\n首先我们来看一段简单的代码：\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>div和span标签的使用</title>\n    \t<style type=\"text/css\">\n    \t\t.div{\n    \t\t\tbackground-color: red;\n    \t\t\theight: 300px;\n    \t\t\twidth: 300px;\n    \t\t\t/*选中我们的设置class=\"div\"*/\t\n    \t\t}\n    \n    \t\t.element{\n    \t\t\tbackground-color: green;\n    \t\t\theight: 400px;\n    \t\t\twidth: 400px;\n    \t\t\t/*选中我们的设置class=\"element\"*/\t\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div\">这是div标签里面的内容</div>\n    \t<span class=\"element\">这是span标签的内容</span>\n    </body>\n    </html>\n    \n{% endcodeblock %}\n\n在上面的代码中，我们使用 div 和 span 画了两个区域，并且分别设置了它们的高度和宽度。效果如下：\n\n![效果图](/image/back-2-font-xinfa-1/html-css-show.jpg)\n\n我们发现：我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？\n\n难道它们两是不同种类的元素？\n\n嘿嘿，猜对啦！\n\n其实在 HTML 中，我们可以把标签分为块状元素和行内元素，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。\n\n* 块状元素的标签还有：p、ul、ol等。\n\n* 行内元素的标签还有：img、code、input等。\n\n那么块状元素和行内元素有什么区别呢？\n\n从我们的代码的效果图里面我们已经看出来一个区别了：**块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。**\n\n我们再来写一段代码试试，我们使用我们熟悉的 div 标签和 span 标签来演示。\n\n我们把上面代码的高度和宽度注释掉，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。\n\n来来来，代码走一波！\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>div和span标签的使用</title>\n    \t<style type=\"text/css\">\n    \t\t.div{\n    \t\t\tbackground-color: red;\n    \t\t\t/*height: 300px;*/\n    \t\t\t/*width: 300px;*/\n    \t\t\t/*选中我们的设置class=\"div\"*/\t\n    \t\t}\n    \n    \t\t.element{\n    \t\t\tbackground-color: green;\n    \t\t\t/*height: 400px;*/\n    \t\t\t/*width: 400px;*/\n    \t\t\t/*选中我们的设置class=\"element\"*/\t\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div\">这是div标签里面的内容</div>\n    \t<span class=\"element\">这是span标签的内容</span>\n    </body>\n    </html>\n{% endcodeblock %}\n\n![效果图](/image/back-2-font-xinfa-1/block-inline-elemet.png)\n\n是不是又看出来一个区别呢？\n\n**块状元素是独占一行的，而行内元素只占本身内容的大小。**\n\n看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。\n\n![效果图](/image/back-2-font-xinfa-1/block-element.jpg)\n\n**即使我们设置了块状元素的高度和宽度，它还是独占一行的**。真的是霸道啊！\n\n如果不会使用谷歌浏览器检查网页的同学，可以参考[如何使用谷歌浏览器检查页面。](https://jingyan.baidu.com/article/2f9b480db6cde741ca6cc246.html)\n\n\n说了这么多，我好像还是没有教你们如何去写一个浮动布局。\n\n咳咳，下面正式开始。\n\n\n## 为什么要使用浮动布局\n\n在开始之前，我们按照套路，还是要问一个问题：为什么要使用浮动布局，仅仅是因为它是高效的？\n\n答案当然是否定的。\n\n在上面的我们分析了块状元素是独占一行的，但是在页面布局的时候，往往都是要求许多块状元素是在一行的。\n\n怎么解决这个问题呢？\n\n解决问题有两种方案：\n* 我们可以使用 CSS 把块状元素变成行内元素\n* 我们使用浮动\n\n对于第一种方案，我们直接否定！**因为它存在误差！**\n下面我们使用 HTML 和 CSS 来写一段代码有误差的代码： \n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>使用行内元素是有误差的</title>\n    \t<style type=\"text/css\">\n    \t\t.div-1{\n    \t\t\tbackground-color: red;\n    \t\t\t/*让其作为行内元素显示*/\n    \t\t\tdisplay: inline-block;\n    \t\t\t\n    \t\t}\n    \n    \t\t.div-2{\n    \t\t\tbackground-color: green;\n    \t\t\t/*让其作为行内元素显示*/\n    \t\t\tdisplay:inline-block;\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div-1\">123</div>\n    \t<div class=\"div-2\">123</div>\n    </body>\n    </html>\n{% endcodeblock %}\n\n上面的这段代码，我们使用块状元素 div 写了两个区块，并且使用 \n{% codeblock lang:html %}\n    display:inline-block; \n{% endcodeblock %} \n\n让块状元素 div 来作为行内元素显示，然后我们来看效果：\n\n![行内元素误差效果显示](/image/back-2-font-xinfa-1/inline-element-error.jpg)\n\n我们发现**虽然两个 div 可以变成行内元素在一行显示，但是他们之间还是存在空白，不能完美的相邻在一起。**\n\n这点空白会给我们布局带来很大的麻烦，这就是我们为什么选择浮动布局的原因。\n\n选择浮动布局的原因知道了，下面我们来写一个浮动布局吧。\n\n真的开始写喽，不是骗你们的！\n\n\n## 一个简单的浮动布局\n\n首先我们画两个 div，并且设置它们的背景颜色，高度以及宽度，代码如下：\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n       \n{% endcodeblock %} \n\n打开浏览器看效果是这个样子滴：\n\n![浮动之前的效果图](/image/back-2-font-xinfa-1/float-layout.jpg)\n\n这个效果很正常嘛。 div 作为很霸道的块状元素，当然占据一整行，两个 div 就分别占据两行喽。\n\n下面我们就要使用浮动了，注意看清楚哦！\n\n我们只要在上面代码中 div 的 class 选择器里面添加如下代码即可实现浮动。\n\n{% codeblock lang:html %}\n    float: left;\n{% endcodeblock %}\n\n来来来，完整代码走一波！\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n                /*设置为浮动*/\n                float: left;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n                /*设置为浮动*/\n                float: left;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n{% endcodeblock %}\n\n然后我们用浏览器打开看效果：\n\n![简单浮动效果图](/image/back-2-font-xinfa-1/float-layout-show-1.png)\n\n我们发现两个原本很难相邻在一起的块状元素，竟然完美的 **无缝** 的相邻在一起。\n\n浮动的布局是不是很简单呢？我们只要添加 「 float: left;」即可实现浮动。你们学会了吗？\n\n现在让我们重新来看一下「 float: left;」这段代码。\n\n我们都知道「 float 」这个字是指定使用浮动的关键字，但是「 left 」是干嘛用的？难道还是指定 right？\n\n当然可以啦。left 的意思是指定左浮动，意思是让元素悬浮在浏览器的左边，right就是相反的意思，让元素悬浮在浏览器的右边。\n\n来来来，让我们把上面代码中的 left 变成right，代码再走一波!\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n                /*设置为浮动*/\n                float: right;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n                /*设置为浮动*/\n                float: right;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n{% endcodeblock %}\n\n让我们打开浏览器看效果！\n\n![右浮动效果图](/image/back-2-font-xinfa-1/float-right.png)\n\n是不是被浮动的结果吓了一跳呢？设置浮动的元素竟然都跑到右边去了。\n\n到了这里，关于怎么写浮动，我想你们应该已经会了。下面我们来看一个问题，要跟着我的思路走哦。\n\n还是回到我们之前设置的左浮动的页面。我们可以使用谷歌浏览器来检查一下它们的高度和宽度，和我们设置的完全一样。\n\n这段代码没问题。\n\n![](/image/back-2-font-xinfa-1/div-show-height.png)\n\n## 还是一个简单的浮动布局\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>还是一个简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                float: left;\n                background: red;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                float: left;\n                background: green;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"block-1\">\n                我是第一个子元素\n            </div>\n    \n            <div class=\"block-2\">\n                我是第二个子元素\n            </div>\n        </div>\n    </body>\n    </html>\n    \n{% endcodeblock %}\n\n![效果图](/image/back-2-font-xinfa-1/float-layout-show-2.png)\n\n这段代码还是很简单，我们还是使用　DIV　标签画了两个　200 * 200　区块，和之前代码的唯一区别在于\n\n这两个区块被一个「父区块 parent」包含着。\n\n这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。\n\n![](/image/back-2-font-xinfa-1/second-check-child.png)\n\n子元素宽度和高度都是 OK 的。\n\n我们再来看看它父元素高度和宽度。\n\n![](/image/back-2-font-xinfa-1/parent-check.png)\n\n我去！父元素的高度竟然是 **０**！！　我是不是安装了假的浏览器？\n\n解铃还须系铃人，要想知道原因，我们需要去了解一下　DIV　标签和「浮动」的之间的关系。\n\n\n## 这也是一个简单的浮动布局\n\n还是一个很简单的布局，我们有三个DIV区块，分别为「first」、「second」、「third」它们父区块「parent」包含着\n\n并且设置三个DIV区块为左浮动的。\n\n代码如下：\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>清除浮动演示</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n        </div>\n    </body>\n    </html>\n    \n{% endcodeblock %}\n\n![效果图](/image/back-2-font-xinfa-1/div-float-1.png)\n\n\n我们使用谷歌浏览器来检查一下，发现子元素的高度和宽度和设置的值一样，但是父元素高度还是为０。\n\n![](/image/back-2-font-xinfa-1/origin-parent-height.png)\n\n\n现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做？\n\n这就要使用到另一个招式 「清除浮动」\n\n我们只要在第三块区块的「.third」中添加\n{% codeblock lang:html %}\n    clear: left;\n{% endcodeblock %} \n\n即可。\n\n来来来，代码敲一波：\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n        <html>\n        <head>\n            <title>清除浮动演示</title>\n            <style type=\"text/css\">\n                .first{\n                    background: red;\n                    width: 200px;\n                    height: 200px;\n                    float: left;\n                }\n                .second{\n                    background: yellow;\n                    width: 200px;\n                    float: left;\n                    height: 200px;\n        \n                }\n                .third{\n                    float: left;\n                    background: green;\n                    width: 200px;\n                    height: 200px;\n                    clear: left;\n                }\n            </style>\n        </head>\n        <body>\n            <div class=\"parent\">\n                <div class=\"first\">\n                    第一个区块\n                </div>\n        \n                <div class=\"second\">\n                    第二个区块\n                </div>\n        \n                <div class=\"third\">\n                    第三个区块\n                </div>\n            </div>\n        </body>\n        </html>\n\n{% endcodeblock %}\n\n话不多说，让我们先看效果。\n\n![添加 clear: left;的效果图](/image/back-2-font-xinfa-1/add-clear-left-1.png)\n\n真的把第三个区块给压下来了！\n\n\n\n还是按照上面的套路，我们来分析这段代码「 clear: left; 」：\n\n它用到的关键字是「 clear 」，它的含义是清除。\n\n而 「 left 」 代表是左边。\n\n那么它合起来的意思是：**清除左边的浮动元素**。\n\n说到更明白一点就是：**不让当前元素的左边有浮动元素。**\n\n当前元素是第三个区块，它的左边有两个浮动元素 first 和second 。\n\n那这段代码的意思就是：**不让第三个区块左边有浮动元素**，那浏览器这么处理呢？\n\n浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到 **下一行** 来吧！”\n\n于是第三个区块就到了下一行啦。  \n\n虽然有点复杂，但是按照上面思路进行一步步分解，是不是就变的很简单呢？\n\n让我们再来拓展一下，clear 除了可以设置为 left,还可以设置为 「 right 」 和 「 both 」。\n\n我相信不用我说你们也明白了吧！\n\nright 就是不让当前元素 **右边** 存在浮动元素嘛。\n\n那 both 就是不让当前元素的 **两边** 出现浮动元素喽。\n\n说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！\n\n这个有点尴尬！\n\n## 父元素高度真的需要吗？\n\n![](/image/back-2-font-xinfa-1/clear-float-parent.png)\n\n那么，在解决之前，按照我们的套路，我们要问一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。\n\n我的实习导师告诉我：“这是不行的。**浮动布局的占位空间往往是我们理想的父元素高度。**”\n\n他说的太抽象，我们来说的直白一点：\n\n「在布局中我们往往使用浮动布局来实现某一块区域的布局」。\n\n「然后我们最好用一个DIV去包裹整个浮动布局，用于和其它的布局区分开」。\n\n「最后我们要求这个父DIV和高度要和浮动布局的高度一样」。\n\n对于上面的三点内容，前两点我们已经做到了。在上面的代码中，我们使用「parent」包裹着「first」、「second」、「third」，并且\n\n而且它们都是浮动的。\n\n想要解决第三个问题，就是使用我们上面讲的招式-**清除浮动**。\n\n我们在父区块最后面增加一个空的DIV,将它设置它为「 clear:both 」。\n\n为什么要这么使用呢，具体的原因我也讲不清楚，大概是这样的吧：\n\n因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受 **任何** 浮动元素干扰,我们必须清除浮动对它的干扰。\n\n注意哦！最后一个元素不是浮动的哦。\n\n来来来，代码走一波！\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS的前世今生</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n            .last{\n                clear: both;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n            <div class=\"last\">\n    \n            </div>\n        </div>\n    </body>\n    </html>\n\n{% endcodeblock %}\n\n然后我们会发现，父元素竟然有高度了，而且和浮动布局的高度是一样的！\n\n![父元素有高度了](/image/back-2-font-xinfa-1/parrent-height.png)\n\n哈哈，到了这里，我们已经完全解决父元素高度为 0 的问题，那么我想问：\n\n上面的解决方法是最好的吗？\n\n\n## 清除浮动－最佳实践\n\n按照套路，我们得问一个问题：上面的解决方案有问题吗？\n\n回答是肯定的！\n\n因为按照上面的方法，我们需要在 **手动** 在每个父区块最后添加一个空的 DIV，这样的做法是 **低效的**！\n\n因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。\n\n我们可不可以在某个地方统一定义，然后全局使用呢？就像Java一样，一次编译，到处运行。\n\n哈哈哈，程序员都喜欢偷懒，我也不例外。回答是当然可以啦。\n\n这个要使用到另一个新的招式-CSS 的「伪类」,伪类的具体用法可以参考[W3C的CSS伪类教程。](http://www.w3school.com.cn/css/css_pseudo_elements.asp)\n\n我们这里使用的是「after」伪类，它可以自动的在某个父元素的最后一行添加最后一个子元素，并且设置属性。\n\n上面的话有点拗口，来来来，我们直接上代码分析：\n\n{% codeblock lang:html %}\n    .parent:after{\n        /*设置最后一个元素的内容为空*/\n        content: \"\";\n        /*设置最后一个元素为清除两边浮动*/\n        clear: both;\n        /*设置最后一个元素为块状元素*/\n        display: block;\n    }\n\n{% endcodeblock %}\n\n上面的代码会自动在「parent」作用的标签的最后一行添加一个子元素，并且设置该元素为「块状元素」「内容为空」以及「清除浮动」。\n\n是不是很神奇呢？我们可以使用 CSS 自动的添加元素。并且设置其属性。\n\n那么还有一个问题，如何让上面的这个代码被所有的父元素共享呢？\n\n这个很简单啦，只要把需要样式的父元素的 class属性设置值为 「parent」，那么就可以直接使用啦。\n\n来来来，让我们完整的敲一次代码！\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS最佳实践</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n    \n            /*\n              伪类\n             */\n            .parent:after{\n                /*设置最后一个元素的内容为空*/\n                content: \"\";\n                /*设置最后一个元素为清除两边浮动*/\n                clear: both;\n                /*设置最后一个元素为块状元素*/\n                display: block;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n    \n        </div>\n    </body>\n    </html>\n    \n{% endcodeblock %}\n\n![使用最佳实践-伪类后的效果图](/image/back-2-font-xinfa-1/div-float-after.png)\n\n## 你说的都是真的吗\n\n从头到尾说了这么多，有的同学或许会问，你说的都是真的吗？，那些大型网站的页面都是按照你说的这么设计的的吗？\n\n我读书少，你可别骗我。\n\n不信？\n\n我们去看看一些大型网站的页面的浮动布局的设计代码。\n\n我们先看豆瓣的\n\n![使用after](/image/back-2-font-xinfa-1/douban-1.png)\n\n![使用after+浮动布局](/image/back-2-font-xinfa-1/douban-2.png)\n\n我们再看看天猫的\n\n![使用after](/image/back-2-font-xinfa-1/tianmao-1.png)\n![使用after+浮动布局](/image/back-2-font-xinfa-1/tianmao-2.png)\n\n哈哈，我可没有骗你们哦！大型网站都是这么用的，而且貌似高手都使用 「float:right;」呢！\n\n\n最后，我们再来回顾一下，这篇文章从介绍　HTML的元素种类开始，到浮动布局，最后以清除浮动和最佳实践收尾。\n\n可以让一个小白慢慢的窥视到大型网页设计的理念。\n\n中间有一些招式可能说的太粗糙。不要捉急，我们先学心法。招式到后面慢慢再学习。\n\n这篇文章到这里就结束了，我会在下一篇博文继续介绍心法 II\n\n","source":"_drafts/2018/01/back-2-font-xinfa-1-3.0.md","raw":"\n---\ntitle: 后端工程师入门前端页面重构（二）：心法 I\ndate: 2018/01/05\ncategories: 前端页面重构系列\ntags:\n- 前端\n---\n\n上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：\n\n**从左到右，从上到下，从整体到布局，化整为零。**\n\n那么在接下来的几篇文章中，我们就来聊聊页面布局的心法。\n\n如果说口诀可以让你学会布局一个简单的页面，那么心法会很大程度上提升你的布局效率。\n\n在上一篇文章，我们一直推荐使用高效的浮动布局，那么这篇文章我们就先来看看什么是浮动布局吧。\n\n要想了解浮动布局，得先了解　HTML 的元素种类。\n\n## HTML 块状元素和行内元素\n\n首先我们来看一段简单的代码：\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>div和span标签的使用</title>\n    \t<style type=\"text/css\">\n    \t\t.div{\n    \t\t\tbackground-color: red;\n    \t\t\theight: 300px;\n    \t\t\twidth: 300px;\n    \t\t\t/*选中我们的设置class=\"div\"*/\t\n    \t\t}\n    \n    \t\t.element{\n    \t\t\tbackground-color: green;\n    \t\t\theight: 400px;\n    \t\t\twidth: 400px;\n    \t\t\t/*选中我们的设置class=\"element\"*/\t\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div\">这是div标签里面的内容</div>\n    \t<span class=\"element\">这是span标签的内容</span>\n    </body>\n    </html>\n    \n{% endcodeblock %}\n\n在上面的代码中，我们使用 div 和 span 画了两个区域，并且分别设置了它们的高度和宽度。效果如下：\n\n![效果图](/image/back-2-font-xinfa-1/html-css-show.jpg)\n\n我们发现：我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？\n\n难道它们两是不同种类的元素？\n\n嘿嘿，猜对啦！\n\n其实在 HTML 中，我们可以把标签分为块状元素和行内元素，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。\n\n* 块状元素的标签还有：p、ul、ol等。\n\n* 行内元素的标签还有：img、code、input等。\n\n那么块状元素和行内元素有什么区别呢？\n\n从我们的代码的效果图里面我们已经看出来一个区别了：**块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。**\n\n我们再来写一段代码试试，我们使用我们熟悉的 div 标签和 span 标签来演示。\n\n我们把上面代码的高度和宽度注释掉，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。\n\n来来来，代码走一波！\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>div和span标签的使用</title>\n    \t<style type=\"text/css\">\n    \t\t.div{\n    \t\t\tbackground-color: red;\n    \t\t\t/*height: 300px;*/\n    \t\t\t/*width: 300px;*/\n    \t\t\t/*选中我们的设置class=\"div\"*/\t\n    \t\t}\n    \n    \t\t.element{\n    \t\t\tbackground-color: green;\n    \t\t\t/*height: 400px;*/\n    \t\t\t/*width: 400px;*/\n    \t\t\t/*选中我们的设置class=\"element\"*/\t\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div\">这是div标签里面的内容</div>\n    \t<span class=\"element\">这是span标签的内容</span>\n    </body>\n    </html>\n{% endcodeblock %}\n\n![效果图](/image/back-2-font-xinfa-1/block-inline-elemet.png)\n\n是不是又看出来一个区别呢？\n\n**块状元素是独占一行的，而行内元素只占本身内容的大小。**\n\n看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。\n\n![效果图](/image/back-2-font-xinfa-1/block-element.jpg)\n\n**即使我们设置了块状元素的高度和宽度，它还是独占一行的**。真的是霸道啊！\n\n如果不会使用谷歌浏览器检查网页的同学，可以参考[如何使用谷歌浏览器检查页面。](https://jingyan.baidu.com/article/2f9b480db6cde741ca6cc246.html)\n\n\n说了这么多，我好像还是没有教你们如何去写一个浮动布局。\n\n咳咳，下面正式开始。\n\n\n## 为什么要使用浮动布局\n\n在开始之前，我们按照套路，还是要问一个问题：为什么要使用浮动布局，仅仅是因为它是高效的？\n\n答案当然是否定的。\n\n在上面的我们分析了块状元素是独占一行的，但是在页面布局的时候，往往都是要求许多块状元素是在一行的。\n\n怎么解决这个问题呢？\n\n解决问题有两种方案：\n* 我们可以使用 CSS 把块状元素变成行内元素\n* 我们使用浮动\n\n对于第一种方案，我们直接否定！**因为它存在误差！**\n下面我们使用 HTML 和 CSS 来写一段代码有误差的代码： \n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>使用行内元素是有误差的</title>\n    \t<style type=\"text/css\">\n    \t\t.div-1{\n    \t\t\tbackground-color: red;\n    \t\t\t/*让其作为行内元素显示*/\n    \t\t\tdisplay: inline-block;\n    \t\t\t\n    \t\t}\n    \n    \t\t.div-2{\n    \t\t\tbackground-color: green;\n    \t\t\t/*让其作为行内元素显示*/\n    \t\t\tdisplay:inline-block;\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div-1\">123</div>\n    \t<div class=\"div-2\">123</div>\n    </body>\n    </html>\n{% endcodeblock %}\n\n上面的这段代码，我们使用块状元素 div 写了两个区块，并且使用 \n{% codeblock lang:html %}\n    display:inline-block; \n{% endcodeblock %} \n\n让块状元素 div 来作为行内元素显示，然后我们来看效果：\n\n![行内元素误差效果显示](/image/back-2-font-xinfa-1/inline-element-error.jpg)\n\n我们发现**虽然两个 div 可以变成行内元素在一行显示，但是他们之间还是存在空白，不能完美的相邻在一起。**\n\n这点空白会给我们布局带来很大的麻烦，这就是我们为什么选择浮动布局的原因。\n\n选择浮动布局的原因知道了，下面我们来写一个浮动布局吧。\n\n真的开始写喽，不是骗你们的！\n\n\n## 一个简单的浮动布局\n\n首先我们画两个 div，并且设置它们的背景颜色，高度以及宽度，代码如下：\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n       \n{% endcodeblock %} \n\n打开浏览器看效果是这个样子滴：\n\n![浮动之前的效果图](/image/back-2-font-xinfa-1/float-layout.jpg)\n\n这个效果很正常嘛。 div 作为很霸道的块状元素，当然占据一整行，两个 div 就分别占据两行喽。\n\n下面我们就要使用浮动了，注意看清楚哦！\n\n我们只要在上面代码中 div 的 class 选择器里面添加如下代码即可实现浮动。\n\n{% codeblock lang:html %}\n    float: left;\n{% endcodeblock %}\n\n来来来，完整代码走一波！\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n                /*设置为浮动*/\n                float: left;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n                /*设置为浮动*/\n                float: left;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n{% endcodeblock %}\n\n然后我们用浏览器打开看效果：\n\n![简单浮动效果图](/image/back-2-font-xinfa-1/float-layout-show-1.png)\n\n我们发现两个原本很难相邻在一起的块状元素，竟然完美的 **无缝** 的相邻在一起。\n\n浮动的布局是不是很简单呢？我们只要添加 「 float: left;」即可实现浮动。你们学会了吗？\n\n现在让我们重新来看一下「 float: left;」这段代码。\n\n我们都知道「 float 」这个字是指定使用浮动的关键字，但是「 left 」是干嘛用的？难道还是指定 right？\n\n当然可以啦。left 的意思是指定左浮动，意思是让元素悬浮在浏览器的左边，right就是相反的意思，让元素悬浮在浏览器的右边。\n\n来来来，让我们把上面代码中的 left 变成right，代码再走一波!\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n                /*设置为浮动*/\n                float: right;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n                /*设置为浮动*/\n                float: right;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n{% endcodeblock %}\n\n让我们打开浏览器看效果！\n\n![右浮动效果图](/image/back-2-font-xinfa-1/float-right.png)\n\n是不是被浮动的结果吓了一跳呢？设置浮动的元素竟然都跑到右边去了。\n\n到了这里，关于怎么写浮动，我想你们应该已经会了。下面我们来看一个问题，要跟着我的思路走哦。\n\n还是回到我们之前设置的左浮动的页面。我们可以使用谷歌浏览器来检查一下它们的高度和宽度，和我们设置的完全一样。\n\n这段代码没问题。\n\n![](/image/back-2-font-xinfa-1/div-show-height.png)\n\n## 还是一个简单的浮动布局\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>还是一个简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                float: left;\n                background: red;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                float: left;\n                background: green;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"block-1\">\n                我是第一个子元素\n            </div>\n    \n            <div class=\"block-2\">\n                我是第二个子元素\n            </div>\n        </div>\n    </body>\n    </html>\n    \n{% endcodeblock %}\n\n![效果图](/image/back-2-font-xinfa-1/float-layout-show-2.png)\n\n这段代码还是很简单，我们还是使用　DIV　标签画了两个　200 * 200　区块，和之前代码的唯一区别在于\n\n这两个区块被一个「父区块 parent」包含着。\n\n这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。\n\n![](/image/back-2-font-xinfa-1/second-check-child.png)\n\n子元素宽度和高度都是 OK 的。\n\n我们再来看看它父元素高度和宽度。\n\n![](/image/back-2-font-xinfa-1/parent-check.png)\n\n我去！父元素的高度竟然是 **０**！！　我是不是安装了假的浏览器？\n\n解铃还须系铃人，要想知道原因，我们需要去了解一下　DIV　标签和「浮动」的之间的关系。\n\n\n## 这也是一个简单的浮动布局\n\n还是一个很简单的布局，我们有三个DIV区块，分别为「first」、「second」、「third」它们父区块「parent」包含着\n\n并且设置三个DIV区块为左浮动的。\n\n代码如下：\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>清除浮动演示</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n        </div>\n    </body>\n    </html>\n    \n{% endcodeblock %}\n\n![效果图](/image/back-2-font-xinfa-1/div-float-1.png)\n\n\n我们使用谷歌浏览器来检查一下，发现子元素的高度和宽度和设置的值一样，但是父元素高度还是为０。\n\n![](/image/back-2-font-xinfa-1/origin-parent-height.png)\n\n\n现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做？\n\n这就要使用到另一个招式 「清除浮动」\n\n我们只要在第三块区块的「.third」中添加\n{% codeblock lang:html %}\n    clear: left;\n{% endcodeblock %} \n\n即可。\n\n来来来，代码敲一波：\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n        <html>\n        <head>\n            <title>清除浮动演示</title>\n            <style type=\"text/css\">\n                .first{\n                    background: red;\n                    width: 200px;\n                    height: 200px;\n                    float: left;\n                }\n                .second{\n                    background: yellow;\n                    width: 200px;\n                    float: left;\n                    height: 200px;\n        \n                }\n                .third{\n                    float: left;\n                    background: green;\n                    width: 200px;\n                    height: 200px;\n                    clear: left;\n                }\n            </style>\n        </head>\n        <body>\n            <div class=\"parent\">\n                <div class=\"first\">\n                    第一个区块\n                </div>\n        \n                <div class=\"second\">\n                    第二个区块\n                </div>\n        \n                <div class=\"third\">\n                    第三个区块\n                </div>\n            </div>\n        </body>\n        </html>\n\n{% endcodeblock %}\n\n话不多说，让我们先看效果。\n\n![添加 clear: left;的效果图](/image/back-2-font-xinfa-1/add-clear-left-1.png)\n\n真的把第三个区块给压下来了！\n\n\n\n还是按照上面的套路，我们来分析这段代码「 clear: left; 」：\n\n它用到的关键字是「 clear 」，它的含义是清除。\n\n而 「 left 」 代表是左边。\n\n那么它合起来的意思是：**清除左边的浮动元素**。\n\n说到更明白一点就是：**不让当前元素的左边有浮动元素。**\n\n当前元素是第三个区块，它的左边有两个浮动元素 first 和second 。\n\n那这段代码的意思就是：**不让第三个区块左边有浮动元素**，那浏览器这么处理呢？\n\n浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到 **下一行** 来吧！”\n\n于是第三个区块就到了下一行啦。  \n\n虽然有点复杂，但是按照上面思路进行一步步分解，是不是就变的很简单呢？\n\n让我们再来拓展一下，clear 除了可以设置为 left,还可以设置为 「 right 」 和 「 both 」。\n\n我相信不用我说你们也明白了吧！\n\nright 就是不让当前元素 **右边** 存在浮动元素嘛。\n\n那 both 就是不让当前元素的 **两边** 出现浮动元素喽。\n\n说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！\n\n这个有点尴尬！\n\n## 父元素高度真的需要吗？\n\n![](/image/back-2-font-xinfa-1/clear-float-parent.png)\n\n那么，在解决之前，按照我们的套路，我们要问一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。\n\n我的实习导师告诉我：“这是不行的。**浮动布局的占位空间往往是我们理想的父元素高度。**”\n\n他说的太抽象，我们来说的直白一点：\n\n「在布局中我们往往使用浮动布局来实现某一块区域的布局」。\n\n「然后我们最好用一个DIV去包裹整个浮动布局，用于和其它的布局区分开」。\n\n「最后我们要求这个父DIV和高度要和浮动布局的高度一样」。\n\n对于上面的三点内容，前两点我们已经做到了。在上面的代码中，我们使用「parent」包裹着「first」、「second」、「third」，并且\n\n而且它们都是浮动的。\n\n想要解决第三个问题，就是使用我们上面讲的招式-**清除浮动**。\n\n我们在父区块最后面增加一个空的DIV,将它设置它为「 clear:both 」。\n\n为什么要这么使用呢，具体的原因我也讲不清楚，大概是这样的吧：\n\n因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受 **任何** 浮动元素干扰,我们必须清除浮动对它的干扰。\n\n注意哦！最后一个元素不是浮动的哦。\n\n来来来，代码走一波！\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS的前世今生</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n            .last{\n                clear: both;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n            <div class=\"last\">\n    \n            </div>\n        </div>\n    </body>\n    </html>\n\n{% endcodeblock %}\n\n然后我们会发现，父元素竟然有高度了，而且和浮动布局的高度是一样的！\n\n![父元素有高度了](/image/back-2-font-xinfa-1/parrent-height.png)\n\n哈哈，到了这里，我们已经完全解决父元素高度为 0 的问题，那么我想问：\n\n上面的解决方法是最好的吗？\n\n\n## 清除浮动－最佳实践\n\n按照套路，我们得问一个问题：上面的解决方案有问题吗？\n\n回答是肯定的！\n\n因为按照上面的方法，我们需要在 **手动** 在每个父区块最后添加一个空的 DIV，这样的做法是 **低效的**！\n\n因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。\n\n我们可不可以在某个地方统一定义，然后全局使用呢？就像Java一样，一次编译，到处运行。\n\n哈哈哈，程序员都喜欢偷懒，我也不例外。回答是当然可以啦。\n\n这个要使用到另一个新的招式-CSS 的「伪类」,伪类的具体用法可以参考[W3C的CSS伪类教程。](http://www.w3school.com.cn/css/css_pseudo_elements.asp)\n\n我们这里使用的是「after」伪类，它可以自动的在某个父元素的最后一行添加最后一个子元素，并且设置属性。\n\n上面的话有点拗口，来来来，我们直接上代码分析：\n\n{% codeblock lang:html %}\n    .parent:after{\n        /*设置最后一个元素的内容为空*/\n        content: \"\";\n        /*设置最后一个元素为清除两边浮动*/\n        clear: both;\n        /*设置最后一个元素为块状元素*/\n        display: block;\n    }\n\n{% endcodeblock %}\n\n上面的代码会自动在「parent」作用的标签的最后一行添加一个子元素，并且设置该元素为「块状元素」「内容为空」以及「清除浮动」。\n\n是不是很神奇呢？我们可以使用 CSS 自动的添加元素。并且设置其属性。\n\n那么还有一个问题，如何让上面的这个代码被所有的父元素共享呢？\n\n这个很简单啦，只要把需要样式的父元素的 class属性设置值为 「parent」，那么就可以直接使用啦。\n\n来来来，让我们完整的敲一次代码！\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS最佳实践</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n    \n            /*\n              伪类\n             */\n            .parent:after{\n                /*设置最后一个元素的内容为空*/\n                content: \"\";\n                /*设置最后一个元素为清除两边浮动*/\n                clear: both;\n                /*设置最后一个元素为块状元素*/\n                display: block;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n    \n        </div>\n    </body>\n    </html>\n    \n{% endcodeblock %}\n\n![使用最佳实践-伪类后的效果图](/image/back-2-font-xinfa-1/div-float-after.png)\n\n## 你说的都是真的吗\n\n从头到尾说了这么多，有的同学或许会问，你说的都是真的吗？，那些大型网站的页面都是按照你说的这么设计的的吗？\n\n我读书少，你可别骗我。\n\n不信？\n\n我们去看看一些大型网站的页面的浮动布局的设计代码。\n\n我们先看豆瓣的\n\n![使用after](/image/back-2-font-xinfa-1/douban-1.png)\n\n![使用after+浮动布局](/image/back-2-font-xinfa-1/douban-2.png)\n\n我们再看看天猫的\n\n![使用after](/image/back-2-font-xinfa-1/tianmao-1.png)\n![使用after+浮动布局](/image/back-2-font-xinfa-1/tianmao-2.png)\n\n哈哈，我可没有骗你们哦！大型网站都是这么用的，而且貌似高手都使用 「float:right;」呢！\n\n\n最后，我们再来回顾一下，这篇文章从介绍　HTML的元素种类开始，到浮动布局，最后以清除浮动和最佳实践收尾。\n\n可以让一个小白慢慢的窥视到大型网页设计的理念。\n\n中间有一些招式可能说的太粗糙。不要捉急，我们先学心法。招式到后面慢慢再学习。\n\n这篇文章到这里就结束了，我会在下一篇博文继续介绍心法 II\n\n","slug":"2018/01/back-2-font-xinfa-1-3.0","published":0,"updated":"2018-02-18T08:12:37.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcplq000hmc55jhkrsssf","content":"<p>上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：</p>\n<p><strong>从左到右，从上到下，从整体到布局，化整为零。</strong></p>\n<p>那么在接下来的几篇文章中，我们就来聊聊页面布局的心法。</p>\n<p>如果说口诀可以让你学会布局一个简单的页面，那么心法会很大程度上提升你的布局效率。</p>\n<p>在上一篇文章，我们一直推荐使用高效的浮动布局，那么这篇文章我们就先来看看什么是浮动布局吧。</p>\n<p>要想了解浮动布局，得先了解　HTML 的元素种类。</p>\n<h2 id=\"HTML-块状元素和行内元素\"><a href=\"#HTML-块状元素和行内元素\" class=\"headerlink\" title=\"HTML 块状元素和行内元素\"></a>HTML 块状元素和行内元素</h2><p>首先我们来看一段简单的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>div和span标签的使用<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.div</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\theight: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\twidth: 300px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*选中我们的设置class=\"div\"*/</span>\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.element</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: green;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\theight: 400px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\twidth: 400px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*选中我们的设置class=\"element\"*/</span>\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div\"</span>&gt;</span>这是div标签里面的内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"element\"</span>&gt;</span>这是span标签的内容<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，我们使用 div 和 span 画了两个区域，并且分别设置了它们的高度和宽度。效果如下：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/html-css-show.jpg\" alt=\"效果图\"></p>\n<p>我们发现：我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？</p>\n<p>难道它们两是不同种类的元素？</p>\n<p>嘿嘿，猜对啦！</p>\n<p>其实在 HTML 中，我们可以把标签分为块状元素和行内元素，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。</p>\n<ul>\n<li><p>块状元素的标签还有：p、ul、ol等。</p>\n</li>\n<li><p>行内元素的标签还有：img、code、input等。</p>\n</li>\n</ul>\n<p>那么块状元素和行内元素有什么区别呢？</p>\n<p>从我们的代码的效果图里面我们已经看出来一个区别了：<strong>块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。</strong></p>\n<p>我们再来写一段代码试试，我们使用我们熟悉的 div 标签和 span 标签来演示。</p>\n<p>我们把上面代码的高度和宽度注释掉，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。</p>\n<p>来来来，代码走一波！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>div和span标签的使用<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.div</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: red;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*height: 300px;*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*width: 300px;*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*选中我们的设置class=\"div\"*/</span>\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.element</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: green;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*height: 400px;*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*width: 400px;*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*选中我们的设置class=\"element\"*/</span>\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div\"</span>&gt;</span>这是div标签里面的内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"element\"</span>&gt;</span>这是span标签的内容<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/block-inline-elemet.png\" alt=\"效果图\"></p>\n<p>是不是又看出来一个区别呢？</p>\n<p><strong>块状元素是独占一行的，而行内元素只占本身内容的大小。</strong></p>\n<p>看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-element.jpg\" alt=\"效果图\"></p>\n<p><strong>即使我们设置了块状元素的高度和宽度，它还是独占一行的</strong>。真的是霸道啊！</p>\n<p>如果不会使用谷歌浏览器检查网页的同学，可以参考<a href=\"https://jingyan.baidu.com/article/2f9b480db6cde741ca6cc246.html\" target=\"_blank\" rel=\"noopener\">如何使用谷歌浏览器检查页面。</a></p>\n<p>说了这么多，我好像还是没有教你们如何去写一个浮动布局。</p>\n<p>咳咳，下面正式开始。</p>\n<h2 id=\"为什么要使用浮动布局\"><a href=\"#为什么要使用浮动布局\" class=\"headerlink\" title=\"为什么要使用浮动布局\"></a>为什么要使用浮动布局</h2><p>在开始之前，我们按照套路，还是要问一个问题：为什么要使用浮动布局，仅仅是因为它是高效的？</p>\n<p>答案当然是否定的。</p>\n<p>在上面的我们分析了块状元素是独占一行的，但是在页面布局的时候，往往都是要求许多块状元素是在一行的。</p>\n<p>怎么解决这个问题呢？</p>\n<p>解决问题有两种方案：</p>\n<ul>\n<li>我们可以使用 CSS 把块状元素变成行内元素</li>\n<li>我们使用浮动</li>\n</ul>\n<p>对于第一种方案，我们直接否定！<strong>因为它存在误差！</strong><br>下面我们使用 HTML 和 CSS 来写一段代码有误差的代码： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>使用行内元素是有误差的<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.div-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: red;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*让其作为行内元素显示*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tdisplay: inline-block;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.div-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: green;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*让其作为行内元素显示*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:inline-block</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div-1\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div-2\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的这段代码，我们使用块状元素 div 写了两个区块，并且使用<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display:inline-block; </span><br></pre></td></tr></table></figure> </p>\n<p>让块状元素 div 来作为行内元素显示，然后我们来看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/inline-element-error.jpg\" alt=\"行内元素误差效果显示\"></p>\n<p>我们发现<strong>虽然两个 div 可以变成行内元素在一行显示，但是他们之间还是存在空白，不能完美的相邻在一起。</strong></p>\n<p>这点空白会给我们布局带来很大的麻烦，这就是我们为什么选择浮动布局的原因。</p>\n<p>选择浮动布局的原因知道了，下面我们来写一个浮动布局吧。</p>\n<p>真的开始写喽，不是骗你们的！</p>\n<h2 id=\"一个简单的浮动布局\"><a href=\"#一个简单的浮动布局\" class=\"headerlink\" title=\"一个简单的浮动布局\"></a>一个简单的浮动布局</h2><p>首先我们画两个 div，并且设置它们的背景颜色，高度以及宽度，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>简单的浮动布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">    这是第一个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">    这是第二个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure> \n<p>打开浏览器看效果是这个样子滴：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout.jpg\" alt=\"浮动之前的效果图\"></p>\n<p>这个效果很正常嘛。 div 作为很霸道的块状元素，当然占据一整行，两个 div 就分别占据两行喽。</p>\n<p>下面我们就要使用浮动了，注意看清楚哦！</p>\n<p>我们只要在上面代码中 div 的 class 选择器里面添加如下代码即可实现浮动。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float: left;</span><br></pre></td></tr></table></figure>\n<p>来来来，完整代码走一波！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>简单的浮动布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置为浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置为浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">    这是第一个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">    这是第二个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后我们用浏览器打开看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-1.png\" alt=\"简单浮动效果图\"></p>\n<p>我们发现两个原本很难相邻在一起的块状元素，竟然完美的 <strong>无缝</strong> 的相邻在一起。</p>\n<p>浮动的布局是不是很简单呢？我们只要添加 「 float: left;」即可实现浮动。你们学会了吗？</p>\n<p>现在让我们重新来看一下「 float: left;」这段代码。</p>\n<p>我们都知道「 float 」这个字是指定使用浮动的关键字，但是「 left 」是干嘛用的？难道还是指定 right？</p>\n<p>当然可以啦。left 的意思是指定左浮动，意思是让元素悬浮在浏览器的左边，right就是相反的意思，让元素悬浮在浏览器的右边。</p>\n<p>来来来，让我们把上面代码中的 left 变成right，代码再走一波!</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>简单的浮动布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置为浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            float: right;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置为浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            float: right;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">    这是第一个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">    这是第二个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>让我们打开浏览器看效果！</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-right.png\" alt=\"右浮动效果图\"></p>\n<p>是不是被浮动的结果吓了一跳呢？设置浮动的元素竟然都跑到右边去了。</p>\n<p>到了这里，关于怎么写浮动，我想你们应该已经会了。下面我们来看一个问题，要跟着我的思路走哦。</p>\n<p>还是回到我们之前设置的左浮动的页面。我们可以使用谷歌浏览器来检查一下它们的高度和宽度，和我们设置的完全一样。</p>\n<p>这段代码没问题。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-show-height.png\" alt=\"\"></p>\n<h2 id=\"还是一个简单的浮动布局\"><a href=\"#还是一个简单的浮动布局\" class=\"headerlink\" title=\"还是一个简单的浮动布局\"></a>还是一个简单的浮动布局</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>还是一个简单的浮动布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">            我是第一个子元素</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">            我是第二个子元素</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-2.png\" alt=\"效果图\"></p>\n<p>这段代码还是很简单，我们还是使用　DIV　标签画了两个　200 * 200　区块，和之前代码的唯一区别在于</p>\n<p>这两个区块被一个「父区块 parent」包含着。</p>\n<p>这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/second-check-child.png\" alt=\"\"></p>\n<p>子元素宽度和高度都是 OK 的。</p>\n<p>我们再来看看它父元素高度和宽度。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parent-check.png\" alt=\"\"></p>\n<p>我去！父元素的高度竟然是 <strong>０</strong>！！　我是不是安装了假的浏览器？</p>\n<p>解铃还须系铃人，要想知道原因，我们需要去了解一下　DIV　标签和「浮动」的之间的关系。</p>\n<h2 id=\"这也是一个简单的浮动布局\"><a href=\"#这也是一个简单的浮动布局\" class=\"headerlink\" title=\"这也是一个简单的浮动布局\"></a>这也是一个简单的浮动布局</h2><p>还是一个很简单的布局，我们有三个DIV区块，分别为「first」、「second」、「third」它们父区块「parent」包含着</p>\n<p>并且设置三个DIV区块为左浮动的。</p>\n<p>代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>清除浮动演示<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">            第一个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">            第二个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">            第三个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-1.png\" alt=\"效果图\"></p>\n<p>我们使用谷歌浏览器来检查一下，发现子元素的高度和宽度和设置的值一样，但是父元素高度还是为０。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/origin-parent-height.png\" alt=\"\"></p>\n<p>现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做？</p>\n<p>这就要使用到另一个招式 「清除浮动」</p>\n<p>我们只要在第三块区块的「.third」中添加<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear: left;</span><br></pre></td></tr></table></figure> </p>\n<p>即可。</p>\n<p>来来来，代码敲一波：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>清除浮动演示<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">                width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">                width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">                height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">                background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">                width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                clear: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">                第一个区块</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">                第二个区块</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">                第三个区块</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>话不多说，让我们先看效果。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/add-clear-left-1.png\" alt=\"添加 clear: left;的效果图\"></p>\n<p>真的把第三个区块给压下来了！</p>\n<p>还是按照上面的套路，我们来分析这段代码「 clear: left; 」：</p>\n<p>它用到的关键字是「 clear 」，它的含义是清除。</p>\n<p>而 「 left 」 代表是左边。</p>\n<p>那么它合起来的意思是：<strong>清除左边的浮动元素</strong>。</p>\n<p>说到更明白一点就是：<strong>不让当前元素的左边有浮动元素。</strong></p>\n<p>当前元素是第三个区块，它的左边有两个浮动元素 first 和second 。</p>\n<p>那这段代码的意思就是：<strong>不让第三个区块左边有浮动元素</strong>，那浏览器这么处理呢？</p>\n<p>浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到 <strong>下一行</strong> 来吧！”</p>\n<p>于是第三个区块就到了下一行啦。  </p>\n<p>虽然有点复杂，但是按照上面思路进行一步步分解，是不是就变的很简单呢？</p>\n<p>让我们再来拓展一下，clear 除了可以设置为 left,还可以设置为 「 right 」 和 「 both 」。</p>\n<p>我相信不用我说你们也明白了吧！</p>\n<p>right 就是不让当前元素 <strong>右边</strong> 存在浮动元素嘛。</p>\n<p>那 both 就是不让当前元素的 <strong>两边</strong> 出现浮动元素喽。</p>\n<p>说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！</p>\n<p>这个有点尴尬！</p>\n<h2 id=\"父元素高度真的需要吗？\"><a href=\"#父元素高度真的需要吗？\" class=\"headerlink\" title=\"父元素高度真的需要吗？\"></a>父元素高度真的需要吗？</h2><p><img src=\"/image/back-2-font-xinfa-1/clear-float-parent.png\" alt=\"\"></p>\n<p>那么，在解决之前，按照我们的套路，我们要问一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。</p>\n<p>我的实习导师告诉我：“这是不行的。<strong>浮动布局的占位空间往往是我们理想的父元素高度。</strong>”</p>\n<p>他说的太抽象，我们来说的直白一点：</p>\n<p>「在布局中我们往往使用浮动布局来实现某一块区域的布局」。</p>\n<p>「然后我们最好用一个DIV去包裹整个浮动布局，用于和其它的布局区分开」。</p>\n<p>「最后我们要求这个父DIV和高度要和浮动布局的高度一样」。</p>\n<p>对于上面的三点内容，前两点我们已经做到了。在上面的代码中，我们使用「parent」包裹着「first」、「second」、「third」，并且</p>\n<p>而且它们都是浮动的。</p>\n<p>想要解决第三个问题，就是使用我们上面讲的招式-<strong>清除浮动</strong>。</p>\n<p>我们在父区块最后面增加一个空的DIV,将它设置它为「 clear:both 」。</p>\n<p>为什么要这么使用呢，具体的原因我也讲不清楚，大概是这样的吧：</p>\n<p>因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受 <strong>任何</strong> 浮动元素干扰,我们必须清除浮动对它的干扰。</p>\n<p>注意哦！最后一个元素不是浮动的哦。</p>\n<p>来来来，代码走一波！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DIV和CSS的前世今生<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            clear: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.last</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            clear: both;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">            第一个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">            第二个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">            第三个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"last\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后我们会发现，父元素竟然有高度了，而且和浮动布局的高度是一样的！</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parrent-height.png\" alt=\"父元素有高度了\"></p>\n<p>哈哈，到了这里，我们已经完全解决父元素高度为 0 的问题，那么我想问：</p>\n<p>上面的解决方法是最好的吗？</p>\n<h2 id=\"清除浮动－最佳实践\"><a href=\"#清除浮动－最佳实践\" class=\"headerlink\" title=\"清除浮动－最佳实践\"></a>清除浮动－最佳实践</h2><p>按照套路，我们得问一个问题：上面的解决方案有问题吗？</p>\n<p>回答是肯定的！</p>\n<p>因为按照上面的方法，我们需要在 <strong>手动</strong> 在每个父区块最后添加一个空的 DIV，这样的做法是 <strong>低效的</strong>！</p>\n<p>因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。</p>\n<p>我们可不可以在某个地方统一定义，然后全局使用呢？就像Java一样，一次编译，到处运行。</p>\n<p>哈哈哈，程序员都喜欢偷懒，我也不例外。回答是当然可以啦。</p>\n<p>这个要使用到另一个新的招式-CSS 的「伪类」,伪类的具体用法可以参考<a href=\"http://www.w3school.com.cn/css/css_pseudo_elements.asp\" target=\"_blank\" rel=\"noopener\">W3C的CSS伪类教程。</a></p>\n<p>我们这里使用的是「after」伪类，它可以自动的在某个父元素的最后一行添加最后一个子元素，并且设置属性。</p>\n<p>上面的话有点拗口，来来来，我们直接上代码分析：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent:after&#123;</span><br><span class=\"line\">    /*设置最后一个元素的内容为空*/</span><br><span class=\"line\">    content: \"\";</span><br><span class=\"line\">    /*设置最后一个元素为清除两边浮动*/</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">    /*设置最后一个元素为块状元素*/</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上面的代码会自动在「parent」作用的标签的最后一行添加一个子元素，并且设置该元素为「块状元素」「内容为空」以及「清除浮动」。</p>\n<p>是不是很神奇呢？我们可以使用 CSS 自动的添加元素。并且设置其属性。</p>\n<p>那么还有一个问题，如何让上面的这个代码被所有的父元素共享呢？</p>\n<p>这个很简单啦，只要把需要样式的父元素的 class属性设置值为 「parent」，那么就可以直接使用啦。</p>\n<p>来来来，让我们完整的敲一次代码！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DIV和CSS最佳实践<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            clear: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        /*</span></span><br><span class=\"line\"><span class=\"undefined\">          伪类</span></span><br><span class=\"line\"><span class=\"undefined\">         */</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:after</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置最后一个元素的内容为空*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            content: \"\";</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置最后一个元素为清除两边浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            clear: both;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置最后一个元素为块状元素*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            display: block;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">            第一个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">            第二个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">            第三个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-after.png\" alt=\"使用最佳实践-伪类后的效果图\"></p>\n<h2 id=\"你说的都是真的吗\"><a href=\"#你说的都是真的吗\" class=\"headerlink\" title=\"你说的都是真的吗\"></a>你说的都是真的吗</h2><p>从头到尾说了这么多，有的同学或许会问，你说的都是真的吗？，那些大型网站的页面都是按照你说的这么设计的的吗？</p>\n<p>我读书少，你可别骗我。</p>\n<p>不信？</p>\n<p>我们去看看一些大型网站的页面的浮动布局的设计代码。</p>\n<p>我们先看豆瓣的</p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-1.png\" alt=\"使用after\"></p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-2.png\" alt=\"使用after+浮动布局\"></p>\n<p>我们再看看天猫的</p>\n<p><img src=\"/image/back-2-font-xinfa-1/tianmao-1.png\" alt=\"使用after\"><br><img src=\"/image/back-2-font-xinfa-1/tianmao-2.png\" alt=\"使用after+浮动布局\"></p>\n<p>哈哈，我可没有骗你们哦！大型网站都是这么用的，而且貌似高手都使用 「float:right;」呢！</p>\n<p>最后，我们再来回顾一下，这篇文章从介绍　HTML的元素种类开始，到浮动布局，最后以清除浮动和最佳实践收尾。</p>\n<p>可以让一个小白慢慢的窥视到大型网页设计的理念。</p>\n<p>中间有一些招式可能说的太粗糙。不要捉急，我们先学心法。招式到后面慢慢再学习。</p>\n<p>这篇文章到这里就结束了，我会在下一篇博文继续介绍心法 II</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：</p>\n<p><strong>从左到右，从上到下，从整体到布局，化整为零。</strong></p>\n<p>那么在接下来的几篇文章中，我们就来聊聊页面布局的心法。</p>\n<p>如果说口诀可以让你学会布局一个简单的页面，那么心法会很大程度上提升你的布局效率。</p>\n<p>在上一篇文章，我们一直推荐使用高效的浮动布局，那么这篇文章我们就先来看看什么是浮动布局吧。</p>\n<p>要想了解浮动布局，得先了解　HTML 的元素种类。</p>\n<h2 id=\"HTML-块状元素和行内元素\"><a href=\"#HTML-块状元素和行内元素\" class=\"headerlink\" title=\"HTML 块状元素和行内元素\"></a>HTML 块状元素和行内元素</h2><p>首先我们来看一段简单的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>div和span标签的使用<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.div</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\theight: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\twidth: 300px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*选中我们的设置class=\"div\"*/</span>\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.element</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: green;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\theight: 400px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\twidth: 400px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*选中我们的设置class=\"element\"*/</span>\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div\"</span>&gt;</span>这是div标签里面的内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"element\"</span>&gt;</span>这是span标签的内容<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，我们使用 div 和 span 画了两个区域，并且分别设置了它们的高度和宽度。效果如下：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/html-css-show.jpg\" alt=\"效果图\"></p>\n<p>我们发现：我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？</p>\n<p>难道它们两是不同种类的元素？</p>\n<p>嘿嘿，猜对啦！</p>\n<p>其实在 HTML 中，我们可以把标签分为块状元素和行内元素，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。</p>\n<ul>\n<li><p>块状元素的标签还有：p、ul、ol等。</p>\n</li>\n<li><p>行内元素的标签还有：img、code、input等。</p>\n</li>\n</ul>\n<p>那么块状元素和行内元素有什么区别呢？</p>\n<p>从我们的代码的效果图里面我们已经看出来一个区别了：<strong>块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。</strong></p>\n<p>我们再来写一段代码试试，我们使用我们熟悉的 div 标签和 span 标签来演示。</p>\n<p>我们把上面代码的高度和宽度注释掉，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。</p>\n<p>来来来，代码走一波！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>div和span标签的使用<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.div</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: red;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*height: 300px;*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*width: 300px;*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*选中我们的设置class=\"div\"*/</span>\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.element</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: green;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*height: 400px;*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*width: 400px;*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*选中我们的设置class=\"element\"*/</span>\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div\"</span>&gt;</span>这是div标签里面的内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"element\"</span>&gt;</span>这是span标签的内容<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/block-inline-elemet.png\" alt=\"效果图\"></p>\n<p>是不是又看出来一个区别呢？</p>\n<p><strong>块状元素是独占一行的，而行内元素只占本身内容的大小。</strong></p>\n<p>看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-element.jpg\" alt=\"效果图\"></p>\n<p><strong>即使我们设置了块状元素的高度和宽度，它还是独占一行的</strong>。真的是霸道啊！</p>\n<p>如果不会使用谷歌浏览器检查网页的同学，可以参考<a href=\"https://jingyan.baidu.com/article/2f9b480db6cde741ca6cc246.html\" target=\"_blank\" rel=\"noopener\">如何使用谷歌浏览器检查页面。</a></p>\n<p>说了这么多，我好像还是没有教你们如何去写一个浮动布局。</p>\n<p>咳咳，下面正式开始。</p>\n<h2 id=\"为什么要使用浮动布局\"><a href=\"#为什么要使用浮动布局\" class=\"headerlink\" title=\"为什么要使用浮动布局\"></a>为什么要使用浮动布局</h2><p>在开始之前，我们按照套路，还是要问一个问题：为什么要使用浮动布局，仅仅是因为它是高效的？</p>\n<p>答案当然是否定的。</p>\n<p>在上面的我们分析了块状元素是独占一行的，但是在页面布局的时候，往往都是要求许多块状元素是在一行的。</p>\n<p>怎么解决这个问题呢？</p>\n<p>解决问题有两种方案：</p>\n<ul>\n<li>我们可以使用 CSS 把块状元素变成行内元素</li>\n<li>我们使用浮动</li>\n</ul>\n<p>对于第一种方案，我们直接否定！<strong>因为它存在误差！</strong><br>下面我们使用 HTML 和 CSS 来写一段代码有误差的代码： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>使用行内元素是有误差的<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.div-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: red;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*让其作为行内元素显示*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tdisplay: inline-block;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.div-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: green;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*让其作为行内元素显示*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:inline-block</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div-1\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div-2\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的这段代码，我们使用块状元素 div 写了两个区块，并且使用<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display:inline-block; </span><br></pre></td></tr></table></figure> </p>\n<p>让块状元素 div 来作为行内元素显示，然后我们来看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/inline-element-error.jpg\" alt=\"行内元素误差效果显示\"></p>\n<p>我们发现<strong>虽然两个 div 可以变成行内元素在一行显示，但是他们之间还是存在空白，不能完美的相邻在一起。</strong></p>\n<p>这点空白会给我们布局带来很大的麻烦，这就是我们为什么选择浮动布局的原因。</p>\n<p>选择浮动布局的原因知道了，下面我们来写一个浮动布局吧。</p>\n<p>真的开始写喽，不是骗你们的！</p>\n<h2 id=\"一个简单的浮动布局\"><a href=\"#一个简单的浮动布局\" class=\"headerlink\" title=\"一个简单的浮动布局\"></a>一个简单的浮动布局</h2><p>首先我们画两个 div，并且设置它们的背景颜色，高度以及宽度，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>简单的浮动布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">    这是第一个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">    这是第二个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure> \n<p>打开浏览器看效果是这个样子滴：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout.jpg\" alt=\"浮动之前的效果图\"></p>\n<p>这个效果很正常嘛。 div 作为很霸道的块状元素，当然占据一整行，两个 div 就分别占据两行喽。</p>\n<p>下面我们就要使用浮动了，注意看清楚哦！</p>\n<p>我们只要在上面代码中 div 的 class 选择器里面添加如下代码即可实现浮动。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float: left;</span><br></pre></td></tr></table></figure>\n<p>来来来，完整代码走一波！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>简单的浮动布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置为浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置为浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">    这是第一个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">    这是第二个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后我们用浏览器打开看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-1.png\" alt=\"简单浮动效果图\"></p>\n<p>我们发现两个原本很难相邻在一起的块状元素，竟然完美的 <strong>无缝</strong> 的相邻在一起。</p>\n<p>浮动的布局是不是很简单呢？我们只要添加 「 float: left;」即可实现浮动。你们学会了吗？</p>\n<p>现在让我们重新来看一下「 float: left;」这段代码。</p>\n<p>我们都知道「 float 」这个字是指定使用浮动的关键字，但是「 left 」是干嘛用的？难道还是指定 right？</p>\n<p>当然可以啦。left 的意思是指定左浮动，意思是让元素悬浮在浏览器的左边，right就是相反的意思，让元素悬浮在浏览器的右边。</p>\n<p>来来来，让我们把上面代码中的 left 变成right，代码再走一波!</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>简单的浮动布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置为浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            float: right;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置为浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            float: right;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">    这是第一个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">    这是第二个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>让我们打开浏览器看效果！</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-right.png\" alt=\"右浮动效果图\"></p>\n<p>是不是被浮动的结果吓了一跳呢？设置浮动的元素竟然都跑到右边去了。</p>\n<p>到了这里，关于怎么写浮动，我想你们应该已经会了。下面我们来看一个问题，要跟着我的思路走哦。</p>\n<p>还是回到我们之前设置的左浮动的页面。我们可以使用谷歌浏览器来检查一下它们的高度和宽度，和我们设置的完全一样。</p>\n<p>这段代码没问题。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-show-height.png\" alt=\"\"></p>\n<h2 id=\"还是一个简单的浮动布局\"><a href=\"#还是一个简单的浮动布局\" class=\"headerlink\" title=\"还是一个简单的浮动布局\"></a>还是一个简单的浮动布局</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>还是一个简单的浮动布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">            我是第一个子元素</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">            我是第二个子元素</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-2.png\" alt=\"效果图\"></p>\n<p>这段代码还是很简单，我们还是使用　DIV　标签画了两个　200 * 200　区块，和之前代码的唯一区别在于</p>\n<p>这两个区块被一个「父区块 parent」包含着。</p>\n<p>这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/second-check-child.png\" alt=\"\"></p>\n<p>子元素宽度和高度都是 OK 的。</p>\n<p>我们再来看看它父元素高度和宽度。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parent-check.png\" alt=\"\"></p>\n<p>我去！父元素的高度竟然是 <strong>０</strong>！！　我是不是安装了假的浏览器？</p>\n<p>解铃还须系铃人，要想知道原因，我们需要去了解一下　DIV　标签和「浮动」的之间的关系。</p>\n<h2 id=\"这也是一个简单的浮动布局\"><a href=\"#这也是一个简单的浮动布局\" class=\"headerlink\" title=\"这也是一个简单的浮动布局\"></a>这也是一个简单的浮动布局</h2><p>还是一个很简单的布局，我们有三个DIV区块，分别为「first」、「second」、「third」它们父区块「parent」包含着</p>\n<p>并且设置三个DIV区块为左浮动的。</p>\n<p>代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>清除浮动演示<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">            第一个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">            第二个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">            第三个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-1.png\" alt=\"效果图\"></p>\n<p>我们使用谷歌浏览器来检查一下，发现子元素的高度和宽度和设置的值一样，但是父元素高度还是为０。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/origin-parent-height.png\" alt=\"\"></p>\n<p>现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做？</p>\n<p>这就要使用到另一个招式 「清除浮动」</p>\n<p>我们只要在第三块区块的「.third」中添加<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear: left;</span><br></pre></td></tr></table></figure> </p>\n<p>即可。</p>\n<p>来来来，代码敲一波：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>清除浮动演示<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">                width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">                width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">                height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">                background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">                width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                clear: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">                第一个区块</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">                第二个区块</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">                第三个区块</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>话不多说，让我们先看效果。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/add-clear-left-1.png\" alt=\"添加 clear: left;的效果图\"></p>\n<p>真的把第三个区块给压下来了！</p>\n<p>还是按照上面的套路，我们来分析这段代码「 clear: left; 」：</p>\n<p>它用到的关键字是「 clear 」，它的含义是清除。</p>\n<p>而 「 left 」 代表是左边。</p>\n<p>那么它合起来的意思是：<strong>清除左边的浮动元素</strong>。</p>\n<p>说到更明白一点就是：<strong>不让当前元素的左边有浮动元素。</strong></p>\n<p>当前元素是第三个区块，它的左边有两个浮动元素 first 和second 。</p>\n<p>那这段代码的意思就是：<strong>不让第三个区块左边有浮动元素</strong>，那浏览器这么处理呢？</p>\n<p>浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到 <strong>下一行</strong> 来吧！”</p>\n<p>于是第三个区块就到了下一行啦。  </p>\n<p>虽然有点复杂，但是按照上面思路进行一步步分解，是不是就变的很简单呢？</p>\n<p>让我们再来拓展一下，clear 除了可以设置为 left,还可以设置为 「 right 」 和 「 both 」。</p>\n<p>我相信不用我说你们也明白了吧！</p>\n<p>right 就是不让当前元素 <strong>右边</strong> 存在浮动元素嘛。</p>\n<p>那 both 就是不让当前元素的 <strong>两边</strong> 出现浮动元素喽。</p>\n<p>说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！</p>\n<p>这个有点尴尬！</p>\n<h2 id=\"父元素高度真的需要吗？\"><a href=\"#父元素高度真的需要吗？\" class=\"headerlink\" title=\"父元素高度真的需要吗？\"></a>父元素高度真的需要吗？</h2><p><img src=\"/image/back-2-font-xinfa-1/clear-float-parent.png\" alt=\"\"></p>\n<p>那么，在解决之前，按照我们的套路，我们要问一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。</p>\n<p>我的实习导师告诉我：“这是不行的。<strong>浮动布局的占位空间往往是我们理想的父元素高度。</strong>”</p>\n<p>他说的太抽象，我们来说的直白一点：</p>\n<p>「在布局中我们往往使用浮动布局来实现某一块区域的布局」。</p>\n<p>「然后我们最好用一个DIV去包裹整个浮动布局，用于和其它的布局区分开」。</p>\n<p>「最后我们要求这个父DIV和高度要和浮动布局的高度一样」。</p>\n<p>对于上面的三点内容，前两点我们已经做到了。在上面的代码中，我们使用「parent」包裹着「first」、「second」、「third」，并且</p>\n<p>而且它们都是浮动的。</p>\n<p>想要解决第三个问题，就是使用我们上面讲的招式-<strong>清除浮动</strong>。</p>\n<p>我们在父区块最后面增加一个空的DIV,将它设置它为「 clear:both 」。</p>\n<p>为什么要这么使用呢，具体的原因我也讲不清楚，大概是这样的吧：</p>\n<p>因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受 <strong>任何</strong> 浮动元素干扰,我们必须清除浮动对它的干扰。</p>\n<p>注意哦！最后一个元素不是浮动的哦。</p>\n<p>来来来，代码走一波！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DIV和CSS的前世今生<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            clear: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.last</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            clear: both;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">            第一个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">            第二个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">            第三个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"last\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后我们会发现，父元素竟然有高度了，而且和浮动布局的高度是一样的！</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parrent-height.png\" alt=\"父元素有高度了\"></p>\n<p>哈哈，到了这里，我们已经完全解决父元素高度为 0 的问题，那么我想问：</p>\n<p>上面的解决方法是最好的吗？</p>\n<h2 id=\"清除浮动－最佳实践\"><a href=\"#清除浮动－最佳实践\" class=\"headerlink\" title=\"清除浮动－最佳实践\"></a>清除浮动－最佳实践</h2><p>按照套路，我们得问一个问题：上面的解决方案有问题吗？</p>\n<p>回答是肯定的！</p>\n<p>因为按照上面的方法，我们需要在 <strong>手动</strong> 在每个父区块最后添加一个空的 DIV，这样的做法是 <strong>低效的</strong>！</p>\n<p>因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。</p>\n<p>我们可不可以在某个地方统一定义，然后全局使用呢？就像Java一样，一次编译，到处运行。</p>\n<p>哈哈哈，程序员都喜欢偷懒，我也不例外。回答是当然可以啦。</p>\n<p>这个要使用到另一个新的招式-CSS 的「伪类」,伪类的具体用法可以参考<a href=\"http://www.w3school.com.cn/css/css_pseudo_elements.asp\" target=\"_blank\" rel=\"noopener\">W3C的CSS伪类教程。</a></p>\n<p>我们这里使用的是「after」伪类，它可以自动的在某个父元素的最后一行添加最后一个子元素，并且设置属性。</p>\n<p>上面的话有点拗口，来来来，我们直接上代码分析：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent:after&#123;</span><br><span class=\"line\">    /*设置最后一个元素的内容为空*/</span><br><span class=\"line\">    content: \"\";</span><br><span class=\"line\">    /*设置最后一个元素为清除两边浮动*/</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">    /*设置最后一个元素为块状元素*/</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上面的代码会自动在「parent」作用的标签的最后一行添加一个子元素，并且设置该元素为「块状元素」「内容为空」以及「清除浮动」。</p>\n<p>是不是很神奇呢？我们可以使用 CSS 自动的添加元素。并且设置其属性。</p>\n<p>那么还有一个问题，如何让上面的这个代码被所有的父元素共享呢？</p>\n<p>这个很简单啦，只要把需要样式的父元素的 class属性设置值为 「parent」，那么就可以直接使用啦。</p>\n<p>来来来，让我们完整的敲一次代码！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DIV和CSS最佳实践<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            clear: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        /*</span></span><br><span class=\"line\"><span class=\"undefined\">          伪类</span></span><br><span class=\"line\"><span class=\"undefined\">         */</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:after</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置最后一个元素的内容为空*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            content: \"\";</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置最后一个元素为清除两边浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            clear: both;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置最后一个元素为块状元素*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            display: block;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">            第一个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">            第二个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">            第三个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-after.png\" alt=\"使用最佳实践-伪类后的效果图\"></p>\n<h2 id=\"你说的都是真的吗\"><a href=\"#你说的都是真的吗\" class=\"headerlink\" title=\"你说的都是真的吗\"></a>你说的都是真的吗</h2><p>从头到尾说了这么多，有的同学或许会问，你说的都是真的吗？，那些大型网站的页面都是按照你说的这么设计的的吗？</p>\n<p>我读书少，你可别骗我。</p>\n<p>不信？</p>\n<p>我们去看看一些大型网站的页面的浮动布局的设计代码。</p>\n<p>我们先看豆瓣的</p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-1.png\" alt=\"使用after\"></p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-2.png\" alt=\"使用after+浮动布局\"></p>\n<p>我们再看看天猫的</p>\n<p><img src=\"/image/back-2-font-xinfa-1/tianmao-1.png\" alt=\"使用after\"><br><img src=\"/image/back-2-font-xinfa-1/tianmao-2.png\" alt=\"使用after+浮动布局\"></p>\n<p>哈哈，我可没有骗你们哦！大型网站都是这么用的，而且貌似高手都使用 「float:right;」呢！</p>\n<p>最后，我们再来回顾一下，这篇文章从介绍　HTML的元素种类开始，到浮动布局，最后以清除浮动和最佳实践收尾。</p>\n<p>可以让一个小白慢慢的窥视到大型网页设计的理念。</p>\n<p>中间有一些招式可能说的太粗糙。不要捉急，我们先学心法。招式到后面慢慢再学习。</p>\n<p>这篇文章到这里就结束了，我会在下一篇博文继续介绍心法 II</p>\n"},{"title":"后端工程师入门前端页面重构（二）：心法 I　修改版－－易读性","date":"2018-01-04T16:00:00.000Z","_content":"\n上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：\n\n**从左到右，从上到下，从整体到布局，化整为零。**\n\n那么在接下来的几篇文章中，我们就来聊聊页面布局的心法。\n\n如果说口诀可以让你学会布局一个简单的页面，那么心法会很大程度上提升你的布局效率。\n\n在上一篇文章，我们一直推荐使用高效的浮动布局，那么这篇文章我们就先来看看什么是浮动布局吧。\n\n## HTML 块状元素和行内元素\n\n在我们熟知的页面布局中，网页的标题，logo等都是有高度和宽度的。我们来看下面的豆瓣首页的切图：\n\n![豆瓣首页切图](/image/back-2-font-xinfa-1/douban-index.png)\n\n在上面的图片中，我们使用红色的线条和文字标注豆瓣 logo 的高度和宽度。不仅仅的 logo 图有高度和宽度，搜索框，热搜主题等其它元素，几乎都有高度和宽度。\n\n那么在 HTML 语言中，我们如何指定元素的高度和宽度呢？\n\n首先我们来看一段简单的代码：\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>div和span标签的使用</title>\n    \t<style type=\"text/css\">\n    \t\t.div{\n    \t\t\tbackground-color: red;\n    \t\t\theight: 300px;\n    \t\t\twidth: 300px;\n    \t\t\t/*选中我们的设置class=\"div\"*/\t\n    \t\t}\n    \n    \t\t.element{\n    \t\t\tbackground-color: green;\n    \t\t\theight: 400px;\n    \t\t\twidth: 400px;\n    \t\t\t/*选中我们的设置class=\"element\"*/\t\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div\">这是div标签里面的内容</div>\n    \t<span class=\"element\">这是span标签的内容</span>\n    </body>\n    </html>\n    \n{% endcodeblock %}\n\n在上面的代码中，我们使用 div 和 span 画了两个区域，并且使用「height」和「width」指定它们的高度。效果如下：\n\n![效果图](/image/back-2-font-xinfa-1/html-css-show.jpg)\n\n我们发现：我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？\n\n难道它们两是不同种类的元素？\n\n嘿嘿，猜对啦！\n\n其实在 HTML 中，我们可以把标签分为块状元素和行内元素，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。\n\n* 块状元素的标签还有：p、ul、ol等。\n\n* 行内元素的标签还有：img、code、input等。\n\n那么块状元素和行内元素有什么区别呢？\n\n从我们的代码的效果图里面我们已经看出来一个区别了：**块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。**\n\n我们再来写一段代码试试，我们使用我们熟悉的 div 标签和 span 标签来演示。\n\n我们把上面代码的高度和宽度注释掉，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。\n\n来来来，代码走一波！\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>div和span标签的使用</title>\n    \t<style type=\"text/css\">\n    \t\t.div{\n    \t\t\tbackground-color: red;\n    \t\t\t/*height: 300px;*/\n    \t\t\t/*width: 300px;*/\n    \t\t\t/*选中我们的设置class=\"div\"*/\t\n    \t\t}\n    \n    \t\t.element{\n    \t\t\tbackground-color: green;\n    \t\t\t/*height: 400px;*/\n    \t\t\t/*width: 400px;*/\n    \t\t\t/*选中我们的设置class=\"element\"*/\t\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div\">这是div标签里面的内容</div>\n    \t<span class=\"element\">这是span标签的内容</span>\n    </body>\n    </html>\n{% endcodeblock %}\n\n![效果图](/image/back-2-font-xinfa-1/block-inline-elemet.png)\n\n是不是又看出来一个区别呢？\n\n**块状元素是独占一行的，而行内元素只占本身内容的大小。**\n\n看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。\n\n![效果图](/image/back-2-font-xinfa-1/block-element.jpg)\n\n**即使我们设置了块状元素的高度和宽度，它还是独占一行的**。真的是霸道啊！\n\n如果不会使用谷歌浏览器检查网页的同学，可以参考[如何使用谷歌浏览器检查页面。](https://jingyan.baidu.com/article/2f9b480db6cde741ca6cc246.html)\n\n\n说了这么多，我好像还是没有教你们如何去写一个浮动布局。\n\n咳咳，下面正式开始。\n\n\n## 为什么要使用浮动布局\n\n在开始之前，我们按照套路，还是要问一个问题：为什么要使用浮动布局，仅仅是因为它是高效的？\n\n答案当然是否定的。\n\n在上面的我们分析了块状元素是独占一行的，但是在页面布局的时候，往往都是要求许多块状元素是在一行的。\n\n怎么解决这个问题呢？\n\n解决问题有两种方案：\n* 我们可以使用 CSS 把块状元素变成行内元素\n* 我们使用浮动\n\n对于第一种方案，我们直接否定！**因为它存在误差！**\n下面我们使用 HTML 和 CSS 来写一段代码有误差的代码： \n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>使用行内元素是有误差的</title>\n    \t<style type=\"text/css\">\n    \t\t.div-1{\n    \t\t\tbackground-color: red;\n    \t\t\t/*让其作为行内元素显示*/\n    \t\t\tdisplay: inline-block;\n    \t\t\t\n    \t\t}\n    \n    \t\t.div-2{\n    \t\t\tbackground-color: green;\n    \t\t\t/*让其作为行内元素显示*/\n    \t\t\tdisplay:inline-block;\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div-1\">123</div>\n    \t<div class=\"div-2\">123</div>\n    </body>\n    </html>\n{% endcodeblock %}\n\n上面的这段代码，我们使用块状元素 div 写了两个区块，并且使用 \n{% codeblock lang:html %}\n    display:inline-block; \n{% endcodeblock %} \n\n让块状元素 div 来作为行内元素显示，然后我们来看效果：\n\n![行内元素误差效果显示](/image/back-2-font-xinfa-1/inline-element-error.jpg)\n\n我们发现**虽然两个 div 可以变成行内元素在一行显示，但是他们之间还是存在空白，不能完美的相邻在一起。**\n\n这点空白会给我们布局带来很大的麻烦，这就是我们为什么选择浮动布局的原因。\n\n选择浮动布局的原因知道了，下面我们来写一个浮动布局吧。\n\n真的开始写喽，不是骗你们的！\n\n\n## 一个简单的浮动布局\n\n首先我们画两个 div，并且设置它们的背景颜色，高度以及宽度，代码如下：\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n       \n{% endcodeblock %} \n\n打开浏览器看效果是这个样子滴：\n\n![浮动之前的效果图](/image/back-2-font-xinfa-1/float-layout.jpg)\n\n这个效果很正常嘛。 div 作为很霸道的块状元素，当然占据一整行，两个 div 就分别占据两行喽。\n\n下面我们就要使用浮动了，注意看清楚哦！\n\n我们只要在上面代码中 div 的 class 选择器里面添加如下代码即可实现浮动。\n\n{% codeblock lang:html %}\n    float: left;\n{% endcodeblock %}\n\n来来来，完整代码走一波！\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n                /*设置为浮动*/\n                float: left;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n                /*设置为浮动*/\n                float: left;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n{% endcodeblock %}\n\n然后我们用浏览器打开看效果：\n\n![简单浮动效果图](/image/back-2-font-xinfa-1/float-layout-show-1.png)\n\n我们发现两个原本很难相邻在一起的块状元素，竟然完美的 **无缝** 的相邻在一起。\n\n浮动的布局是不是很简单呢？我们只要添加 「 float: left;」即可实现浮动。你们学会了吗？\n\n现在让我们重新来看一下「 float: left;」这段代码。\n\n我们都知道「 float 」这个字是指定使用浮动的关键字，但是「 left 」是干嘛用的？难道还是指定 right？\n\n当然可以啦。left 的意思是指定左浮动，意思是让元素悬浮在浏览器的左边，right就是相反的意思，让元素悬浮在浏览器的右边。\n\n来来来，让我们把上面代码中的 left 变成right，代码再走一波!\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n                /*设置为浮动*/\n                float: right;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n                /*设置为浮动*/\n                float: right;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n{% endcodeblock %}\n\n让我们打开浏览器看效果！\n\n![右浮动效果图](/image/back-2-font-xinfa-1/float-right.png)\n\n是不是被浮动的结果吓了一跳呢？设置浮动的元素竟然都跑到右边去了。\n\n到了这里，关于怎么写浮动，我想你们应该已经会了。下面我们来看一个问题，要跟着我的思路走哦。\n\n还是回到我们之前设置的左浮动的页面。我们可以使用谷歌浏览器来检查一下它们的高度和宽度，和我们设置的完全一样。\n\n这段代码没问题。\n\n![](/image/back-2-font-xinfa-1/div-show-height.png)\n\n## 还是一个简单的浮动布局\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>还是一个简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                float: left;\n                background: red;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                float: left;\n                background: green;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"block-1\">\n                我是第一个子元素\n            </div>\n    \n            <div class=\"block-2\">\n                我是第二个子元素\n            </div>\n        </div>\n    </body>\n    </html>\n    \n{% endcodeblock %}\n\n![效果图](/image/back-2-font-xinfa-1/float-layout-show-2.png)\n\n这段代码还是很简单，我们还是使用　DIV　标签画了两个　200 * 200　区块，和之前代码的唯一区别在于\n\n这两个区块被一个「父区块 parent」包含着。\n\n这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。\n\n![](/image/back-2-font-xinfa-1/second-check-child.png)\n\n子元素宽度和高度都是 OK 的。\n\n我们再来看看它父元素高度和宽度。\n\n![](/image/back-2-font-xinfa-1/parent-check.png)\n\n我去！父元素的高度竟然是 **０**！！　我是不是安装了假的浏览器？\n\n解铃还须系铃人，要想知道原因，我们需要去了解一下　DIV　标签和「浮动」的之间的关系。\n\n\n## 这也是一个简单的浮动布局\n\n还是一个很简单的布局，我们有三个DIV区块，分别为「first」、「second」、「third」它们父区块「parent」包含着\n\n并且设置三个DIV区块为左浮动的。\n\n代码如下：\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>清除浮动演示</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n        </div>\n    </body>\n    </html>\n    \n{% endcodeblock %}\n\n![效果图](/image/back-2-font-xinfa-1/div-float-1.png)\n\n\n我们使用谷歌浏览器来检查一下，发现子元素的高度和宽度和设置的值一样，但是父元素高度还是为０。\n\n![](/image/back-2-font-xinfa-1/origin-parent-height.png)\n\n\n现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做？\n\n这就要使用到另一个招式 「清除浮动」\n\n我们只要在第三块区块的「.third」中添加\n{% codeblock lang:html %}\n    clear: left;\n{% endcodeblock %} \n\n即可。\n\n来来来，代码敲一波：\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n        <html>\n        <head>\n            <title>清除浮动演示</title>\n            <style type=\"text/css\">\n                .first{\n                    background: red;\n                    width: 200px;\n                    height: 200px;\n                    float: left;\n                }\n                .second{\n                    background: yellow;\n                    width: 200px;\n                    float: left;\n                    height: 200px;\n        \n                }\n                .third{\n                    float: left;\n                    background: green;\n                    width: 200px;\n                    height: 200px;\n                    clear: left;\n                }\n            </style>\n        </head>\n        <body>\n            <div class=\"parent\">\n                <div class=\"first\">\n                    第一个区块\n                </div>\n        \n                <div class=\"second\">\n                    第二个区块\n                </div>\n        \n                <div class=\"third\">\n                    第三个区块\n                </div>\n            </div>\n        </body>\n        </html>\n\n{% endcodeblock %}\n\n话不多说，让我们先看效果。\n\n![添加 clear: left;的效果图](/image/back-2-font-xinfa-1/add-clear-left-1.png)\n\n真的把第三个区块给压下来了！\n\n\n\n还是按照上面的套路，我们来分析这段代码「 clear: left; 」：\n\n它用到的关键字是「 clear 」，它的含义是清除。\n\n而 「 left 」 代表是左边。\n\n那么它合起来的意思是：**清除左边的浮动元素**。\n\n说到更明白一点就是：**不让当前元素的左边有浮动元素。**\n\n当前元素是第三个区块，它的左边有两个浮动元素 first 和second 。\n\n那这段代码的意思就是：**不让第三个区块左边有浮动元素**，那浏览器这么处理呢？\n\n浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到 **下一行** 来吧！”\n\n于是第三个区块就到了下一行啦。  \n\n虽然有点复杂，但是按照上面思路进行一步步分解，是不是就变的很简单呢？\n\n让我们再来拓展一下，clear 除了可以设置为 left,还可以设置为 「 right 」 和 「 both 」。\n\n我相信不用我说你们也明白了吧！\n\nright 就是不让当前元素 **右边** 存在浮动元素嘛。\n\n那 both 就是不让当前元素的 **两边** 出现浮动元素喽。\n\n说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！\n\n这个有点尴尬！\n\n## 父元素高度真的需要吗？\n\n![](/image/back-2-font-xinfa-1/clear-float-parent.png)\n\n那么，在解决之前，按照我们的套路，我们要问一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。\n\n我的实习导师告诉我：“这是不行的。**浮动布局的占位空间往往是我们理想的父元素高度。**”\n\n他说的太抽象，我们来说的直白一点：\n\n「在布局中我们往往使用浮动布局来实现某一块区域的布局」。\n\n「然后我们最好用一个DIV去包裹整个浮动布局，用于和其它的布局区分开」。\n\n「最后我们要求这个父DIV和高度要和浮动布局的高度一样」。\n\n对于上面的三点内容，前两点我们已经做到了。在上面的代码中，我们使用「parent」包裹着「first」、「second」、「third」，并且\n\n而且它们都是浮动的。\n\n想要解决第三个问题，就是使用我们上面讲的招式-**清除浮动**。\n\n我们在父区块最后面增加一个空的DIV,将它设置它为「 clear:both 」。\n\n为什么要这么使用呢，具体的原因我也讲不清楚，大概是这样的吧：\n\n因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受 **任何** 浮动元素干扰,我们必须清除浮动对它的干扰。\n\n注意哦！最后一个元素不是浮动的哦。\n\n来来来，代码走一波！\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS的前世今生</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n            .last{\n                clear: both;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n            <div class=\"last\">\n    \n            </div>\n        </div>\n    </body>\n    </html>\n\n{% endcodeblock %}\n\n然后我们会发现，父元素竟然有高度了，而且和浮动布局的高度是一样的！\n\n![父元素有高度了](/image/back-2-font-xinfa-1/parrent-height.png)\n\n哈哈，到了这里，我们已经完全解决父元素高度为 0 的问题，那么我想问：\n\n上面的解决方法是最好的吗？\n\n\n## 清除浮动－最佳实践\n\n按照套路，我们得问一个问题：上面的解决方案有问题吗？\n\n回答是肯定的！\n\n因为按照上面的方法，我们需要在 **手动** 在每个父区块最后添加一个空的 DIV，这样的做法是 **低效的**！\n\n因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。\n\n我们可不可以在某个地方统一定义，然后全局使用呢？就像Java一样，一次编译，到处运行。\n\n哈哈哈，程序员都喜欢偷懒，我也不例外。回答是当然可以啦。\n\n这个要使用到另一个新的招式-CSS 的「伪类」,伪类的具体用法可以参考[W3C的CSS伪类教程。](http://www.w3school.com.cn/css/css_pseudo_elements.asp)\n\n我们这里使用的是「after」伪类，它可以自动的在某个父元素的最后一行添加最后一个子元素，并且设置属性。\n\n上面的话有点拗口，来来来，我们直接上代码分析：\n\n{% codeblock lang:html %}\n    .parent:after{\n        /*设置最后一个元素的内容为空*/\n        content: \"\";\n        /*设置最后一个元素为清除两边浮动*/\n        clear: both;\n        /*设置最后一个元素为块状元素*/\n        display: block;\n    }\n\n{% endcodeblock %}\n\n上面的代码会自动在「parent」作用的标签的最后一行添加一个子元素，并且设置该元素为「块状元素」「内容为空」以及「清除浮动」。\n\n是不是很神奇呢？我们可以使用 CSS 自动的添加元素。并且设置其属性。\n\n那么还有一个问题，如何让上面的这个代码被所有的父元素共享呢？\n\n这个很简单啦，只要把需要样式的父元素的 class属性设置值为 「parent」，那么就可以直接使用啦。\n\n来来来，让我们完整的敲一次代码！\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS最佳实践</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n    \n            /*\n              伪类\n             */\n            .parent:after{\n                /*设置最后一个元素的内容为空*/\n                content: \"\";\n                /*设置最后一个元素为清除两边浮动*/\n                clear: both;\n                /*设置最后一个元素为块状元素*/\n                display: block;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n    \n        </div>\n    </body>\n    </html>\n    \n{% endcodeblock %}\n\n![使用最佳实践-伪类后的效果图](/image/back-2-font-xinfa-1/div-float-after.png)\n\n## 你说的都是真的吗\n\n从头到尾说了这么多，有的同学或许会问，你说的都是真的吗？，那些大型网站的页面都是按照你说的这么设计的的吗？\n\n我读书少，你可别骗我。\n\n不信？\n\n我们去看看一些大型网站的页面的浮动布局的设计代码。\n\n我们先看豆瓣的\n\n![使用after](/image/back-2-font-xinfa-1/douban-1.png)\n\n![使用after+浮动布局](/image/back-2-font-xinfa-1/douban-2.png)\n\n我们再看看天猫的\n\n![使用after](/image/back-2-font-xinfa-1/tianmao-1.png)\n![使用after+浮动布局](/image/back-2-font-xinfa-1/tianmao-2.png)\n\n哈哈，我可没有骗你们哦！大型网站都是这么用的，而且貌似高手都使用 「float:right;」呢！\n\n\n最后，我们再来回顾一下，这篇文章从介绍　HTML的元素种类开始，到浮动布局，最后以清除浮动和最佳实践收尾。\n\n可以让一个小白慢慢的窥视到大型网页设计的理念。\n\n中间有一些招式可能说的太粗糙。不要捉急，我们先学心法。招式到后面慢慢再学习。\n\n这篇文章到这里就结束了，我会在下一篇博文继续介绍心法 II\n\n","source":"_drafts/2018/01/back-2-font-xinfa-1-4.0.md","raw":"\n---\ntitle: 后端工程师入门前端页面重构（二）：心法 I　修改版－－易读性\ndate: 2018/01/05\ncategories: 前端页面重构系列\ntags:\n- 前端\n---\n\n上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：\n\n**从左到右，从上到下，从整体到布局，化整为零。**\n\n那么在接下来的几篇文章中，我们就来聊聊页面布局的心法。\n\n如果说口诀可以让你学会布局一个简单的页面，那么心法会很大程度上提升你的布局效率。\n\n在上一篇文章，我们一直推荐使用高效的浮动布局，那么这篇文章我们就先来看看什么是浮动布局吧。\n\n## HTML 块状元素和行内元素\n\n在我们熟知的页面布局中，网页的标题，logo等都是有高度和宽度的。我们来看下面的豆瓣首页的切图：\n\n![豆瓣首页切图](/image/back-2-font-xinfa-1/douban-index.png)\n\n在上面的图片中，我们使用红色的线条和文字标注豆瓣 logo 的高度和宽度。不仅仅的 logo 图有高度和宽度，搜索框，热搜主题等其它元素，几乎都有高度和宽度。\n\n那么在 HTML 语言中，我们如何指定元素的高度和宽度呢？\n\n首先我们来看一段简单的代码：\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>div和span标签的使用</title>\n    \t<style type=\"text/css\">\n    \t\t.div{\n    \t\t\tbackground-color: red;\n    \t\t\theight: 300px;\n    \t\t\twidth: 300px;\n    \t\t\t/*选中我们的设置class=\"div\"*/\t\n    \t\t}\n    \n    \t\t.element{\n    \t\t\tbackground-color: green;\n    \t\t\theight: 400px;\n    \t\t\twidth: 400px;\n    \t\t\t/*选中我们的设置class=\"element\"*/\t\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div\">这是div标签里面的内容</div>\n    \t<span class=\"element\">这是span标签的内容</span>\n    </body>\n    </html>\n    \n{% endcodeblock %}\n\n在上面的代码中，我们使用 div 和 span 画了两个区域，并且使用「height」和「width」指定它们的高度。效果如下：\n\n![效果图](/image/back-2-font-xinfa-1/html-css-show.jpg)\n\n我们发现：我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？\n\n难道它们两是不同种类的元素？\n\n嘿嘿，猜对啦！\n\n其实在 HTML 中，我们可以把标签分为块状元素和行内元素，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。\n\n* 块状元素的标签还有：p、ul、ol等。\n\n* 行内元素的标签还有：img、code、input等。\n\n那么块状元素和行内元素有什么区别呢？\n\n从我们的代码的效果图里面我们已经看出来一个区别了：**块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。**\n\n我们再来写一段代码试试，我们使用我们熟悉的 div 标签和 span 标签来演示。\n\n我们把上面代码的高度和宽度注释掉，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。\n\n来来来，代码走一波！\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>div和span标签的使用</title>\n    \t<style type=\"text/css\">\n    \t\t.div{\n    \t\t\tbackground-color: red;\n    \t\t\t/*height: 300px;*/\n    \t\t\t/*width: 300px;*/\n    \t\t\t/*选中我们的设置class=\"div\"*/\t\n    \t\t}\n    \n    \t\t.element{\n    \t\t\tbackground-color: green;\n    \t\t\t/*height: 400px;*/\n    \t\t\t/*width: 400px;*/\n    \t\t\t/*选中我们的设置class=\"element\"*/\t\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div\">这是div标签里面的内容</div>\n    \t<span class=\"element\">这是span标签的内容</span>\n    </body>\n    </html>\n{% endcodeblock %}\n\n![效果图](/image/back-2-font-xinfa-1/block-inline-elemet.png)\n\n是不是又看出来一个区别呢？\n\n**块状元素是独占一行的，而行内元素只占本身内容的大小。**\n\n看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。\n\n![效果图](/image/back-2-font-xinfa-1/block-element.jpg)\n\n**即使我们设置了块状元素的高度和宽度，它还是独占一行的**。真的是霸道啊！\n\n如果不会使用谷歌浏览器检查网页的同学，可以参考[如何使用谷歌浏览器检查页面。](https://jingyan.baidu.com/article/2f9b480db6cde741ca6cc246.html)\n\n\n说了这么多，我好像还是没有教你们如何去写一个浮动布局。\n\n咳咳，下面正式开始。\n\n\n## 为什么要使用浮动布局\n\n在开始之前，我们按照套路，还是要问一个问题：为什么要使用浮动布局，仅仅是因为它是高效的？\n\n答案当然是否定的。\n\n在上面的我们分析了块状元素是独占一行的，但是在页面布局的时候，往往都是要求许多块状元素是在一行的。\n\n怎么解决这个问题呢？\n\n解决问题有两种方案：\n* 我们可以使用 CSS 把块状元素变成行内元素\n* 我们使用浮动\n\n对于第一种方案，我们直接否定！**因为它存在误差！**\n下面我们使用 HTML 和 CSS 来写一段代码有误差的代码： \n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<title>使用行内元素是有误差的</title>\n    \t<style type=\"text/css\">\n    \t\t.div-1{\n    \t\t\tbackground-color: red;\n    \t\t\t/*让其作为行内元素显示*/\n    \t\t\tdisplay: inline-block;\n    \t\t\t\n    \t\t}\n    \n    \t\t.div-2{\n    \t\t\tbackground-color: green;\n    \t\t\t/*让其作为行内元素显示*/\n    \t\t\tdisplay:inline-block;\n    \t\t}\n    \t</style>\n    </head>\n    <body>\n    \t<div class=\"div-1\">123</div>\n    \t<div class=\"div-2\">123</div>\n    </body>\n    </html>\n{% endcodeblock %}\n\n上面的这段代码，我们使用块状元素 div 写了两个区块，并且使用 \n{% codeblock lang:html %}\n    display:inline-block; \n{% endcodeblock %} \n\n让块状元素 div 来作为行内元素显示，然后我们来看效果：\n\n![行内元素误差效果显示](/image/back-2-font-xinfa-1/inline-element-error.jpg)\n\n我们发现**虽然两个 div 可以变成行内元素在一行显示，但是他们之间还是存在空白，不能完美的相邻在一起。**\n\n这点空白会给我们布局带来很大的麻烦，这就是我们为什么选择浮动布局的原因。\n\n选择浮动布局的原因知道了，下面我们来写一个浮动布局吧。\n\n真的开始写喽，不是骗你们的！\n\n\n## 一个简单的浮动布局\n\n首先我们画两个 div，并且设置它们的背景颜色，高度以及宽度，代码如下：\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n       \n{% endcodeblock %} \n\n打开浏览器看效果是这个样子滴：\n\n![浮动之前的效果图](/image/back-2-font-xinfa-1/float-layout.jpg)\n\n这个效果很正常嘛。 div 作为很霸道的块状元素，当然占据一整行，两个 div 就分别占据两行喽。\n\n下面我们就要使用浮动了，注意看清楚哦！\n\n我们只要在上面代码中 div 的 class 选择器里面添加如下代码即可实现浮动。\n\n{% codeblock lang:html %}\n    float: left;\n{% endcodeblock %}\n\n来来来，完整代码走一波！\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n                /*设置为浮动*/\n                float: left;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n                /*设置为浮动*/\n                float: left;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n{% endcodeblock %}\n\n然后我们用浏览器打开看效果：\n\n![简单浮动效果图](/image/back-2-font-xinfa-1/float-layout-show-1.png)\n\n我们发现两个原本很难相邻在一起的块状元素，竟然完美的 **无缝** 的相邻在一起。\n\n浮动的布局是不是很简单呢？我们只要添加 「 float: left;」即可实现浮动。你们学会了吗？\n\n现在让我们重新来看一下「 float: left;」这段代码。\n\n我们都知道「 float 」这个字是指定使用浮动的关键字，但是「 left 」是干嘛用的？难道还是指定 right？\n\n当然可以啦。left 的意思是指定左浮动，意思是让元素悬浮在浏览器的左边，right就是相反的意思，让元素悬浮在浏览器的右边。\n\n来来来，让我们把上面代码中的 left 变成right，代码再走一波!\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                background: red;\n                /*设置为浮动*/\n                float: right;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                background: green;\n                /*设置为浮动*/\n                float: right;\n            }\n        </style>\n    </head>\n    <body>\n    \n    <div class=\"block-1\">\n        这是第一个区块\n    </div>\n    \n    <div class=\"block-2\">\n        这是第二个区块\n    </div>\n    </body>\n    </html>\n{% endcodeblock %}\n\n让我们打开浏览器看效果！\n\n![右浮动效果图](/image/back-2-font-xinfa-1/float-right.png)\n\n是不是被浮动的结果吓了一跳呢？设置浮动的元素竟然都跑到右边去了。\n\n到了这里，关于怎么写浮动，我想你们应该已经会了。下面我们来看一个问题，要跟着我的思路走哦。\n\n还是回到我们之前设置的左浮动的页面。我们可以使用谷歌浏览器来检查一下它们的高度和宽度，和我们设置的完全一样。\n\n这段代码没问题。\n\n![](/image/back-2-font-xinfa-1/div-show-height.png)\n\n## 还是一个简单的浮动布局\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>还是一个简单的浮动布局</title>\n        <style type=\"text/css\">\n            .block-1{\n                width: 200px;\n                height: 200px;\n                float: left;\n                background: red;\n            }\n    \n            .block-2{\n                width: 200px;\n                height: 200px;\n                float: left;\n                background: green;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"block-1\">\n                我是第一个子元素\n            </div>\n    \n            <div class=\"block-2\">\n                我是第二个子元素\n            </div>\n        </div>\n    </body>\n    </html>\n    \n{% endcodeblock %}\n\n![效果图](/image/back-2-font-xinfa-1/float-layout-show-2.png)\n\n这段代码还是很简单，我们还是使用　DIV　标签画了两个　200 * 200　区块，和之前代码的唯一区别在于\n\n这两个区块被一个「父区块 parent」包含着。\n\n这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。\n\n![](/image/back-2-font-xinfa-1/second-check-child.png)\n\n子元素宽度和高度都是 OK 的。\n\n我们再来看看它父元素高度和宽度。\n\n![](/image/back-2-font-xinfa-1/parent-check.png)\n\n我去！父元素的高度竟然是 **０**！！　我是不是安装了假的浏览器？\n\n解铃还须系铃人，要想知道原因，我们需要去了解一下　DIV　标签和「浮动」的之间的关系。\n\n\n## 这也是一个简单的浮动布局\n\n还是一个很简单的布局，我们有三个DIV区块，分别为「first」、「second」、「third」它们父区块「parent」包含着\n\n并且设置三个DIV区块为左浮动的。\n\n代码如下：\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>清除浮动演示</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n        </div>\n    </body>\n    </html>\n    \n{% endcodeblock %}\n\n![效果图](/image/back-2-font-xinfa-1/div-float-1.png)\n\n\n我们使用谷歌浏览器来检查一下，发现子元素的高度和宽度和设置的值一样，但是父元素高度还是为０。\n\n![](/image/back-2-font-xinfa-1/origin-parent-height.png)\n\n\n现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做？\n\n这就要使用到另一个招式 「清除浮动」\n\n我们只要在第三块区块的「.third」中添加\n{% codeblock lang:html %}\n    clear: left;\n{% endcodeblock %} \n\n即可。\n\n来来来，代码敲一波：\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n        <html>\n        <head>\n            <title>清除浮动演示</title>\n            <style type=\"text/css\">\n                .first{\n                    background: red;\n                    width: 200px;\n                    height: 200px;\n                    float: left;\n                }\n                .second{\n                    background: yellow;\n                    width: 200px;\n                    float: left;\n                    height: 200px;\n        \n                }\n                .third{\n                    float: left;\n                    background: green;\n                    width: 200px;\n                    height: 200px;\n                    clear: left;\n                }\n            </style>\n        </head>\n        <body>\n            <div class=\"parent\">\n                <div class=\"first\">\n                    第一个区块\n                </div>\n        \n                <div class=\"second\">\n                    第二个区块\n                </div>\n        \n                <div class=\"third\">\n                    第三个区块\n                </div>\n            </div>\n        </body>\n        </html>\n\n{% endcodeblock %}\n\n话不多说，让我们先看效果。\n\n![添加 clear: left;的效果图](/image/back-2-font-xinfa-1/add-clear-left-1.png)\n\n真的把第三个区块给压下来了！\n\n\n\n还是按照上面的套路，我们来分析这段代码「 clear: left; 」：\n\n它用到的关键字是「 clear 」，它的含义是清除。\n\n而 「 left 」 代表是左边。\n\n那么它合起来的意思是：**清除左边的浮动元素**。\n\n说到更明白一点就是：**不让当前元素的左边有浮动元素。**\n\n当前元素是第三个区块，它的左边有两个浮动元素 first 和second 。\n\n那这段代码的意思就是：**不让第三个区块左边有浮动元素**，那浏览器这么处理呢？\n\n浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到 **下一行** 来吧！”\n\n于是第三个区块就到了下一行啦。  \n\n虽然有点复杂，但是按照上面思路进行一步步分解，是不是就变的很简单呢？\n\n让我们再来拓展一下，clear 除了可以设置为 left,还可以设置为 「 right 」 和 「 both 」。\n\n我相信不用我说你们也明白了吧！\n\nright 就是不让当前元素 **右边** 存在浮动元素嘛。\n\n那 both 就是不让当前元素的 **两边** 出现浮动元素喽。\n\n说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！\n\n这个有点尴尬！\n\n## 父元素高度真的需要吗？\n\n![](/image/back-2-font-xinfa-1/clear-float-parent.png)\n\n那么，在解决之前，按照我们的套路，我们要问一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。\n\n我的实习导师告诉我：“这是不行的。**浮动布局的占位空间往往是我们理想的父元素高度。**”\n\n他说的太抽象，我们来说的直白一点：\n\n「在布局中我们往往使用浮动布局来实现某一块区域的布局」。\n\n「然后我们最好用一个DIV去包裹整个浮动布局，用于和其它的布局区分开」。\n\n「最后我们要求这个父DIV和高度要和浮动布局的高度一样」。\n\n对于上面的三点内容，前两点我们已经做到了。在上面的代码中，我们使用「parent」包裹着「first」、「second」、「third」，并且\n\n而且它们都是浮动的。\n\n想要解决第三个问题，就是使用我们上面讲的招式-**清除浮动**。\n\n我们在父区块最后面增加一个空的DIV,将它设置它为「 clear:both 」。\n\n为什么要这么使用呢，具体的原因我也讲不清楚，大概是这样的吧：\n\n因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受 **任何** 浮动元素干扰,我们必须清除浮动对它的干扰。\n\n注意哦！最后一个元素不是浮动的哦。\n\n来来来，代码走一波！\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS的前世今生</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n            .last{\n                clear: both;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n            <div class=\"last\">\n    \n            </div>\n        </div>\n    </body>\n    </html>\n\n{% endcodeblock %}\n\n然后我们会发现，父元素竟然有高度了，而且和浮动布局的高度是一样的！\n\n![父元素有高度了](/image/back-2-font-xinfa-1/parrent-height.png)\n\n哈哈，到了这里，我们已经完全解决父元素高度为 0 的问题，那么我想问：\n\n上面的解决方法是最好的吗？\n\n\n## 清除浮动－最佳实践\n\n按照套路，我们得问一个问题：上面的解决方案有问题吗？\n\n回答是肯定的！\n\n因为按照上面的方法，我们需要在 **手动** 在每个父区块最后添加一个空的 DIV，这样的做法是 **低效的**！\n\n因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。\n\n我们可不可以在某个地方统一定义，然后全局使用呢？就像Java一样，一次编译，到处运行。\n\n哈哈哈，程序员都喜欢偷懒，我也不例外。回答是当然可以啦。\n\n这个要使用到另一个新的招式-CSS 的「伪类」,伪类的具体用法可以参考[W3C的CSS伪类教程。](http://www.w3school.com.cn/css/css_pseudo_elements.asp)\n\n我们这里使用的是「after」伪类，它可以自动的在某个父元素的最后一行添加最后一个子元素，并且设置属性。\n\n上面的话有点拗口，来来来，我们直接上代码分析：\n\n{% codeblock lang:html %}\n    .parent:after{\n        /*设置最后一个元素的内容为空*/\n        content: \"\";\n        /*设置最后一个元素为清除两边浮动*/\n        clear: both;\n        /*设置最后一个元素为块状元素*/\n        display: block;\n    }\n\n{% endcodeblock %}\n\n上面的代码会自动在「parent」作用的标签的最后一行添加一个子元素，并且设置该元素为「块状元素」「内容为空」以及「清除浮动」。\n\n是不是很神奇呢？我们可以使用 CSS 自动的添加元素。并且设置其属性。\n\n那么还有一个问题，如何让上面的这个代码被所有的父元素共享呢？\n\n这个很简单啦，只要把需要样式的父元素的 class属性设置值为 「parent」，那么就可以直接使用啦。\n\n来来来，让我们完整的敲一次代码！\n\n{% codeblock lang:html %}\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>DIV和CSS最佳实践</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n    \n            /*\n              伪类\n             */\n            .parent:after{\n                /*设置最后一个元素的内容为空*/\n                content: \"\";\n                /*设置最后一个元素为清除两边浮动*/\n                clear: both;\n                /*设置最后一个元素为块状元素*/\n                display: block;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n    \n        </div>\n    </body>\n    </html>\n    \n{% endcodeblock %}\n\n![使用最佳实践-伪类后的效果图](/image/back-2-font-xinfa-1/div-float-after.png)\n\n## 你说的都是真的吗\n\n从头到尾说了这么多，有的同学或许会问，你说的都是真的吗？，那些大型网站的页面都是按照你说的这么设计的的吗？\n\n我读书少，你可别骗我。\n\n不信？\n\n我们去看看一些大型网站的页面的浮动布局的设计代码。\n\n我们先看豆瓣的\n\n![使用after](/image/back-2-font-xinfa-1/douban-1.png)\n\n![使用after+浮动布局](/image/back-2-font-xinfa-1/douban-2.png)\n\n我们再看看天猫的\n\n![使用after](/image/back-2-font-xinfa-1/tianmao-1.png)\n![使用after+浮动布局](/image/back-2-font-xinfa-1/tianmao-2.png)\n\n哈哈，我可没有骗你们哦！大型网站都是这么用的，而且貌似高手都使用 「float:right;」呢！\n\n\n最后，我们再来回顾一下，这篇文章从介绍　HTML的元素种类开始，到浮动布局，最后以清除浮动和最佳实践收尾。\n\n可以让一个小白慢慢的窥视到大型网页设计的理念。\n\n中间有一些招式可能说的太粗糙。不要捉急，我们先学心法。招式到后面慢慢再学习。\n\n这篇文章到这里就结束了，我会在下一篇博文继续介绍心法 II\n\n","slug":"2018/01/back-2-font-xinfa-1-4.0","published":0,"updated":"2018-02-18T08:12:37.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpls000imc55ujtikndo","content":"<p>上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：</p>\n<p><strong>从左到右，从上到下，从整体到布局，化整为零。</strong></p>\n<p>那么在接下来的几篇文章中，我们就来聊聊页面布局的心法。</p>\n<p>如果说口诀可以让你学会布局一个简单的页面，那么心法会很大程度上提升你的布局效率。</p>\n<p>在上一篇文章，我们一直推荐使用高效的浮动布局，那么这篇文章我们就先来看看什么是浮动布局吧。</p>\n<h2 id=\"HTML-块状元素和行内元素\"><a href=\"#HTML-块状元素和行内元素\" class=\"headerlink\" title=\"HTML 块状元素和行内元素\"></a>HTML 块状元素和行内元素</h2><p>在我们熟知的页面布局中，网页的标题，logo等都是有高度和宽度的。我们来看下面的豆瓣首页的切图：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-index.png\" alt=\"豆瓣首页切图\"></p>\n<p>在上面的图片中，我们使用红色的线条和文字标注豆瓣 logo 的高度和宽度。不仅仅的 logo 图有高度和宽度，搜索框，热搜主题等其它元素，几乎都有高度和宽度。</p>\n<p>那么在 HTML 语言中，我们如何指定元素的高度和宽度呢？</p>\n<p>首先我们来看一段简单的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>div和span标签的使用<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.div</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\theight: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\twidth: 300px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*选中我们的设置class=\"div\"*/</span>\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.element</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: green;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\theight: 400px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\twidth: 400px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*选中我们的设置class=\"element\"*/</span>\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div\"</span>&gt;</span>这是div标签里面的内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"element\"</span>&gt;</span>这是span标签的内容<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，我们使用 div 和 span 画了两个区域，并且使用「height」和「width」指定它们的高度。效果如下：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/html-css-show.jpg\" alt=\"效果图\"></p>\n<p>我们发现：我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？</p>\n<p>难道它们两是不同种类的元素？</p>\n<p>嘿嘿，猜对啦！</p>\n<p>其实在 HTML 中，我们可以把标签分为块状元素和行内元素，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。</p>\n<ul>\n<li><p>块状元素的标签还有：p、ul、ol等。</p>\n</li>\n<li><p>行内元素的标签还有：img、code、input等。</p>\n</li>\n</ul>\n<p>那么块状元素和行内元素有什么区别呢？</p>\n<p>从我们的代码的效果图里面我们已经看出来一个区别了：<strong>块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。</strong></p>\n<p>我们再来写一段代码试试，我们使用我们熟悉的 div 标签和 span 标签来演示。</p>\n<p>我们把上面代码的高度和宽度注释掉，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。</p>\n<p>来来来，代码走一波！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>div和span标签的使用<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.div</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: red;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*height: 300px;*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*width: 300px;*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*选中我们的设置class=\"div\"*/</span>\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.element</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: green;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*height: 400px;*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*width: 400px;*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*选中我们的设置class=\"element\"*/</span>\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div\"</span>&gt;</span>这是div标签里面的内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"element\"</span>&gt;</span>这是span标签的内容<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/block-inline-elemet.png\" alt=\"效果图\"></p>\n<p>是不是又看出来一个区别呢？</p>\n<p><strong>块状元素是独占一行的，而行内元素只占本身内容的大小。</strong></p>\n<p>看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-element.jpg\" alt=\"效果图\"></p>\n<p><strong>即使我们设置了块状元素的高度和宽度，它还是独占一行的</strong>。真的是霸道啊！</p>\n<p>如果不会使用谷歌浏览器检查网页的同学，可以参考<a href=\"https://jingyan.baidu.com/article/2f9b480db6cde741ca6cc246.html\" target=\"_blank\" rel=\"noopener\">如何使用谷歌浏览器检查页面。</a></p>\n<p>说了这么多，我好像还是没有教你们如何去写一个浮动布局。</p>\n<p>咳咳，下面正式开始。</p>\n<h2 id=\"为什么要使用浮动布局\"><a href=\"#为什么要使用浮动布局\" class=\"headerlink\" title=\"为什么要使用浮动布局\"></a>为什么要使用浮动布局</h2><p>在开始之前，我们按照套路，还是要问一个问题：为什么要使用浮动布局，仅仅是因为它是高效的？</p>\n<p>答案当然是否定的。</p>\n<p>在上面的我们分析了块状元素是独占一行的，但是在页面布局的时候，往往都是要求许多块状元素是在一行的。</p>\n<p>怎么解决这个问题呢？</p>\n<p>解决问题有两种方案：</p>\n<ul>\n<li>我们可以使用 CSS 把块状元素变成行内元素</li>\n<li>我们使用浮动</li>\n</ul>\n<p>对于第一种方案，我们直接否定！<strong>因为它存在误差！</strong><br>下面我们使用 HTML 和 CSS 来写一段代码有误差的代码： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>使用行内元素是有误差的<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.div-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: red;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*让其作为行内元素显示*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tdisplay: inline-block;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.div-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: green;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*让其作为行内元素显示*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:inline-block</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div-1\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div-2\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的这段代码，我们使用块状元素 div 写了两个区块，并且使用<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display:inline-block; </span><br></pre></td></tr></table></figure> </p>\n<p>让块状元素 div 来作为行内元素显示，然后我们来看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/inline-element-error.jpg\" alt=\"行内元素误差效果显示\"></p>\n<p>我们发现<strong>虽然两个 div 可以变成行内元素在一行显示，但是他们之间还是存在空白，不能完美的相邻在一起。</strong></p>\n<p>这点空白会给我们布局带来很大的麻烦，这就是我们为什么选择浮动布局的原因。</p>\n<p>选择浮动布局的原因知道了，下面我们来写一个浮动布局吧。</p>\n<p>真的开始写喽，不是骗你们的！</p>\n<h2 id=\"一个简单的浮动布局\"><a href=\"#一个简单的浮动布局\" class=\"headerlink\" title=\"一个简单的浮动布局\"></a>一个简单的浮动布局</h2><p>首先我们画两个 div，并且设置它们的背景颜色，高度以及宽度，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>简单的浮动布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">    这是第一个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">    这是第二个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure> \n<p>打开浏览器看效果是这个样子滴：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout.jpg\" alt=\"浮动之前的效果图\"></p>\n<p>这个效果很正常嘛。 div 作为很霸道的块状元素，当然占据一整行，两个 div 就分别占据两行喽。</p>\n<p>下面我们就要使用浮动了，注意看清楚哦！</p>\n<p>我们只要在上面代码中 div 的 class 选择器里面添加如下代码即可实现浮动。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float: left;</span><br></pre></td></tr></table></figure>\n<p>来来来，完整代码走一波！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>简单的浮动布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置为浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置为浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">    这是第一个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">    这是第二个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后我们用浏览器打开看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-1.png\" alt=\"简单浮动效果图\"></p>\n<p>我们发现两个原本很难相邻在一起的块状元素，竟然完美的 <strong>无缝</strong> 的相邻在一起。</p>\n<p>浮动的布局是不是很简单呢？我们只要添加 「 float: left;」即可实现浮动。你们学会了吗？</p>\n<p>现在让我们重新来看一下「 float: left;」这段代码。</p>\n<p>我们都知道「 float 」这个字是指定使用浮动的关键字，但是「 left 」是干嘛用的？难道还是指定 right？</p>\n<p>当然可以啦。left 的意思是指定左浮动，意思是让元素悬浮在浏览器的左边，right就是相反的意思，让元素悬浮在浏览器的右边。</p>\n<p>来来来，让我们把上面代码中的 left 变成right，代码再走一波!</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>简单的浮动布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置为浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            float: right;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置为浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            float: right;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">    这是第一个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">    这是第二个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>让我们打开浏览器看效果！</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-right.png\" alt=\"右浮动效果图\"></p>\n<p>是不是被浮动的结果吓了一跳呢？设置浮动的元素竟然都跑到右边去了。</p>\n<p>到了这里，关于怎么写浮动，我想你们应该已经会了。下面我们来看一个问题，要跟着我的思路走哦。</p>\n<p>还是回到我们之前设置的左浮动的页面。我们可以使用谷歌浏览器来检查一下它们的高度和宽度，和我们设置的完全一样。</p>\n<p>这段代码没问题。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-show-height.png\" alt=\"\"></p>\n<h2 id=\"还是一个简单的浮动布局\"><a href=\"#还是一个简单的浮动布局\" class=\"headerlink\" title=\"还是一个简单的浮动布局\"></a>还是一个简单的浮动布局</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>还是一个简单的浮动布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">            我是第一个子元素</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">            我是第二个子元素</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-2.png\" alt=\"效果图\"></p>\n<p>这段代码还是很简单，我们还是使用　DIV　标签画了两个　200 * 200　区块，和之前代码的唯一区别在于</p>\n<p>这两个区块被一个「父区块 parent」包含着。</p>\n<p>这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/second-check-child.png\" alt=\"\"></p>\n<p>子元素宽度和高度都是 OK 的。</p>\n<p>我们再来看看它父元素高度和宽度。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parent-check.png\" alt=\"\"></p>\n<p>我去！父元素的高度竟然是 <strong>０</strong>！！　我是不是安装了假的浏览器？</p>\n<p>解铃还须系铃人，要想知道原因，我们需要去了解一下　DIV　标签和「浮动」的之间的关系。</p>\n<h2 id=\"这也是一个简单的浮动布局\"><a href=\"#这也是一个简单的浮动布局\" class=\"headerlink\" title=\"这也是一个简单的浮动布局\"></a>这也是一个简单的浮动布局</h2><p>还是一个很简单的布局，我们有三个DIV区块，分别为「first」、「second」、「third」它们父区块「parent」包含着</p>\n<p>并且设置三个DIV区块为左浮动的。</p>\n<p>代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>清除浮动演示<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">            第一个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">            第二个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">            第三个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-1.png\" alt=\"效果图\"></p>\n<p>我们使用谷歌浏览器来检查一下，发现子元素的高度和宽度和设置的值一样，但是父元素高度还是为０。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/origin-parent-height.png\" alt=\"\"></p>\n<p>现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做？</p>\n<p>这就要使用到另一个招式 「清除浮动」</p>\n<p>我们只要在第三块区块的「.third」中添加<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear: left;</span><br></pre></td></tr></table></figure> </p>\n<p>即可。</p>\n<p>来来来，代码敲一波：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>清除浮动演示<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">                width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">                width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">                height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">                background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">                width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                clear: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">                第一个区块</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">                第二个区块</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">                第三个区块</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>话不多说，让我们先看效果。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/add-clear-left-1.png\" alt=\"添加 clear: left;的效果图\"></p>\n<p>真的把第三个区块给压下来了！</p>\n<p>还是按照上面的套路，我们来分析这段代码「 clear: left; 」：</p>\n<p>它用到的关键字是「 clear 」，它的含义是清除。</p>\n<p>而 「 left 」 代表是左边。</p>\n<p>那么它合起来的意思是：<strong>清除左边的浮动元素</strong>。</p>\n<p>说到更明白一点就是：<strong>不让当前元素的左边有浮动元素。</strong></p>\n<p>当前元素是第三个区块，它的左边有两个浮动元素 first 和second 。</p>\n<p>那这段代码的意思就是：<strong>不让第三个区块左边有浮动元素</strong>，那浏览器这么处理呢？</p>\n<p>浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到 <strong>下一行</strong> 来吧！”</p>\n<p>于是第三个区块就到了下一行啦。  </p>\n<p>虽然有点复杂，但是按照上面思路进行一步步分解，是不是就变的很简单呢？</p>\n<p>让我们再来拓展一下，clear 除了可以设置为 left,还可以设置为 「 right 」 和 「 both 」。</p>\n<p>我相信不用我说你们也明白了吧！</p>\n<p>right 就是不让当前元素 <strong>右边</strong> 存在浮动元素嘛。</p>\n<p>那 both 就是不让当前元素的 <strong>两边</strong> 出现浮动元素喽。</p>\n<p>说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！</p>\n<p>这个有点尴尬！</p>\n<h2 id=\"父元素高度真的需要吗？\"><a href=\"#父元素高度真的需要吗？\" class=\"headerlink\" title=\"父元素高度真的需要吗？\"></a>父元素高度真的需要吗？</h2><p><img src=\"/image/back-2-font-xinfa-1/clear-float-parent.png\" alt=\"\"></p>\n<p>那么，在解决之前，按照我们的套路，我们要问一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。</p>\n<p>我的实习导师告诉我：“这是不行的。<strong>浮动布局的占位空间往往是我们理想的父元素高度。</strong>”</p>\n<p>他说的太抽象，我们来说的直白一点：</p>\n<p>「在布局中我们往往使用浮动布局来实现某一块区域的布局」。</p>\n<p>「然后我们最好用一个DIV去包裹整个浮动布局，用于和其它的布局区分开」。</p>\n<p>「最后我们要求这个父DIV和高度要和浮动布局的高度一样」。</p>\n<p>对于上面的三点内容，前两点我们已经做到了。在上面的代码中，我们使用「parent」包裹着「first」、「second」、「third」，并且</p>\n<p>而且它们都是浮动的。</p>\n<p>想要解决第三个问题，就是使用我们上面讲的招式-<strong>清除浮动</strong>。</p>\n<p>我们在父区块最后面增加一个空的DIV,将它设置它为「 clear:both 」。</p>\n<p>为什么要这么使用呢，具体的原因我也讲不清楚，大概是这样的吧：</p>\n<p>因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受 <strong>任何</strong> 浮动元素干扰,我们必须清除浮动对它的干扰。</p>\n<p>注意哦！最后一个元素不是浮动的哦。</p>\n<p>来来来，代码走一波！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DIV和CSS的前世今生<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            clear: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.last</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            clear: both;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">            第一个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">            第二个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">            第三个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"last\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后我们会发现，父元素竟然有高度了，而且和浮动布局的高度是一样的！</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parrent-height.png\" alt=\"父元素有高度了\"></p>\n<p>哈哈，到了这里，我们已经完全解决父元素高度为 0 的问题，那么我想问：</p>\n<p>上面的解决方法是最好的吗？</p>\n<h2 id=\"清除浮动－最佳实践\"><a href=\"#清除浮动－最佳实践\" class=\"headerlink\" title=\"清除浮动－最佳实践\"></a>清除浮动－最佳实践</h2><p>按照套路，我们得问一个问题：上面的解决方案有问题吗？</p>\n<p>回答是肯定的！</p>\n<p>因为按照上面的方法，我们需要在 <strong>手动</strong> 在每个父区块最后添加一个空的 DIV，这样的做法是 <strong>低效的</strong>！</p>\n<p>因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。</p>\n<p>我们可不可以在某个地方统一定义，然后全局使用呢？就像Java一样，一次编译，到处运行。</p>\n<p>哈哈哈，程序员都喜欢偷懒，我也不例外。回答是当然可以啦。</p>\n<p>这个要使用到另一个新的招式-CSS 的「伪类」,伪类的具体用法可以参考<a href=\"http://www.w3school.com.cn/css/css_pseudo_elements.asp\" target=\"_blank\" rel=\"noopener\">W3C的CSS伪类教程。</a></p>\n<p>我们这里使用的是「after」伪类，它可以自动的在某个父元素的最后一行添加最后一个子元素，并且设置属性。</p>\n<p>上面的话有点拗口，来来来，我们直接上代码分析：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent:after&#123;</span><br><span class=\"line\">    /*设置最后一个元素的内容为空*/</span><br><span class=\"line\">    content: \"\";</span><br><span class=\"line\">    /*设置最后一个元素为清除两边浮动*/</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">    /*设置最后一个元素为块状元素*/</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上面的代码会自动在「parent」作用的标签的最后一行添加一个子元素，并且设置该元素为「块状元素」「内容为空」以及「清除浮动」。</p>\n<p>是不是很神奇呢？我们可以使用 CSS 自动的添加元素。并且设置其属性。</p>\n<p>那么还有一个问题，如何让上面的这个代码被所有的父元素共享呢？</p>\n<p>这个很简单啦，只要把需要样式的父元素的 class属性设置值为 「parent」，那么就可以直接使用啦。</p>\n<p>来来来，让我们完整的敲一次代码！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DIV和CSS最佳实践<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            clear: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        /*</span></span><br><span class=\"line\"><span class=\"undefined\">          伪类</span></span><br><span class=\"line\"><span class=\"undefined\">         */</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:after</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置最后一个元素的内容为空*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            content: \"\";</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置最后一个元素为清除两边浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            clear: both;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置最后一个元素为块状元素*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            display: block;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">            第一个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">            第二个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">            第三个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-after.png\" alt=\"使用最佳实践-伪类后的效果图\"></p>\n<h2 id=\"你说的都是真的吗\"><a href=\"#你说的都是真的吗\" class=\"headerlink\" title=\"你说的都是真的吗\"></a>你说的都是真的吗</h2><p>从头到尾说了这么多，有的同学或许会问，你说的都是真的吗？，那些大型网站的页面都是按照你说的这么设计的的吗？</p>\n<p>我读书少，你可别骗我。</p>\n<p>不信？</p>\n<p>我们去看看一些大型网站的页面的浮动布局的设计代码。</p>\n<p>我们先看豆瓣的</p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-1.png\" alt=\"使用after\"></p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-2.png\" alt=\"使用after+浮动布局\"></p>\n<p>我们再看看天猫的</p>\n<p><img src=\"/image/back-2-font-xinfa-1/tianmao-1.png\" alt=\"使用after\"><br><img src=\"/image/back-2-font-xinfa-1/tianmao-2.png\" alt=\"使用after+浮动布局\"></p>\n<p>哈哈，我可没有骗你们哦！大型网站都是这么用的，而且貌似高手都使用 「float:right;」呢！</p>\n<p>最后，我们再来回顾一下，这篇文章从介绍　HTML的元素种类开始，到浮动布局，最后以清除浮动和最佳实践收尾。</p>\n<p>可以让一个小白慢慢的窥视到大型网页设计的理念。</p>\n<p>中间有一些招式可能说的太粗糙。不要捉急，我们先学心法。招式到后面慢慢再学习。</p>\n<p>这篇文章到这里就结束了，我会在下一篇博文继续介绍心法 II</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：</p>\n<p><strong>从左到右，从上到下，从整体到布局，化整为零。</strong></p>\n<p>那么在接下来的几篇文章中，我们就来聊聊页面布局的心法。</p>\n<p>如果说口诀可以让你学会布局一个简单的页面，那么心法会很大程度上提升你的布局效率。</p>\n<p>在上一篇文章，我们一直推荐使用高效的浮动布局，那么这篇文章我们就先来看看什么是浮动布局吧。</p>\n<h2 id=\"HTML-块状元素和行内元素\"><a href=\"#HTML-块状元素和行内元素\" class=\"headerlink\" title=\"HTML 块状元素和行内元素\"></a>HTML 块状元素和行内元素</h2><p>在我们熟知的页面布局中，网页的标题，logo等都是有高度和宽度的。我们来看下面的豆瓣首页的切图：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-index.png\" alt=\"豆瓣首页切图\"></p>\n<p>在上面的图片中，我们使用红色的线条和文字标注豆瓣 logo 的高度和宽度。不仅仅的 logo 图有高度和宽度，搜索框，热搜主题等其它元素，几乎都有高度和宽度。</p>\n<p>那么在 HTML 语言中，我们如何指定元素的高度和宽度呢？</p>\n<p>首先我们来看一段简单的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>div和span标签的使用<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.div</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\theight: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\twidth: 300px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*选中我们的设置class=\"div\"*/</span>\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.element</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: green;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\theight: 400px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\twidth: 400px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*选中我们的设置class=\"element\"*/</span>\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div\"</span>&gt;</span>这是div标签里面的内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"element\"</span>&gt;</span>这是span标签的内容<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，我们使用 div 和 span 画了两个区域，并且使用「height」和「width」指定它们的高度。效果如下：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/html-css-show.jpg\" alt=\"效果图\"></p>\n<p>我们发现：我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？</p>\n<p>难道它们两是不同种类的元素？</p>\n<p>嘿嘿，猜对啦！</p>\n<p>其实在 HTML 中，我们可以把标签分为块状元素和行内元素，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。</p>\n<ul>\n<li><p>块状元素的标签还有：p、ul、ol等。</p>\n</li>\n<li><p>行内元素的标签还有：img、code、input等。</p>\n</li>\n</ul>\n<p>那么块状元素和行内元素有什么区别呢？</p>\n<p>从我们的代码的效果图里面我们已经看出来一个区别了：<strong>块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。</strong></p>\n<p>我们再来写一段代码试试，我们使用我们熟悉的 div 标签和 span 标签来演示。</p>\n<p>我们把上面代码的高度和宽度注释掉，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。</p>\n<p>来来来，代码走一波！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>div和span标签的使用<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.div</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: red;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*height: 300px;*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*width: 300px;*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*选中我们的设置class=\"div\"*/</span>\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.element</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: green;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*height: 400px;*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*width: 400px;*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*选中我们的设置class=\"element\"*/</span>\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div\"</span>&gt;</span>这是div标签里面的内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"element\"</span>&gt;</span>这是span标签的内容<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/block-inline-elemet.png\" alt=\"效果图\"></p>\n<p>是不是又看出来一个区别呢？</p>\n<p><strong>块状元素是独占一行的，而行内元素只占本身内容的大小。</strong></p>\n<p>看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-element.jpg\" alt=\"效果图\"></p>\n<p><strong>即使我们设置了块状元素的高度和宽度，它还是独占一行的</strong>。真的是霸道啊！</p>\n<p>如果不会使用谷歌浏览器检查网页的同学，可以参考<a href=\"https://jingyan.baidu.com/article/2f9b480db6cde741ca6cc246.html\" target=\"_blank\" rel=\"noopener\">如何使用谷歌浏览器检查页面。</a></p>\n<p>说了这么多，我好像还是没有教你们如何去写一个浮动布局。</p>\n<p>咳咳，下面正式开始。</p>\n<h2 id=\"为什么要使用浮动布局\"><a href=\"#为什么要使用浮动布局\" class=\"headerlink\" title=\"为什么要使用浮动布局\"></a>为什么要使用浮动布局</h2><p>在开始之前，我们按照套路，还是要问一个问题：为什么要使用浮动布局，仅仅是因为它是高效的？</p>\n<p>答案当然是否定的。</p>\n<p>在上面的我们分析了块状元素是独占一行的，但是在页面布局的时候，往往都是要求许多块状元素是在一行的。</p>\n<p>怎么解决这个问题呢？</p>\n<p>解决问题有两种方案：</p>\n<ul>\n<li>我们可以使用 CSS 把块状元素变成行内元素</li>\n<li>我们使用浮动</li>\n</ul>\n<p>对于第一种方案，我们直接否定！<strong>因为它存在误差！</strong><br>下面我们使用 HTML 和 CSS 来写一段代码有误差的代码： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>使用行内元素是有误差的<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.div-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: red;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*让其作为行内元素显示*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tdisplay: inline-block;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-class\">.div-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tbackground-color: green;</span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"comment\">/*让其作为行内元素显示*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t\t\t<span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:inline-block</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div-1\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"div-2\"</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的这段代码，我们使用块状元素 div 写了两个区块，并且使用<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display:inline-block; </span><br></pre></td></tr></table></figure> </p>\n<p>让块状元素 div 来作为行内元素显示，然后我们来看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/inline-element-error.jpg\" alt=\"行内元素误差效果显示\"></p>\n<p>我们发现<strong>虽然两个 div 可以变成行内元素在一行显示，但是他们之间还是存在空白，不能完美的相邻在一起。</strong></p>\n<p>这点空白会给我们布局带来很大的麻烦，这就是我们为什么选择浮动布局的原因。</p>\n<p>选择浮动布局的原因知道了，下面我们来写一个浮动布局吧。</p>\n<p>真的开始写喽，不是骗你们的！</p>\n<h2 id=\"一个简单的浮动布局\"><a href=\"#一个简单的浮动布局\" class=\"headerlink\" title=\"一个简单的浮动布局\"></a>一个简单的浮动布局</h2><p>首先我们画两个 div，并且设置它们的背景颜色，高度以及宽度，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>简单的浮动布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">    这是第一个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">    这是第二个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure> \n<p>打开浏览器看效果是这个样子滴：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout.jpg\" alt=\"浮动之前的效果图\"></p>\n<p>这个效果很正常嘛。 div 作为很霸道的块状元素，当然占据一整行，两个 div 就分别占据两行喽。</p>\n<p>下面我们就要使用浮动了，注意看清楚哦！</p>\n<p>我们只要在上面代码中 div 的 class 选择器里面添加如下代码即可实现浮动。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float: left;</span><br></pre></td></tr></table></figure>\n<p>来来来，完整代码走一波！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>简单的浮动布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置为浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置为浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">    这是第一个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">    这是第二个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后我们用浏览器打开看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-1.png\" alt=\"简单浮动效果图\"></p>\n<p>我们发现两个原本很难相邻在一起的块状元素，竟然完美的 <strong>无缝</strong> 的相邻在一起。</p>\n<p>浮动的布局是不是很简单呢？我们只要添加 「 float: left;」即可实现浮动。你们学会了吗？</p>\n<p>现在让我们重新来看一下「 float: left;」这段代码。</p>\n<p>我们都知道「 float 」这个字是指定使用浮动的关键字，但是「 left 」是干嘛用的？难道还是指定 right？</p>\n<p>当然可以啦。left 的意思是指定左浮动，意思是让元素悬浮在浏览器的左边，right就是相反的意思，让元素悬浮在浏览器的右边。</p>\n<p>来来来，让我们把上面代码中的 left 变成right，代码再走一波!</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>简单的浮动布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置为浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            float: right;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置为浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            float: right;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">    这是第一个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">    这是第二个区块</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>让我们打开浏览器看效果！</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-right.png\" alt=\"右浮动效果图\"></p>\n<p>是不是被浮动的结果吓了一跳呢？设置浮动的元素竟然都跑到右边去了。</p>\n<p>到了这里，关于怎么写浮动，我想你们应该已经会了。下面我们来看一个问题，要跟着我的思路走哦。</p>\n<p>还是回到我们之前设置的左浮动的页面。我们可以使用谷歌浏览器来检查一下它们的高度和宽度，和我们设置的完全一样。</p>\n<p>这段代码没问题。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-show-height.png\" alt=\"\"></p>\n<h2 id=\"还是一个简单的浮动布局\"><a href=\"#还是一个简单的浮动布局\" class=\"headerlink\" title=\"还是一个简单的浮动布局\"></a>还是一个简单的浮动布局</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>还是一个简单的浮动布局<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-1</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.block-2</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-1\"</span>&gt;</span></span><br><span class=\"line\">            我是第一个子元素</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-2\"</span>&gt;</span></span><br><span class=\"line\">            我是第二个子元素</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-2.png\" alt=\"效果图\"></p>\n<p>这段代码还是很简单，我们还是使用　DIV　标签画了两个　200 * 200　区块，和之前代码的唯一区别在于</p>\n<p>这两个区块被一个「父区块 parent」包含着。</p>\n<p>这段代码有问题吗？　当然没问题啦，不信我们使用谷歌浏览器检查一下。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/second-check-child.png\" alt=\"\"></p>\n<p>子元素宽度和高度都是 OK 的。</p>\n<p>我们再来看看它父元素高度和宽度。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parent-check.png\" alt=\"\"></p>\n<p>我去！父元素的高度竟然是 <strong>０</strong>！！　我是不是安装了假的浏览器？</p>\n<p>解铃还须系铃人，要想知道原因，我们需要去了解一下　DIV　标签和「浮动」的之间的关系。</p>\n<h2 id=\"这也是一个简单的浮动布局\"><a href=\"#这也是一个简单的浮动布局\" class=\"headerlink\" title=\"这也是一个简单的浮动布局\"></a>这也是一个简单的浮动布局</h2><p>还是一个很简单的布局，我们有三个DIV区块，分别为「first」、「second」、「third」它们父区块「parent」包含着</p>\n<p>并且设置三个DIV区块为左浮动的。</p>\n<p>代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>清除浮动演示<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">            第一个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">            第二个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">            第三个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-1.png\" alt=\"效果图\"></p>\n<p>我们使用谷歌浏览器来检查一下，发现子元素的高度和宽度和设置的值一样，但是父元素高度还是为０。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/origin-parent-height.png\" alt=\"\"></p>\n<p>现在我们有一个需求：在保持浮动的情况下，让第三块区域在下一行显示，如何去做？</p>\n<p>这就要使用到另一个招式 「清除浮动」</p>\n<p>我们只要在第三块区块的「.third」中添加<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear: left;</span><br></pre></td></tr></table></figure> </p>\n<p>即可。</p>\n<p>来来来，代码敲一波：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>清除浮动演示<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">                width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">                width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">                height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">                background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">                width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">                clear: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">                第一个区块</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">                第二个区块</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">                第三个区块</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>话不多说，让我们先看效果。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/add-clear-left-1.png\" alt=\"添加 clear: left;的效果图\"></p>\n<p>真的把第三个区块给压下来了！</p>\n<p>还是按照上面的套路，我们来分析这段代码「 clear: left; 」：</p>\n<p>它用到的关键字是「 clear 」，它的含义是清除。</p>\n<p>而 「 left 」 代表是左边。</p>\n<p>那么它合起来的意思是：<strong>清除左边的浮动元素</strong>。</p>\n<p>说到更明白一点就是：<strong>不让当前元素的左边有浮动元素。</strong></p>\n<p>当前元素是第三个区块，它的左边有两个浮动元素 first 和second 。</p>\n<p>那这段代码的意思就是：<strong>不让第三个区块左边有浮动元素</strong>，那浏览器这么处理呢？</p>\n<p>浏览器会说：“老三啊，你的左边有两个浮动元素，但是你又不想左边有浮动元素，所以你就吃点亏，到 <strong>下一行</strong> 来吧！”</p>\n<p>于是第三个区块就到了下一行啦。  </p>\n<p>虽然有点复杂，但是按照上面思路进行一步步分解，是不是就变的很简单呢？</p>\n<p>让我们再来拓展一下，clear 除了可以设置为 left,还可以设置为 「 right 」 和 「 both 」。</p>\n<p>我相信不用我说你们也明白了吧！</p>\n<p>right 就是不让当前元素 <strong>右边</strong> 存在浮动元素嘛。</p>\n<p>那 both 就是不让当前元素的 <strong>两边</strong> 出现浮动元素喽。</p>\n<p>说了这么多，我们好像还有一个问题没有解决，父元素的高度还是0啊！</p>\n<p>这个有点尴尬！</p>\n<h2 id=\"父元素高度真的需要吗？\"><a href=\"#父元素高度真的需要吗？\" class=\"headerlink\" title=\"父元素高度真的需要吗？\"></a>父元素高度真的需要吗？</h2><p><img src=\"/image/back-2-font-xinfa-1/clear-float-parent.png\" alt=\"\"></p>\n<p>那么，在解决之前，按照我们的套路，我们要问一个问题：我们可以不管父元素的高度吗？反正布局都设计出来了。</p>\n<p>我的实习导师告诉我：“这是不行的。<strong>浮动布局的占位空间往往是我们理想的父元素高度。</strong>”</p>\n<p>他说的太抽象，我们来说的直白一点：</p>\n<p>「在布局中我们往往使用浮动布局来实现某一块区域的布局」。</p>\n<p>「然后我们最好用一个DIV去包裹整个浮动布局，用于和其它的布局区分开」。</p>\n<p>「最后我们要求这个父DIV和高度要和浮动布局的高度一样」。</p>\n<p>对于上面的三点内容，前两点我们已经做到了。在上面的代码中，我们使用「parent」包裹着「first」、「second」、「third」，并且</p>\n<p>而且它们都是浮动的。</p>\n<p>想要解决第三个问题，就是使用我们上面讲的招式-<strong>清除浮动</strong>。</p>\n<p>我们在父区块最后面增加一个空的DIV,将它设置它为「 clear:both 」。</p>\n<p>为什么要这么使用呢，具体的原因我也讲不清楚，大概是这样的吧：</p>\n<p>因为浮动元素会影响它的位置，我们必须确保它在父元素的最后一行，不受 <strong>任何</strong> 浮动元素干扰,我们必须清除浮动对它的干扰。</p>\n<p>注意哦！最后一个元素不是浮动的哦。</p>\n<p>来来来，代码走一波！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DIV和CSS的前世今生<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            clear: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.last</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            clear: both;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">            第一个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">            第二个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">            第三个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"last\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后我们会发现，父元素竟然有高度了，而且和浮动布局的高度是一样的！</p>\n<p><img src=\"/image/back-2-font-xinfa-1/parrent-height.png\" alt=\"父元素有高度了\"></p>\n<p>哈哈，到了这里，我们已经完全解决父元素高度为 0 的问题，那么我想问：</p>\n<p>上面的解决方法是最好的吗？</p>\n<h2 id=\"清除浮动－最佳实践\"><a href=\"#清除浮动－最佳实践\" class=\"headerlink\" title=\"清除浮动－最佳实践\"></a>清除浮动－最佳实践</h2><p>按照套路，我们得问一个问题：上面的解决方案有问题吗？</p>\n<p>回答是肯定的！</p>\n<p>因为按照上面的方法，我们需要在 <strong>手动</strong> 在每个父区块最后添加一个空的 DIV，这样的做法是 <strong>低效的</strong>！</p>\n<p>因为一个页面有成百上千个布局区块，如果每一个我们都手动写一个空的　DIV，增加工作量不说，日后维护起来，也很麻烦。</p>\n<p>我们可不可以在某个地方统一定义，然后全局使用呢？就像Java一样，一次编译，到处运行。</p>\n<p>哈哈哈，程序员都喜欢偷懒，我也不例外。回答是当然可以啦。</p>\n<p>这个要使用到另一个新的招式-CSS 的「伪类」,伪类的具体用法可以参考<a href=\"http://www.w3school.com.cn/css/css_pseudo_elements.asp\" target=\"_blank\" rel=\"noopener\">W3C的CSS伪类教程。</a></p>\n<p>我们这里使用的是「after」伪类，它可以自动的在某个父元素的最后一行添加最后一个子元素，并且设置属性。</p>\n<p>上面的话有点拗口，来来来，我们直接上代码分析：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent:after&#123;</span><br><span class=\"line\">    /*设置最后一个元素的内容为空*/</span><br><span class=\"line\">    content: \"\";</span><br><span class=\"line\">    /*设置最后一个元素为清除两边浮动*/</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">    /*设置最后一个元素为块状元素*/</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上面的代码会自动在「parent」作用的标签的最后一行添加一个子元素，并且设置该元素为「块状元素」「内容为空」以及「清除浮动」。</p>\n<p>是不是很神奇呢？我们可以使用 CSS 自动的添加元素。并且设置其属性。</p>\n<p>那么还有一个问题，如何让上面的这个代码被所有的父元素共享呢？</p>\n<p>这个很简单啦，只要把需要样式的父元素的 class属性设置值为 「parent」，那么就可以直接使用啦。</p>\n<p>来来来，让我们完整的敲一次代码！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DIV和CSS最佳实践<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.first</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: red;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.second</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: yellow;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.third</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">            background: green;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">            clear: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        /*</span></span><br><span class=\"line\"><span class=\"undefined\">          伪类</span></span><br><span class=\"line\"><span class=\"undefined\">         */</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.parent</span><span class=\"selector-pseudo\">:after</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置最后一个元素的内容为空*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            content: \"\";</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置最后一个元素为清除两边浮动*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            clear: both;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"comment\">/*设置最后一个元素为块状元素*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">            display: block;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span></span><br><span class=\"line\">            第一个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"second\"</span>&gt;</span></span><br><span class=\"line\">            第二个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"third\"</span>&gt;</span></span><br><span class=\"line\">            第三个区块</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/div-float-after.png\" alt=\"使用最佳实践-伪类后的效果图\"></p>\n<h2 id=\"你说的都是真的吗\"><a href=\"#你说的都是真的吗\" class=\"headerlink\" title=\"你说的都是真的吗\"></a>你说的都是真的吗</h2><p>从头到尾说了这么多，有的同学或许会问，你说的都是真的吗？，那些大型网站的页面都是按照你说的这么设计的的吗？</p>\n<p>我读书少，你可别骗我。</p>\n<p>不信？</p>\n<p>我们去看看一些大型网站的页面的浮动布局的设计代码。</p>\n<p>我们先看豆瓣的</p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-1.png\" alt=\"使用after\"></p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-2.png\" alt=\"使用after+浮动布局\"></p>\n<p>我们再看看天猫的</p>\n<p><img src=\"/image/back-2-font-xinfa-1/tianmao-1.png\" alt=\"使用after\"><br><img src=\"/image/back-2-font-xinfa-1/tianmao-2.png\" alt=\"使用after+浮动布局\"></p>\n<p>哈哈，我可没有骗你们哦！大型网站都是这么用的，而且貌似高手都使用 「float:right;」呢！</p>\n<p>最后，我们再来回顾一下，这篇文章从介绍　HTML的元素种类开始，到浮动布局，最后以清除浮动和最佳实践收尾。</p>\n<p>可以让一个小白慢慢的窥视到大型网页设计的理念。</p>\n<p>中间有一些招式可能说的太粗糙。不要捉急，我们先学心法。招式到后面慢慢再学习。</p>\n<p>这篇文章到这里就结束了，我会在下一篇博文继续介绍心法 II</p>\n"},{"_content":"<!DOCTYPE html>\n    <html>\n    <head>\n        <title>清除浮动演示</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n        </div>\n    </body>\n    </html>","source":"_drafts/code/xinfan-1/clear-float.html","raw":"<!DOCTYPE html>\n    <html>\n    <head>\n        <title>清除浮动演示</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n        </div>\n    </body>\n    </html>","slug":"code/xinfan-1/clear-float","published":0,"date":"2018-02-18T08:12:37.445Z","updated":"2018-02-18T08:12:37.445Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcplu000kmc55lbr3ikdg","content":"<!DOCTYPE html>\n    <html>\n    <head>\n        <title>清除浮动演示</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n        </div>\n    </body>\n    </html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n    <html>\n    <head>\n        <title>清除浮动演示</title>\n        <style type=\"text/css\">\n            .first{\n                background: red;\n                width: 200px;\n                height: 200px;\n                float: left;\n            }\n            .second{\n                background: yellow;\n                width: 200px;\n                float: left;\n                height: 200px;\n    \n            }\n            .third{\n                float: left;\n                background: green;\n                width: 200px;\n                height: 200px;\n                clear: left;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"parent\">\n            <div class=\"first\">\n                第一个区块\n            </div>\n    \n            <div class=\"second\">\n                第二个区块\n            </div>\n    \n            <div class=\"third\">\n                第三个区块\n            </div>\n        </div>\n    </body>\n    </html>"},{"_content":"<!DOCTYPE html>\n<html>\n<head>\n    <title>DIV和CSS最佳实践</title>\n    <style type=\"text/css\">\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            float: left;\n            background: green;\n            width: 200px;\n            height: 200px;\n            clear: left;\n        }\n\n        /*\n          伪类\n         */\n        .parent:after{\n            /*设置最后一个元素的内容为空*/\n            content: \"\";\n            /*设置最后一个元素为清除两边浮动*/\n            clear: both;\n            /*设置最后一个元素为块状元素*/\n            display: block;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"first\">\n            第一个区块\n        </div>\n\n        <div class=\"second\">\n            第二个区块\n        </div>\n\n        <div class=\"third\">\n            第三个区块\n        </div>\n\n    </div>\n</body>\n</html>","source":"_drafts/code/xinfan-1/div-show-after.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n    <title>DIV和CSS最佳实践</title>\n    <style type=\"text/css\">\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            float: left;\n            background: green;\n            width: 200px;\n            height: 200px;\n            clear: left;\n        }\n\n        /*\n          伪类\n         */\n        .parent:after{\n            /*设置最后一个元素的内容为空*/\n            content: \"\";\n            /*设置最后一个元素为清除两边浮动*/\n            clear: both;\n            /*设置最后一个元素为块状元素*/\n            display: block;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"first\">\n            第一个区块\n        </div>\n\n        <div class=\"second\">\n            第二个区块\n        </div>\n\n        <div class=\"third\">\n            第三个区块\n        </div>\n\n    </div>\n</body>\n</html>","slug":"code/xinfan-1/div-show-after","published":0,"date":"2018-02-18T08:12:37.445Z","updated":"2018-02-18T08:12:37.445Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcplv000mmc55w0nzfhda","content":"<!DOCTYPE html>\n<html>\n<head>\n    <title>DIV和CSS最佳实践</title>\n    <style type=\"text/css\">\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            float: left;\n            background: green;\n            width: 200px;\n            height: 200px;\n            clear: left;\n        }\n\n        /*\n          伪类\n         */\n        .parent:after{\n            /*设置最后一个元素的内容为空*/\n            content: \"\";\n            /*设置最后一个元素为清除两边浮动*/\n            clear: both;\n            /*设置最后一个元素为块状元素*/\n            display: block;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"first\">\n            第一个区块\n        </div>\n\n        <div class=\"second\">\n            第二个区块\n        </div>\n\n        <div class=\"third\">\n            第三个区块\n        </div>\n\n    </div>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n    <title>DIV和CSS最佳实践</title>\n    <style type=\"text/css\">\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            float: left;\n            background: green;\n            width: 200px;\n            height: 200px;\n            clear: left;\n        }\n\n        /*\n          伪类\n         */\n        .parent:after{\n            /*设置最后一个元素的内容为空*/\n            content: \"\";\n            /*设置最后一个元素为清除两边浮动*/\n            clear: both;\n            /*设置最后一个元素为块状元素*/\n            display: block;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"first\">\n            第一个区块\n        </div>\n\n        <div class=\"second\">\n            第二个区块\n        </div>\n\n        <div class=\"third\">\n            第三个区块\n        </div>\n\n    </div>\n</body>\n</html>"},{"_content":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>div和span标签的使用</title>\n\t<style type=\"text/css\">\n\t\tdiv{\n\t\t\tbackground-color: red;\n\t\t\theight: 100px;\n\t\t\twidth: 100px;\n\t\t}\n\n\t\tspan{\n\t\t\tbackground-color: green;\n\t\t\theight: 100px;\n\t\t\twidth: 100px;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div>\n\t\t这是div标签里面的内容\n\t</div>\n\t<span>\n\t\t这是span标签的内容\n\t</span>\n</body>\n</html>\n","source":"_drafts/code/xinfan-1/div-span-show.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>div和span标签的使用</title>\n\t<style type=\"text/css\">\n\t\tdiv{\n\t\t\tbackground-color: red;\n\t\t\theight: 100px;\n\t\t\twidth: 100px;\n\t\t}\n\n\t\tspan{\n\t\t\tbackground-color: green;\n\t\t\theight: 100px;\n\t\t\twidth: 100px;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div>\n\t\t这是div标签里面的内容\n\t</div>\n\t<span>\n\t\t这是span标签的内容\n\t</span>\n</body>\n</html>\n","slug":"code/xinfan-1/div-span-show","published":0,"date":"2018-02-18T08:12:37.445Z","updated":"2018-02-18T08:12:37.445Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcplw000omc55cjg5bmsu","content":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>div和span标签的使用</title>\n\t<style type=\"text/css\">\n\t\tdiv{\n\t\t\tbackground-color: red;\n\t\t\theight: 100px;\n\t\t\twidth: 100px;\n\t\t}\n\n\t\tspan{\n\t\t\tbackground-color: green;\n\t\t\theight: 100px;\n\t\t\twidth: 100px;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div>\n\t\t这是div标签里面的内容\n\t</div>\n\t<span>\n\t\t这是span标签的内容\n\t</span>\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>div和span标签的使用</title>\n\t<style type=\"text/css\">\n\t\tdiv{\n\t\t\tbackground-color: red;\n\t\t\theight: 100px;\n\t\t\twidth: 100px;\n\t\t}\n\n\t\tspan{\n\t\t\tbackground-color: green;\n\t\t\theight: 100px;\n\t\t\twidth: 100px;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div>\n\t\t这是div标签里面的内容\n\t</div>\n\t<span>\n\t\t这是span标签的内容\n\t</span>\n</body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n<head>\n    <title>DIV和CSS的前世今生</title>\n    <style type=\"text/css\">\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            /*float: left;*/\n            background: green;\n            width: 200px;\n            height: 200px;\n        }\n        \n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"first\">\n            第一个区块\n        </div>\n\n        <div class=\"second\">\n            第二个区块\n        </div>\n\n        <div class=\"third\">\n            第三个区块\n        </div>\n    </div>\n</body>\n</html>\n","source":"_drafts/code/xinfan-1/div-show.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n    <title>DIV和CSS的前世今生</title>\n    <style type=\"text/css\">\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            /*float: left;*/\n            background: green;\n            width: 200px;\n            height: 200px;\n        }\n        \n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"first\">\n            第一个区块\n        </div>\n\n        <div class=\"second\">\n            第二个区块\n        </div>\n\n        <div class=\"third\">\n            第三个区块\n        </div>\n    </div>\n</body>\n</html>\n","slug":"code/xinfan-1/div-show","published":0,"date":"2018-02-18T08:12:37.445Z","updated":"2018-02-18T08:12:37.445Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcply000qmc55kcu14ebb","content":"<!DOCTYPE html>\n<html>\n<head>\n    <title>DIV和CSS的前世今生</title>\n    <style type=\"text/css\">\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            /*float: left;*/\n            background: green;\n            width: 200px;\n            height: 200px;\n        }\n        \n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"first\">\n            第一个区块\n        </div>\n\n        <div class=\"second\">\n            第二个区块\n        </div>\n\n        <div class=\"third\">\n            第三个区块\n        </div>\n    </div>\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n    <title>DIV和CSS的前世今生</title>\n    <style type=\"text/css\">\n        .first{\n            background: red;\n            width: 200px;\n            height: 200px;\n            float: left;\n        }\n        .second{\n            background: yellow;\n            width: 200px;\n            float: left;\n            height: 200px;\n\n        }\n        .third{\n            /*float: left;*/\n            background: green;\n            width: 200px;\n            height: 200px;\n        }\n        \n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"first\">\n            第一个区块\n        </div>\n\n        <div class=\"second\">\n            第二个区块\n        </div>\n\n        <div class=\"third\">\n            第三个区块\n        </div>\n    </div>\n</body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n<head>\n    <title>简单的浮动布局</title>\n    <style type=\"text/css\">\n        .block-1{\n            width: 200px;\n            height: 200px;\n            background: red;\n            /*设置为浮动*/\n            float: right;\n        }\n\n        .block-2{\n            width: 200px;\n            height: 200px;\n            background: green;\n            /*设置为浮动*/\n            float: right;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\"block-1\">\n    这是第一个区块\n</div>\n\n<div class=\"block-2\">\n    这是第二个区块\n</div>\n</body>\n</html>","source":"_drafts/code/xinfan-1/float-before.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n    <title>简单的浮动布局</title>\n    <style type=\"text/css\">\n        .block-1{\n            width: 200px;\n            height: 200px;\n            background: red;\n            /*设置为浮动*/\n            float: right;\n        }\n\n        .block-2{\n            width: 200px;\n            height: 200px;\n            background: green;\n            /*设置为浮动*/\n            float: right;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\"block-1\">\n    这是第一个区块\n</div>\n\n<div class=\"block-2\">\n    这是第二个区块\n</div>\n</body>\n</html>","slug":"code/xinfan-1/float-before","published":0,"date":"2018-02-18T08:12:37.445Z","updated":"2018-02-18T08:12:37.445Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcplz000rmc55pqth7yyy","content":"<!DOCTYPE html>\n<html>\n<head>\n    <title>简单的浮动布局</title>\n    <style type=\"text/css\">\n        .block-1{\n            width: 200px;\n            height: 200px;\n            background: red;\n            /*设置为浮动*/\n            float: right;\n        }\n\n        .block-2{\n            width: 200px;\n            height: 200px;\n            background: green;\n            /*设置为浮动*/\n            float: right;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\"block-1\">\n    这是第一个区块\n</div>\n\n<div class=\"block-2\">\n    这是第二个区块\n</div>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n    <title>简单的浮动布局</title>\n    <style type=\"text/css\">\n        .block-1{\n            width: 200px;\n            height: 200px;\n            background: red;\n            /*设置为浮动*/\n            float: right;\n        }\n\n        .block-2{\n            width: 200px;\n            height: 200px;\n            background: green;\n            /*设置为浮动*/\n            float: right;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\"block-1\">\n    这是第一个区块\n</div>\n\n<div class=\"block-2\">\n    这是第二个区块\n</div>\n</body>\n</html>"},{"_content":"<!DOCTYPE html>\n<html>\n<head>\n    <title>还是一个简单的浮动布局</title>\n    <style type=\"text/css\">\n\t/*\n        .parent::after{\n            content: \"\";\n            display:block;\n            clear: both;\n        }\n\t*/\n        .child-1{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: red;\n        }\n\n        .child-2{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: green;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"child-1\">\n            我是第一个子元素\n        </div>\n\n        <div class=\"child-2\">\n            我是第二个子元素\n        </div>\n    </div>\n</body>\n</html>\n","source":"_drafts/code/xinfan-1/float-demo-2.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n    <title>还是一个简单的浮动布局</title>\n    <style type=\"text/css\">\n\t/*\n        .parent::after{\n            content: \"\";\n            display:block;\n            clear: both;\n        }\n\t*/\n        .child-1{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: red;\n        }\n\n        .child-2{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: green;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"child-1\">\n            我是第一个子元素\n        </div>\n\n        <div class=\"child-2\">\n            我是第二个子元素\n        </div>\n    </div>\n</body>\n</html>\n","slug":"code/xinfan-1/float-demo-2","published":0,"date":"2018-02-18T08:12:37.445Z","updated":"2018-02-18T08:12:37.445Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpm2000smc559nes64d1","content":"<!DOCTYPE html>\n<html>\n<head>\n    <title>还是一个简单的浮动布局</title>\n    <style type=\"text/css\">\n\t/*\n        .parent::after{\n            content: \"\";\n            display:block;\n            clear: both;\n        }\n\t*/\n        .child-1{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: red;\n        }\n\n        .child-2{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: green;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"child-1\">\n            我是第一个子元素\n        </div>\n\n        <div class=\"child-2\">\n            我是第二个子元素\n        </div>\n    </div>\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n    <title>还是一个简单的浮动布局</title>\n    <style type=\"text/css\">\n\t/*\n        .parent::after{\n            content: \"\";\n            display:block;\n            clear: both;\n        }\n\t*/\n        .child-1{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: red;\n        }\n\n        .child-2{\n            width: 200px;\n            height: 200px;\n            float: left;\n            background: green;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"child-1\">\n            我是第一个子元素\n        </div>\n\n        <div class=\"child-2\">\n            我是第二个子元素\n        </div>\n    </div>\n</body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>简单的浮动布局</title>\n\t<style type=\"text/css\">\n\t\tdiv{\n\t\t\twidth: 200px;\n\t\t\theight: 200px;\n\t\t\tfloat: left;\n\t\t}\n\t</style>\n</head>\n<body>\n\n<div style=\"background-color: red\">这是第一个区块</div>\n<div style=\"background-color: green\">这是第二个区块</div>\n</body>\n</html>\n","source":"_drafts/code/xinfan-1/float-demo.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>简单的浮动布局</title>\n\t<style type=\"text/css\">\n\t\tdiv{\n\t\t\twidth: 200px;\n\t\t\theight: 200px;\n\t\t\tfloat: left;\n\t\t}\n\t</style>\n</head>\n<body>\n\n<div style=\"background-color: red\">这是第一个区块</div>\n<div style=\"background-color: green\">这是第二个区块</div>\n</body>\n</html>\n","slug":"code/xinfan-1/float-demo","published":0,"date":"2018-02-18T08:12:37.445Z","updated":"2018-02-18T08:12:37.445Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpn7000tmc55s7bixoje","content":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>简单的浮动布局</title>\n\t<style type=\"text/css\">\n\t\tdiv{\n\t\t\twidth: 200px;\n\t\t\theight: 200px;\n\t\t\tfloat: left;\n\t\t}\n\t</style>\n</head>\n<body>\n\n<div style=\"background-color: red\">这是第一个区块</div>\n<div style=\"background-color: green\">这是第二个区块</div>\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>简单的浮动布局</title>\n\t<style type=\"text/css\">\n\t\tdiv{\n\t\t\twidth: 200px;\n\t\t\theight: 200px;\n\t\t\tfloat: left;\n\t\t}\n\t</style>\n</head>\n<body>\n\n<div style=\"background-color: red\">这是第一个区块</div>\n<div style=\"background-color: green\">这是第二个区块</div>\n</body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>Float Problem</title>\n\t<style type=\"text/css\">\n\t\t.float-div{\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\tfloat: left;\n\t\t}\n\n\t\t.nofloat-div{\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\tclear:left;\t\t\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div class=\"float-div\" style=\"background-color: red\"> 第一个浮动元素块 </div>\n\t<div class=\"float-div\" style=\"background-color: green\"> 第二个浮动元素块 </div>\n\t<div class=\"nofloat-div\"  style=\"background-color: yellow\"> 非浮动元素块 </div>\n</body>\n</html>\n","source":"_drafts/code/xinfan-1/float-problem.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>Float Problem</title>\n\t<style type=\"text/css\">\n\t\t.float-div{\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\tfloat: left;\n\t\t}\n\n\t\t.nofloat-div{\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\tclear:left;\t\t\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div class=\"float-div\" style=\"background-color: red\"> 第一个浮动元素块 </div>\n\t<div class=\"float-div\" style=\"background-color: green\"> 第二个浮动元素块 </div>\n\t<div class=\"nofloat-div\"  style=\"background-color: yellow\"> 非浮动元素块 </div>\n</body>\n</html>\n","slug":"code/xinfan-1/float-problem","published":0,"date":"2018-02-18T08:12:37.445Z","updated":"2018-02-18T08:12:37.445Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpn8000umc554uam3j2i","content":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>Float Problem</title>\n\t<style type=\"text/css\">\n\t\t.float-div{\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\tfloat: left;\n\t\t}\n\n\t\t.nofloat-div{\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\tclear:left;\t\t\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div class=\"float-div\" style=\"background-color: red\"> 第一个浮动元素块 </div>\n\t<div class=\"float-div\" style=\"background-color: green\"> 第二个浮动元素块 </div>\n\t<div class=\"nofloat-div\" style=\"background-color: yellow\"> 非浮动元素块 </div>\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>Float Problem</title>\n\t<style type=\"text/css\">\n\t\t.float-div{\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\tfloat: left;\n\t\t}\n\n\t\t.nofloat-div{\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\tclear:left;\t\t\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div class=\"float-div\" style=\"background-color: red\"> 第一个浮动元素块 </div>\n\t<div class=\"float-div\" style=\"background-color: green\"> 第二个浮动元素块 </div>\n\t<div class=\"nofloat-div\" style=\"background-color: yellow\"> 非浮动元素块 </div>\n</body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>使用行内元素是有误差的</title>\n\t<style type=\"text/css\">\n\t\tdiv{\n\t\t\tbackground-color: red;\n\t\t\tdisplay: inline-block;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div>123</div>\n\t<div> 123</div>\n</body>\n</html>","source":"_drafts/code/xinfan-1/innerline-element.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>使用行内元素是有误差的</title>\n\t<style type=\"text/css\">\n\t\tdiv{\n\t\t\tbackground-color: red;\n\t\t\tdisplay: inline-block;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div>123</div>\n\t<div> 123</div>\n</body>\n</html>","slug":"code/xinfan-1/innerline-element","published":0,"date":"2018-02-18T08:12:37.445Z","updated":"2018-02-18T08:12:37.445Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpn9000vmc55v4ea1911","content":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>使用行内元素是有误差的</title>\n\t<style type=\"text/css\">\n\t\tdiv{\n\t\t\tbackground-color: red;\n\t\t\tdisplay: inline-block;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div>123</div>\n\t<div> 123</div>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>使用行内元素是有误差的</title>\n\t<style type=\"text/css\">\n\t\tdiv{\n\t\t\tbackground-color: red;\n\t\t\tdisplay: inline-block;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div>123</div>\n\t<div> 123</div>\n</body>\n</html>"},{"title":"后端工程师入门前端页面重构（一）：口诀","date":"2017-12-14T16:00:00.000Z","_content":"\n大家好，我是 KnewHow，一名前 Java 开发工程师。为什么要说是「前」呢？这要从两周前我加入一家新公司说起。\n\n入职第一天，实习导师告诉我会有一个月的新人引导计划，当时心里还是美滋滋的，觉得这个公司比较人性化，没有把工程师当劳动力使。\n\n但随后，我就被震撼到了。因为面试时就得知公司崇尚的是全栈文化，在部署完一切办公环境之后，实习导师告诉我开始学习的第一个技能竟然是：「前端页面重构」！！！\n\n当时我的内心是这样子的。\n\n\n![](/image/backend-enter-font-end/emoj1.jpeg)\n\n要知道，我对于前端，除了几个基本的标签外，可是一无所知。然而，我很快调整了状态，不就是前端开发么，应该难不倒机智的我。\n<!-- more -->\n<center>\n—————————— 以下开始严肃脸  —————————\n</center>\n![](/image/backend-enter-font-end/emoj3.jpeg)\n    \n\n\n## 什么是页面重构\n\n**好，第一个问题：那么什么是所谓的「页面重构」呢？**\n\n实习导师提出了要求，一定要有自己深刻的见解，好吧。。。。。\n\n于是，我的视线离开了电脑屏幕，开始寻求不一样的答案。很快，我注意到了我的办公桌面，是这样子滴。\n\n![桌面场景](/image/backend-enter-font-end/desk.png)\n\n在我看来，前端页面重构，**本质不就是处理空间布局的关系吗？**\n\n于是，机智如我，很快得出了自己的见解和答案。\n\n上面的这张图片是日常生活一个场景: 一张办公桌上面摆放着一些物品。桌面是背景，书和键盘并排的放着，白色书和紫色书交叠着，紫色书上面放着一个鼠标。\n\n其实这就是一个布局，也类似一张网页。\n\n然后我看了看旁边同事的桌子，也看了看整个公司的办公环境。\n\n然后我发现在一个布局中，存在三种关系:组成，包含和交叠。\n\n![空间布局关系](/image/backend-enter-font-end/secene-sum.png)\n\n于是，我把这个结论告诉了实习导师。实习导师听后思考许久，但还是表达了赞赏。之后，他又提出了第二个问题：\n\n那么，你说说看什么是「盒子模型」？\n\n这一次，我马上 Google 了这个概念。机智如我，基于我以上的结论，很快我又得出了以下的解读。\n\n## 盒子模型\n\n在我看来，「盒子模型」,　**本质就是去解决布局中位置和距离的关系**\n\n在上面的桌面场景中,键盘和紫色书是并排放着的，他们之间的距离可以使用「盒子模型」中的「外边距(margin)」来表示。\n\n鼠标被紫色书包含着，他们之间的距离可以使用「内边距(padding)」来表示。\n\n白色书和紫色书他们是交叠在一起的，他们同样可以使用「外边距(margin)」来表示，只不过值要是负数。\n![盒子模型](/image/backend-enter-font-end/box.png)\n\n我找到了实习导师，把我刚刚总结的答案告诉了他，他微微一笑,说：这个回答还算不错，接着又问道:\n\n那么在网页布局中，「盒子模型」是怎么被使用的呢?\n\n当时我的内心是这样的：\n![](/image/backend-enter-font-end/emoj4.jpeg)\n\n你怎么这么多问题，你特么还有完没完!!!\n\n理智的我压制了自己的小情绪，不就是怎么使用「盒子模型」吗？谷歌在手，天下我有!!\n\n## 绝对定位布局\n\n机智的我很快就有了答案，这也太简单了！\n\n我们只要把网页划分成一个个小块，然后调整他们的位置就行了。\n\n拿豆瓣的首页来说吧,我们可以把第一行分为三块，分别为豆瓣的logo,搜索框和后面的热搜主题。\n\n然后我们只需要使用「外边距(margin)」来设置他们和浏览器左边界之间的距离，就ＯＫ了。\n\n![](/image/backend-enter-font-end/douban-box.png)\n\n哈哈，我简直就是个天才。\n\n\n我把我的答案告诉了实习导师。心里美滋滋的：“你们招我进来，是不亏的！！”\n\n实习导师轻瞟了一眼我的答案，预料中的赞美和肯定并没有出现。\n\n他目光转向我，说：“你的这种方案是可行的，但是只有入门级别的小白才会使用。\n而且这种设计方案是低效的”！\n\n## 绝对定位布局　－－　低效分析\n\n“啊，低效的？为什么是低效的？”\n\n“在网页中，会有成百上千的元素，如果每个元素你都去量一下他的边距，这个效率是不是很低！”\n\n“好像是这样的”\n\n“最近我在研究移动端开发，移动端对绝对定位布局有一个更清晰的描述：”\n\n“绝对定位本质就是通过帧来定位一个视图的起点，高度和宽度。”\n\n“这个就要求你需要去计算每个视图的位置和大小。”\n\n“更可怕的是，如果有一天有一个元素的位置或者大小发生改变，那么你需要去修改所有的受影响的元素,这个更是低效的！”\n\n“简单来说　就是牵一发而动全身！”\n\n![](/image/backend-enter-font-end/mobile-layout.png)\n\n\"好像有那么几分道理，导师，你怎么这么厉害啊\"\n\n“低调低调，我可是切了十年页面的男人！！”\n\n![](/image/backend-enter-font-end/good.gif)\n\n“现在的页面布局都使用　「浮动布局」，你去调研一下吧”\n\n“嗯(亲昵)”\n\n## 浮动布局\n\n我用 Google 搜索了浮动布局和绝对定位布局。机智的我发现了他们最本质的一个区别：\n　\n绝对定位布局使用浏览器的窗口的边界作为参考，一个元素的位置是针对浏览器的边界来设定的。\n\n而且在绝对定位布局中，元素和元素之间视对方为不存在，这意味着当一个元素位置和大小发生了变化，不会对其他元素产生影响。\n\n![绝对定位布局原型图](/image/backend-enter-font-end/absolute-layout.png)\n\n而在浮动布局中，他们的位置可以用其他的元素作为参考系。\n\n如果有一天被参考的元素位置或者大小发生了变化，那么当前元素的位置也会发生相应的变化。这样就比较高效了。\n\n![浮动布局原型图](/image/backend-enter-font-end/float-layout.png)\n\n我兴奋的把调研结果告诉了实习导师，实习导师看了后，说:“还可以吧，”\n\n接着他又问道，“如果现在给你一个网页，你知道怎么布局吗？”\n\n“这个。。。”\n\n![](/image/backend-enter-font-end/youyu.gif)\n\n## 页面重构之口诀\n\n“看你这个犹犹豫豫的样子，我直接告诉你好了”\n\n“我们在网页的左上方放一块磁铁，那么所有元素都会被磁铁所吸引，那么磁力相反的方向，就是我们布局的方向”\n\n![布局磁铁模型示意图](/image/backend-enter-font-end/layout-direction.png)\n\n“所以我们布局的方向就是从左到右，从上到下”\n\n“明白了吗？”\n\n“还不是很明白”\n\n“那我们来做个练习吧”\n\n“看这个豆瓣的首页，先从整体来看，按照从左到右可以分成几个部分？”\n\n![](/image/backend-enter-font-end/douban-index.png)\n\n“一个部分吧”\n“对的”\n“因为整个页面就只有中间的那个部分”\n![](/image/backend-enter-font-end/douban-index-first.png)\n\n“从上到下，你看看这个页面可以分成几个部分？”\n\n“这个好像有点多了，每一行都可以分成一个部分吧”\n\n![](/image/backend-enter-font-end/douban-index-second.png)\n\n“不错嘛，看你你已经掌握了规律,看看下面的可以分成几个部分”\n\n![](/image/backend-enter-font-end/douban-head.png)\n\n“这个。。。”\n\n“不要捉急，安装我的口诀，先看从左到右分成几个部分，再看从上到下分成几个部分”\n\n“从左到右可以分成三个部分”\n\n![](/image/backend-enter-font-end/douban-head-first.png)\n\n“从上到下就一个部分吧，感觉没有其他东西了”\n\n![](/image/backend-enter-font-end/douban-head-second.png)\n\n“不错不错，我们再来一个难一点的,看看这个可以分成几个部分”\n\n![](/image/backend-enter-font-end/douban-middle.png)\n\n“从左到右可以分成三个部分”\n\n![](/image/backend-enter-font-end/douban-middle-first.png)\n\n“从上到下可以分成一个部分”\n\n“那这个呢?”\n\n![](/image/backend-enter-font-end/douban-part-1.png)\n\n“从左到右一个部分，从上到下也是一个部分”\n\n“这个呢?”\n\n![](/image/backend-enter-font-end/douban-part-2.png)\n\n“从左到右一个部分，从上到下三个部分”\n\n![](/image/backend-enter-font-end/douban-part-2-first.png)\n\n“这个呢?”\n\n![](/image/backend-enter-font-end/douban-part-3.png)\n\n“从左到右一个部分，从上到下四个部分”\n\n![](/image/backend-enter-font-end/douban-part-3-first.png)\n\n“这个呢”\n\n![](/image/backend-enter-font-end/douban-min.png)\n“从左到右两个部分，从上到下一个部分”\n\n![](/image/backend-enter-font-end/douban-min-first.png)\n\n“有没有发现什么规律？”\n\n“就是按从左到右，从上到下的顺序，先把网页的进行整体的划分，然后在依次对小模块进行划分，然后再对更小的模块进行划分，一直这么递归划分下去”\n\n“好的!你已经学会了”\n\n“啊！这么简单的？那个可以问你一个问题？能不能先从上到下，在从左到右？”\n\n“不能，因为人看网页的习惯就是先从左到右，在从上到下，这样的设计会有更好的视觉效果”\n\n\n这边文章只是介绍页面的重构的「口诀」，我们将在下一篇介绍「心法」。\n\n\n","source":"_posts/2017/12/back-2-font-koujue.md","raw":"---\ntitle: 后端工程师入门前端页面重构（一）：口诀\ndate: 2017/12/15\ncategories: 前端页面重构系列\ntags:\n- 前端\n---\n\n大家好，我是 KnewHow，一名前 Java 开发工程师。为什么要说是「前」呢？这要从两周前我加入一家新公司说起。\n\n入职第一天，实习导师告诉我会有一个月的新人引导计划，当时心里还是美滋滋的，觉得这个公司比较人性化，没有把工程师当劳动力使。\n\n但随后，我就被震撼到了。因为面试时就得知公司崇尚的是全栈文化，在部署完一切办公环境之后，实习导师告诉我开始学习的第一个技能竟然是：「前端页面重构」！！！\n\n当时我的内心是这样子的。\n\n\n![](/image/backend-enter-font-end/emoj1.jpeg)\n\n要知道，我对于前端，除了几个基本的标签外，可是一无所知。然而，我很快调整了状态，不就是前端开发么，应该难不倒机智的我。\n<!-- more -->\n<center>\n—————————— 以下开始严肃脸  —————————\n</center>\n![](/image/backend-enter-font-end/emoj3.jpeg)\n    \n\n\n## 什么是页面重构\n\n**好，第一个问题：那么什么是所谓的「页面重构」呢？**\n\n实习导师提出了要求，一定要有自己深刻的见解，好吧。。。。。\n\n于是，我的视线离开了电脑屏幕，开始寻求不一样的答案。很快，我注意到了我的办公桌面，是这样子滴。\n\n![桌面场景](/image/backend-enter-font-end/desk.png)\n\n在我看来，前端页面重构，**本质不就是处理空间布局的关系吗？**\n\n于是，机智如我，很快得出了自己的见解和答案。\n\n上面的这张图片是日常生活一个场景: 一张办公桌上面摆放着一些物品。桌面是背景，书和键盘并排的放着，白色书和紫色书交叠着，紫色书上面放着一个鼠标。\n\n其实这就是一个布局，也类似一张网页。\n\n然后我看了看旁边同事的桌子，也看了看整个公司的办公环境。\n\n然后我发现在一个布局中，存在三种关系:组成，包含和交叠。\n\n![空间布局关系](/image/backend-enter-font-end/secene-sum.png)\n\n于是，我把这个结论告诉了实习导师。实习导师听后思考许久，但还是表达了赞赏。之后，他又提出了第二个问题：\n\n那么，你说说看什么是「盒子模型」？\n\n这一次，我马上 Google 了这个概念。机智如我，基于我以上的结论，很快我又得出了以下的解读。\n\n## 盒子模型\n\n在我看来，「盒子模型」,　**本质就是去解决布局中位置和距离的关系**\n\n在上面的桌面场景中,键盘和紫色书是并排放着的，他们之间的距离可以使用「盒子模型」中的「外边距(margin)」来表示。\n\n鼠标被紫色书包含着，他们之间的距离可以使用「内边距(padding)」来表示。\n\n白色书和紫色书他们是交叠在一起的，他们同样可以使用「外边距(margin)」来表示，只不过值要是负数。\n![盒子模型](/image/backend-enter-font-end/box.png)\n\n我找到了实习导师，把我刚刚总结的答案告诉了他，他微微一笑,说：这个回答还算不错，接着又问道:\n\n那么在网页布局中，「盒子模型」是怎么被使用的呢?\n\n当时我的内心是这样的：\n![](/image/backend-enter-font-end/emoj4.jpeg)\n\n你怎么这么多问题，你特么还有完没完!!!\n\n理智的我压制了自己的小情绪，不就是怎么使用「盒子模型」吗？谷歌在手，天下我有!!\n\n## 绝对定位布局\n\n机智的我很快就有了答案，这也太简单了！\n\n我们只要把网页划分成一个个小块，然后调整他们的位置就行了。\n\n拿豆瓣的首页来说吧,我们可以把第一行分为三块，分别为豆瓣的logo,搜索框和后面的热搜主题。\n\n然后我们只需要使用「外边距(margin)」来设置他们和浏览器左边界之间的距离，就ＯＫ了。\n\n![](/image/backend-enter-font-end/douban-box.png)\n\n哈哈，我简直就是个天才。\n\n\n我把我的答案告诉了实习导师。心里美滋滋的：“你们招我进来，是不亏的！！”\n\n实习导师轻瞟了一眼我的答案，预料中的赞美和肯定并没有出现。\n\n他目光转向我，说：“你的这种方案是可行的，但是只有入门级别的小白才会使用。\n而且这种设计方案是低效的”！\n\n## 绝对定位布局　－－　低效分析\n\n“啊，低效的？为什么是低效的？”\n\n“在网页中，会有成百上千的元素，如果每个元素你都去量一下他的边距，这个效率是不是很低！”\n\n“好像是这样的”\n\n“最近我在研究移动端开发，移动端对绝对定位布局有一个更清晰的描述：”\n\n“绝对定位本质就是通过帧来定位一个视图的起点，高度和宽度。”\n\n“这个就要求你需要去计算每个视图的位置和大小。”\n\n“更可怕的是，如果有一天有一个元素的位置或者大小发生改变，那么你需要去修改所有的受影响的元素,这个更是低效的！”\n\n“简单来说　就是牵一发而动全身！”\n\n![](/image/backend-enter-font-end/mobile-layout.png)\n\n\"好像有那么几分道理，导师，你怎么这么厉害啊\"\n\n“低调低调，我可是切了十年页面的男人！！”\n\n![](/image/backend-enter-font-end/good.gif)\n\n“现在的页面布局都使用　「浮动布局」，你去调研一下吧”\n\n“嗯(亲昵)”\n\n## 浮动布局\n\n我用 Google 搜索了浮动布局和绝对定位布局。机智的我发现了他们最本质的一个区别：\n　\n绝对定位布局使用浏览器的窗口的边界作为参考，一个元素的位置是针对浏览器的边界来设定的。\n\n而且在绝对定位布局中，元素和元素之间视对方为不存在，这意味着当一个元素位置和大小发生了变化，不会对其他元素产生影响。\n\n![绝对定位布局原型图](/image/backend-enter-font-end/absolute-layout.png)\n\n而在浮动布局中，他们的位置可以用其他的元素作为参考系。\n\n如果有一天被参考的元素位置或者大小发生了变化，那么当前元素的位置也会发生相应的变化。这样就比较高效了。\n\n![浮动布局原型图](/image/backend-enter-font-end/float-layout.png)\n\n我兴奋的把调研结果告诉了实习导师，实习导师看了后，说:“还可以吧，”\n\n接着他又问道，“如果现在给你一个网页，你知道怎么布局吗？”\n\n“这个。。。”\n\n![](/image/backend-enter-font-end/youyu.gif)\n\n## 页面重构之口诀\n\n“看你这个犹犹豫豫的样子，我直接告诉你好了”\n\n“我们在网页的左上方放一块磁铁，那么所有元素都会被磁铁所吸引，那么磁力相反的方向，就是我们布局的方向”\n\n![布局磁铁模型示意图](/image/backend-enter-font-end/layout-direction.png)\n\n“所以我们布局的方向就是从左到右，从上到下”\n\n“明白了吗？”\n\n“还不是很明白”\n\n“那我们来做个练习吧”\n\n“看这个豆瓣的首页，先从整体来看，按照从左到右可以分成几个部分？”\n\n![](/image/backend-enter-font-end/douban-index.png)\n\n“一个部分吧”\n“对的”\n“因为整个页面就只有中间的那个部分”\n![](/image/backend-enter-font-end/douban-index-first.png)\n\n“从上到下，你看看这个页面可以分成几个部分？”\n\n“这个好像有点多了，每一行都可以分成一个部分吧”\n\n![](/image/backend-enter-font-end/douban-index-second.png)\n\n“不错嘛，看你你已经掌握了规律,看看下面的可以分成几个部分”\n\n![](/image/backend-enter-font-end/douban-head.png)\n\n“这个。。。”\n\n“不要捉急，安装我的口诀，先看从左到右分成几个部分，再看从上到下分成几个部分”\n\n“从左到右可以分成三个部分”\n\n![](/image/backend-enter-font-end/douban-head-first.png)\n\n“从上到下就一个部分吧，感觉没有其他东西了”\n\n![](/image/backend-enter-font-end/douban-head-second.png)\n\n“不错不错，我们再来一个难一点的,看看这个可以分成几个部分”\n\n![](/image/backend-enter-font-end/douban-middle.png)\n\n“从左到右可以分成三个部分”\n\n![](/image/backend-enter-font-end/douban-middle-first.png)\n\n“从上到下可以分成一个部分”\n\n“那这个呢?”\n\n![](/image/backend-enter-font-end/douban-part-1.png)\n\n“从左到右一个部分，从上到下也是一个部分”\n\n“这个呢?”\n\n![](/image/backend-enter-font-end/douban-part-2.png)\n\n“从左到右一个部分，从上到下三个部分”\n\n![](/image/backend-enter-font-end/douban-part-2-first.png)\n\n“这个呢?”\n\n![](/image/backend-enter-font-end/douban-part-3.png)\n\n“从左到右一个部分，从上到下四个部分”\n\n![](/image/backend-enter-font-end/douban-part-3-first.png)\n\n“这个呢”\n\n![](/image/backend-enter-font-end/douban-min.png)\n“从左到右两个部分，从上到下一个部分”\n\n![](/image/backend-enter-font-end/douban-min-first.png)\n\n“有没有发现什么规律？”\n\n“就是按从左到右，从上到下的顺序，先把网页的进行整体的划分，然后在依次对小模块进行划分，然后再对更小的模块进行划分，一直这么递归划分下去”\n\n“好的!你已经学会了”\n\n“啊！这么简单的？那个可以问你一个问题？能不能先从上到下，在从左到右？”\n\n“不能，因为人看网页的习惯就是先从左到右，在从上到下，这样的设计会有更好的视觉效果”\n\n\n这边文章只是介绍页面的重构的「口诀」，我们将在下一篇介绍「心法」。\n\n\n","slug":"2017/12/back-2-font-koujue","published":1,"updated":"2018-02-18T08:12:37.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpna000wmc552lhjtiun","content":"<p>大家好，我是 KnewHow，一名前 Java 开发工程师。为什么要说是「前」呢？这要从两周前我加入一家新公司说起。</p>\n<p>入职第一天，实习导师告诉我会有一个月的新人引导计划，当时心里还是美滋滋的，觉得这个公司比较人性化，没有把工程师当劳动力使。</p>\n<p>但随后，我就被震撼到了。因为面试时就得知公司崇尚的是全栈文化，在部署完一切办公环境之后，实习导师告诉我开始学习的第一个技能竟然是：「前端页面重构」！！！</p>\n<p>当时我的内心是这样子的。</p>\n<p><img src=\"/image/backend-enter-font-end/emoj1.jpeg\" alt=\"\"></p>\n<p>要知道，我对于前端，除了几个基本的标签外，可是一无所知。然而，我很快调整了状态，不就是前端开发么，应该难不倒机智的我。<br><a id=\"more\"></a></p>\n<p><center><br>—————————— 以下开始严肃脸  —————————<br></center><br><img src=\"/image/backend-enter-font-end/emoj3.jpeg\" alt=\"\"></p>\n<h2 id=\"什么是页面重构\"><a href=\"#什么是页面重构\" class=\"headerlink\" title=\"什么是页面重构\"></a>什么是页面重构</h2><p><strong>好，第一个问题：那么什么是所谓的「页面重构」呢？</strong></p>\n<p>实习导师提出了要求，一定要有自己深刻的见解，好吧。。。。。</p>\n<p>于是，我的视线离开了电脑屏幕，开始寻求不一样的答案。很快，我注意到了我的办公桌面，是这样子滴。</p>\n<p><img src=\"/image/backend-enter-font-end/desk.png\" alt=\"桌面场景\"></p>\n<p>在我看来，前端页面重构，<strong>本质不就是处理空间布局的关系吗？</strong></p>\n<p>于是，机智如我，很快得出了自己的见解和答案。</p>\n<p>上面的这张图片是日常生活一个场景: 一张办公桌上面摆放着一些物品。桌面是背景，书和键盘并排的放着，白色书和紫色书交叠着，紫色书上面放着一个鼠标。</p>\n<p>其实这就是一个布局，也类似一张网页。</p>\n<p>然后我看了看旁边同事的桌子，也看了看整个公司的办公环境。</p>\n<p>然后我发现在一个布局中，存在三种关系:组成，包含和交叠。</p>\n<p><img src=\"/image/backend-enter-font-end/secene-sum.png\" alt=\"空间布局关系\"></p>\n<p>于是，我把这个结论告诉了实习导师。实习导师听后思考许久，但还是表达了赞赏。之后，他又提出了第二个问题：</p>\n<p>那么，你说说看什么是「盒子模型」？</p>\n<p>这一次，我马上 Google 了这个概念。机智如我，基于我以上的结论，很快我又得出了以下的解读。</p>\n<h2 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h2><p>在我看来，「盒子模型」,　<strong>本质就是去解决布局中位置和距离的关系</strong></p>\n<p>在上面的桌面场景中,键盘和紫色书是并排放着的，他们之间的距离可以使用「盒子模型」中的「外边距(margin)」来表示。</p>\n<p>鼠标被紫色书包含着，他们之间的距离可以使用「内边距(padding)」来表示。</p>\n<p>白色书和紫色书他们是交叠在一起的，他们同样可以使用「外边距(margin)」来表示，只不过值要是负数。<br><img src=\"/image/backend-enter-font-end/box.png\" alt=\"盒子模型\"></p>\n<p>我找到了实习导师，把我刚刚总结的答案告诉了他，他微微一笑,说：这个回答还算不错，接着又问道:</p>\n<p>那么在网页布局中，「盒子模型」是怎么被使用的呢?</p>\n<p>当时我的内心是这样的：<br><img src=\"/image/backend-enter-font-end/emoj4.jpeg\" alt=\"\"></p>\n<p>你怎么这么多问题，你特么还有完没完!!!</p>\n<p>理智的我压制了自己的小情绪，不就是怎么使用「盒子模型」吗？谷歌在手，天下我有!!</p>\n<h2 id=\"绝对定位布局\"><a href=\"#绝对定位布局\" class=\"headerlink\" title=\"绝对定位布局\"></a>绝对定位布局</h2><p>机智的我很快就有了答案，这也太简单了！</p>\n<p>我们只要把网页划分成一个个小块，然后调整他们的位置就行了。</p>\n<p>拿豆瓣的首页来说吧,我们可以把第一行分为三块，分别为豆瓣的logo,搜索框和后面的热搜主题。</p>\n<p>然后我们只需要使用「外边距(margin)」来设置他们和浏览器左边界之间的距离，就ＯＫ了。</p>\n<p><img src=\"/image/backend-enter-font-end/douban-box.png\" alt=\"\"></p>\n<p>哈哈，我简直就是个天才。</p>\n<p>我把我的答案告诉了实习导师。心里美滋滋的：“你们招我进来，是不亏的！！”</p>\n<p>实习导师轻瞟了一眼我的答案，预料中的赞美和肯定并没有出现。</p>\n<p>他目光转向我，说：“你的这种方案是可行的，但是只有入门级别的小白才会使用。<br>而且这种设计方案是低效的”！</p>\n<h2 id=\"绝对定位布局-－－-低效分析\"><a href=\"#绝对定位布局-－－-低效分析\" class=\"headerlink\" title=\"绝对定位布局　－－　低效分析\"></a>绝对定位布局　－－　低效分析</h2><p>“啊，低效的？为什么是低效的？”</p>\n<p>“在网页中，会有成百上千的元素，如果每个元素你都去量一下他的边距，这个效率是不是很低！”</p>\n<p>“好像是这样的”</p>\n<p>“最近我在研究移动端开发，移动端对绝对定位布局有一个更清晰的描述：”</p>\n<p>“绝对定位本质就是通过帧来定位一个视图的起点，高度和宽度。”</p>\n<p>“这个就要求你需要去计算每个视图的位置和大小。”</p>\n<p>“更可怕的是，如果有一天有一个元素的位置或者大小发生改变，那么你需要去修改所有的受影响的元素,这个更是低效的！”</p>\n<p>“简单来说　就是牵一发而动全身！”</p>\n<p><img src=\"/image/backend-enter-font-end/mobile-layout.png\" alt=\"\"></p>\n<p>“好像有那么几分道理，导师，你怎么这么厉害啊”</p>\n<p>“低调低调，我可是切了十年页面的男人！！”</p>\n<p><img src=\"/image/backend-enter-font-end/good.gif\" alt=\"\"></p>\n<p>“现在的页面布局都使用　「浮动布局」，你去调研一下吧”</p>\n<p>“嗯(亲昵)”</p>\n<h2 id=\"浮动布局\"><a href=\"#浮动布局\" class=\"headerlink\" title=\"浮动布局\"></a>浮动布局</h2><p>我用 Google 搜索了浮动布局和绝对定位布局。机智的我发现了他们最本质的一个区别：<br>　<br>绝对定位布局使用浏览器的窗口的边界作为参考，一个元素的位置是针对浏览器的边界来设定的。</p>\n<p>而且在绝对定位布局中，元素和元素之间视对方为不存在，这意味着当一个元素位置和大小发生了变化，不会对其他元素产生影响。</p>\n<p><img src=\"/image/backend-enter-font-end/absolute-layout.png\" alt=\"绝对定位布局原型图\"></p>\n<p>而在浮动布局中，他们的位置可以用其他的元素作为参考系。</p>\n<p>如果有一天被参考的元素位置或者大小发生了变化，那么当前元素的位置也会发生相应的变化。这样就比较高效了。</p>\n<p><img src=\"/image/backend-enter-font-end/float-layout.png\" alt=\"浮动布局原型图\"></p>\n<p>我兴奋的把调研结果告诉了实习导师，实习导师看了后，说:“还可以吧，”</p>\n<p>接着他又问道，“如果现在给你一个网页，你知道怎么布局吗？”</p>\n<p>“这个。。。”</p>\n<p><img src=\"/image/backend-enter-font-end/youyu.gif\" alt=\"\"></p>\n<h2 id=\"页面重构之口诀\"><a href=\"#页面重构之口诀\" class=\"headerlink\" title=\"页面重构之口诀\"></a>页面重构之口诀</h2><p>“看你这个犹犹豫豫的样子，我直接告诉你好了”</p>\n<p>“我们在网页的左上方放一块磁铁，那么所有元素都会被磁铁所吸引，那么磁力相反的方向，就是我们布局的方向”</p>\n<p><img src=\"/image/backend-enter-font-end/layout-direction.png\" alt=\"布局磁铁模型示意图\"></p>\n<p>“所以我们布局的方向就是从左到右，从上到下”</p>\n<p>“明白了吗？”</p>\n<p>“还不是很明白”</p>\n<p>“那我们来做个练习吧”</p>\n<p>“看这个豆瓣的首页，先从整体来看，按照从左到右可以分成几个部分？”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-index.png\" alt=\"\"></p>\n<p>“一个部分吧”<br>“对的”<br>“因为整个页面就只有中间的那个部分”<br><img src=\"/image/backend-enter-font-end/douban-index-first.png\" alt=\"\"></p>\n<p>“从上到下，你看看这个页面可以分成几个部分？”</p>\n<p>“这个好像有点多了，每一行都可以分成一个部分吧”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-index-second.png\" alt=\"\"></p>\n<p>“不错嘛，看你你已经掌握了规律,看看下面的可以分成几个部分”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-head.png\" alt=\"\"></p>\n<p>“这个。。。”</p>\n<p>“不要捉急，安装我的口诀，先看从左到右分成几个部分，再看从上到下分成几个部分”</p>\n<p>“从左到右可以分成三个部分”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-head-first.png\" alt=\"\"></p>\n<p>“从上到下就一个部分吧，感觉没有其他东西了”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-head-second.png\" alt=\"\"></p>\n<p>“不错不错，我们再来一个难一点的,看看这个可以分成几个部分”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-middle.png\" alt=\"\"></p>\n<p>“从左到右可以分成三个部分”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-middle-first.png\" alt=\"\"></p>\n<p>“从上到下可以分成一个部分”</p>\n<p>“那这个呢?”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-part-1.png\" alt=\"\"></p>\n<p>“从左到右一个部分，从上到下也是一个部分”</p>\n<p>“这个呢?”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-part-2.png\" alt=\"\"></p>\n<p>“从左到右一个部分，从上到下三个部分”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-part-2-first.png\" alt=\"\"></p>\n<p>“这个呢?”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-part-3.png\" alt=\"\"></p>\n<p>“从左到右一个部分，从上到下四个部分”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-part-3-first.png\" alt=\"\"></p>\n<p>“这个呢”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-min.png\" alt=\"\"><br>“从左到右两个部分，从上到下一个部分”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-min-first.png\" alt=\"\"></p>\n<p>“有没有发现什么规律？”</p>\n<p>“就是按从左到右，从上到下的顺序，先把网页的进行整体的划分，然后在依次对小模块进行划分，然后再对更小的模块进行划分，一直这么递归划分下去”</p>\n<p>“好的!你已经学会了”</p>\n<p>“啊！这么简单的？那个可以问你一个问题？能不能先从上到下，在从左到右？”</p>\n<p>“不能，因为人看网页的习惯就是先从左到右，在从上到下，这样的设计会有更好的视觉效果”</p>\n<p>这边文章只是介绍页面的重构的「口诀」，我们将在下一篇介绍「心法」。</p>\n","site":{"data":{}},"excerpt":"<p>大家好，我是 KnewHow，一名前 Java 开发工程师。为什么要说是「前」呢？这要从两周前我加入一家新公司说起。</p>\n<p>入职第一天，实习导师告诉我会有一个月的新人引导计划，当时心里还是美滋滋的，觉得这个公司比较人性化，没有把工程师当劳动力使。</p>\n<p>但随后，我就被震撼到了。因为面试时就得知公司崇尚的是全栈文化，在部署完一切办公环境之后，实习导师告诉我开始学习的第一个技能竟然是：「前端页面重构」！！！</p>\n<p>当时我的内心是这样子的。</p>\n<p><img src=\"/image/backend-enter-font-end/emoj1.jpeg\" alt=\"\"></p>\n<p>要知道，我对于前端，除了几个基本的标签外，可是一无所知。然而，我很快调整了状态，不就是前端开发么，应该难不倒机智的我。<br>","more":"</p>\n<p><center><br>—————————— 以下开始严肃脸  —————————<br></center><br><img src=\"/image/backend-enter-font-end/emoj3.jpeg\" alt=\"\"></p>\n<h2 id=\"什么是页面重构\"><a href=\"#什么是页面重构\" class=\"headerlink\" title=\"什么是页面重构\"></a>什么是页面重构</h2><p><strong>好，第一个问题：那么什么是所谓的「页面重构」呢？</strong></p>\n<p>实习导师提出了要求，一定要有自己深刻的见解，好吧。。。。。</p>\n<p>于是，我的视线离开了电脑屏幕，开始寻求不一样的答案。很快，我注意到了我的办公桌面，是这样子滴。</p>\n<p><img src=\"/image/backend-enter-font-end/desk.png\" alt=\"桌面场景\"></p>\n<p>在我看来，前端页面重构，<strong>本质不就是处理空间布局的关系吗？</strong></p>\n<p>于是，机智如我，很快得出了自己的见解和答案。</p>\n<p>上面的这张图片是日常生活一个场景: 一张办公桌上面摆放着一些物品。桌面是背景，书和键盘并排的放着，白色书和紫色书交叠着，紫色书上面放着一个鼠标。</p>\n<p>其实这就是一个布局，也类似一张网页。</p>\n<p>然后我看了看旁边同事的桌子，也看了看整个公司的办公环境。</p>\n<p>然后我发现在一个布局中，存在三种关系:组成，包含和交叠。</p>\n<p><img src=\"/image/backend-enter-font-end/secene-sum.png\" alt=\"空间布局关系\"></p>\n<p>于是，我把这个结论告诉了实习导师。实习导师听后思考许久，但还是表达了赞赏。之后，他又提出了第二个问题：</p>\n<p>那么，你说说看什么是「盒子模型」？</p>\n<p>这一次，我马上 Google 了这个概念。机智如我，基于我以上的结论，很快我又得出了以下的解读。</p>\n<h2 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h2><p>在我看来，「盒子模型」,　<strong>本质就是去解决布局中位置和距离的关系</strong></p>\n<p>在上面的桌面场景中,键盘和紫色书是并排放着的，他们之间的距离可以使用「盒子模型」中的「外边距(margin)」来表示。</p>\n<p>鼠标被紫色书包含着，他们之间的距离可以使用「内边距(padding)」来表示。</p>\n<p>白色书和紫色书他们是交叠在一起的，他们同样可以使用「外边距(margin)」来表示，只不过值要是负数。<br><img src=\"/image/backend-enter-font-end/box.png\" alt=\"盒子模型\"></p>\n<p>我找到了实习导师，把我刚刚总结的答案告诉了他，他微微一笑,说：这个回答还算不错，接着又问道:</p>\n<p>那么在网页布局中，「盒子模型」是怎么被使用的呢?</p>\n<p>当时我的内心是这样的：<br><img src=\"/image/backend-enter-font-end/emoj4.jpeg\" alt=\"\"></p>\n<p>你怎么这么多问题，你特么还有完没完!!!</p>\n<p>理智的我压制了自己的小情绪，不就是怎么使用「盒子模型」吗？谷歌在手，天下我有!!</p>\n<h2 id=\"绝对定位布局\"><a href=\"#绝对定位布局\" class=\"headerlink\" title=\"绝对定位布局\"></a>绝对定位布局</h2><p>机智的我很快就有了答案，这也太简单了！</p>\n<p>我们只要把网页划分成一个个小块，然后调整他们的位置就行了。</p>\n<p>拿豆瓣的首页来说吧,我们可以把第一行分为三块，分别为豆瓣的logo,搜索框和后面的热搜主题。</p>\n<p>然后我们只需要使用「外边距(margin)」来设置他们和浏览器左边界之间的距离，就ＯＫ了。</p>\n<p><img src=\"/image/backend-enter-font-end/douban-box.png\" alt=\"\"></p>\n<p>哈哈，我简直就是个天才。</p>\n<p>我把我的答案告诉了实习导师。心里美滋滋的：“你们招我进来，是不亏的！！”</p>\n<p>实习导师轻瞟了一眼我的答案，预料中的赞美和肯定并没有出现。</p>\n<p>他目光转向我，说：“你的这种方案是可行的，但是只有入门级别的小白才会使用。<br>而且这种设计方案是低效的”！</p>\n<h2 id=\"绝对定位布局-－－-低效分析\"><a href=\"#绝对定位布局-－－-低效分析\" class=\"headerlink\" title=\"绝对定位布局　－－　低效分析\"></a>绝对定位布局　－－　低效分析</h2><p>“啊，低效的？为什么是低效的？”</p>\n<p>“在网页中，会有成百上千的元素，如果每个元素你都去量一下他的边距，这个效率是不是很低！”</p>\n<p>“好像是这样的”</p>\n<p>“最近我在研究移动端开发，移动端对绝对定位布局有一个更清晰的描述：”</p>\n<p>“绝对定位本质就是通过帧来定位一个视图的起点，高度和宽度。”</p>\n<p>“这个就要求你需要去计算每个视图的位置和大小。”</p>\n<p>“更可怕的是，如果有一天有一个元素的位置或者大小发生改变，那么你需要去修改所有的受影响的元素,这个更是低效的！”</p>\n<p>“简单来说　就是牵一发而动全身！”</p>\n<p><img src=\"/image/backend-enter-font-end/mobile-layout.png\" alt=\"\"></p>\n<p>“好像有那么几分道理，导师，你怎么这么厉害啊”</p>\n<p>“低调低调，我可是切了十年页面的男人！！”</p>\n<p><img src=\"/image/backend-enter-font-end/good.gif\" alt=\"\"></p>\n<p>“现在的页面布局都使用　「浮动布局」，你去调研一下吧”</p>\n<p>“嗯(亲昵)”</p>\n<h2 id=\"浮动布局\"><a href=\"#浮动布局\" class=\"headerlink\" title=\"浮动布局\"></a>浮动布局</h2><p>我用 Google 搜索了浮动布局和绝对定位布局。机智的我发现了他们最本质的一个区别：<br>　<br>绝对定位布局使用浏览器的窗口的边界作为参考，一个元素的位置是针对浏览器的边界来设定的。</p>\n<p>而且在绝对定位布局中，元素和元素之间视对方为不存在，这意味着当一个元素位置和大小发生了变化，不会对其他元素产生影响。</p>\n<p><img src=\"/image/backend-enter-font-end/absolute-layout.png\" alt=\"绝对定位布局原型图\"></p>\n<p>而在浮动布局中，他们的位置可以用其他的元素作为参考系。</p>\n<p>如果有一天被参考的元素位置或者大小发生了变化，那么当前元素的位置也会发生相应的变化。这样就比较高效了。</p>\n<p><img src=\"/image/backend-enter-font-end/float-layout.png\" alt=\"浮动布局原型图\"></p>\n<p>我兴奋的把调研结果告诉了实习导师，实习导师看了后，说:“还可以吧，”</p>\n<p>接着他又问道，“如果现在给你一个网页，你知道怎么布局吗？”</p>\n<p>“这个。。。”</p>\n<p><img src=\"/image/backend-enter-font-end/youyu.gif\" alt=\"\"></p>\n<h2 id=\"页面重构之口诀\"><a href=\"#页面重构之口诀\" class=\"headerlink\" title=\"页面重构之口诀\"></a>页面重构之口诀</h2><p>“看你这个犹犹豫豫的样子，我直接告诉你好了”</p>\n<p>“我们在网页的左上方放一块磁铁，那么所有元素都会被磁铁所吸引，那么磁力相反的方向，就是我们布局的方向”</p>\n<p><img src=\"/image/backend-enter-font-end/layout-direction.png\" alt=\"布局磁铁模型示意图\"></p>\n<p>“所以我们布局的方向就是从左到右，从上到下”</p>\n<p>“明白了吗？”</p>\n<p>“还不是很明白”</p>\n<p>“那我们来做个练习吧”</p>\n<p>“看这个豆瓣的首页，先从整体来看，按照从左到右可以分成几个部分？”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-index.png\" alt=\"\"></p>\n<p>“一个部分吧”<br>“对的”<br>“因为整个页面就只有中间的那个部分”<br><img src=\"/image/backend-enter-font-end/douban-index-first.png\" alt=\"\"></p>\n<p>“从上到下，你看看这个页面可以分成几个部分？”</p>\n<p>“这个好像有点多了，每一行都可以分成一个部分吧”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-index-second.png\" alt=\"\"></p>\n<p>“不错嘛，看你你已经掌握了规律,看看下面的可以分成几个部分”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-head.png\" alt=\"\"></p>\n<p>“这个。。。”</p>\n<p>“不要捉急，安装我的口诀，先看从左到右分成几个部分，再看从上到下分成几个部分”</p>\n<p>“从左到右可以分成三个部分”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-head-first.png\" alt=\"\"></p>\n<p>“从上到下就一个部分吧，感觉没有其他东西了”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-head-second.png\" alt=\"\"></p>\n<p>“不错不错，我们再来一个难一点的,看看这个可以分成几个部分”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-middle.png\" alt=\"\"></p>\n<p>“从左到右可以分成三个部分”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-middle-first.png\" alt=\"\"></p>\n<p>“从上到下可以分成一个部分”</p>\n<p>“那这个呢?”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-part-1.png\" alt=\"\"></p>\n<p>“从左到右一个部分，从上到下也是一个部分”</p>\n<p>“这个呢?”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-part-2.png\" alt=\"\"></p>\n<p>“从左到右一个部分，从上到下三个部分”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-part-2-first.png\" alt=\"\"></p>\n<p>“这个呢?”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-part-3.png\" alt=\"\"></p>\n<p>“从左到右一个部分，从上到下四个部分”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-part-3-first.png\" alt=\"\"></p>\n<p>“这个呢”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-min.png\" alt=\"\"><br>“从左到右两个部分，从上到下一个部分”</p>\n<p><img src=\"/image/backend-enter-font-end/douban-min-first.png\" alt=\"\"></p>\n<p>“有没有发现什么规律？”</p>\n<p>“就是按从左到右，从上到下的顺序，先把网页的进行整体的划分，然后在依次对小模块进行划分，然后再对更小的模块进行划分，一直这么递归划分下去”</p>\n<p>“好的!你已经学会了”</p>\n<p>“啊！这么简单的？那个可以问你一个问题？能不能先从上到下，在从左到右？”</p>\n<p>“不能，因为人看网页的习惯就是先从左到右，在从上到下，这样的设计会有更好的视觉效果”</p>\n<p>这边文章只是介绍页面的重构的「口诀」，我们将在下一篇介绍「心法」。</p>"},{"_content":"<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <style type=\"text/css\">\n    .parent{\n      /*background-color: red;*/\n    }\n    .child1{\n    \tbackground-color: red;\n    \tfloat: left;\n    \theight: 100px;\n    }\n\n    .child2{\n    \tbackground-color: green;\n    \theight: 50px;\n      float: left;\n    }\n\n    .child3{\n    \tclear: left;\n    }\n\n    </style>\n</head>\n<body>\n  <div class=\"parent\">\n  \t<div class=\"child1\">\n  \t\tfirst child\n  \t</div>\n    <div class=\"child2\">\n      second child\n    </div>\n    <div class=\"child3\">\n    </div>\n  </div>\n</body>\n</html>\n","source":"_drafts/code/xinfan-1/parentDiv.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <style type=\"text/css\">\n    .parent{\n      /*background-color: red;*/\n    }\n    .child1{\n    \tbackground-color: red;\n    \tfloat: left;\n    \theight: 100px;\n    }\n\n    .child2{\n    \tbackground-color: green;\n    \theight: 50px;\n      float: left;\n    }\n\n    .child3{\n    \tclear: left;\n    }\n\n    </style>\n</head>\n<body>\n  <div class=\"parent\">\n  \t<div class=\"child1\">\n  \t\tfirst child\n  \t</div>\n    <div class=\"child2\">\n      second child\n    </div>\n    <div class=\"child3\">\n    </div>\n  </div>\n</body>\n</html>\n","slug":"code/xinfan-1/parentDiv","published":0,"date":"2018-02-18T08:12:37.445Z","updated":"2018-02-18T08:12:37.445Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpnb000xmc55srwbc4x4","content":"<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <style type=\"text/css\">\n    .parent{\n      /*background-color: red;*/\n    }\n    .child1{\n    \tbackground-color: red;\n    \tfloat: left;\n    \theight: 100px;\n    }\n\n    .child2{\n    \tbackground-color: green;\n    \theight: 50px;\n      float: left;\n    }\n\n    .child3{\n    \tclear: left;\n    }\n\n    </style>\n</head>\n<body>\n  <div class=\"parent\">\n  \t<div class=\"child1\">\n  \t\tfirst child\n  \t</div>\n    <div class=\"child2\">\n      second child\n    </div>\n    <div class=\"child3\">\n    </div>\n  </div>\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <style type=\"text/css\">\n    .parent{\n      /*background-color: red;*/\n    }\n    .child1{\n    \tbackground-color: red;\n    \tfloat: left;\n    \theight: 100px;\n    }\n\n    .child2{\n    \tbackground-color: green;\n    \theight: 50px;\n      float: left;\n    }\n\n    .child3{\n    \tclear: left;\n    }\n\n    </style>\n</head>\n<body>\n  <div class=\"parent\">\n  \t<div class=\"child1\">\n  \t\tfirst child\n  \t</div>\n    <div class=\"child2\">\n      second child\n    </div>\n    <div class=\"child3\">\n    </div>\n  </div>\n</body>\n</html>\n"},{"title":"ScalaProp Usage Guide","date":"2018-10-13T16:00:00.000Z","_content":"\nScala-tes-prop provides test cases generator then run test function with them. Finally it will println test result information and return a boolean value to tell you test result which can be asserted by scala test. Now, let't see how to use it!\n\n## Generator\nGenerator is basic component in scala-test-prop, which can generate test cases you want. For example, if you want to get a range integer, you see following code:\n```Scala\nimport prop.gen.Gen\n\n// return a Gen[Int] with integer range in (1,10), but the range exclusive 10\nGen.choose(1, 10)\n```\nIt also can generate other generator, such as `Gen.odd(10,100)`, `Gen.listOf(10, Gen.choose(10,100))`. The first function will return random odd integer from 10 to 100, but inclusive 100. The second function will return a list with 10 size whose\nelements range is between 10 and 100 but exclusive 100. You can find more in [Object Gen](https://github.com/KnewHow/ScalaProp/blob/master/src/main/scala/prop/Gen.scala)\n<!-- more -->\n## Executor\nNow, you have knew how to obtain a generator, but how to run testing function with them? The Executor match to `Gen` is `Prop`. `Prop` is running parameters to testing result container. You can do `&&` or `||` with two `Prop`, the implement you can refer: https://github.com/KnewHow/ScalaProp/blob/master/src/main/scala/prop/Prop.scala\n\nYou can call `Prop.test(n,rng)` to get test result. The first parameter is how many test cases will be taken to test. The second parameter is random number generator. You can get it by `RNG.get`. We have provided some default value to make you use it eaisily.\n\nIf you want to test a sorted function, you can generate a `Gen[List[A]]` first, then test it by `Prop`, you can refer following code:\n```Scala\npackage test.prop.gen\nimport org.scalatest.FlatSpec\nimport prop.gen._\n\nclass ListOfFixedSizeSpec extends FlatSpec {\n  \"test listOf with fixed size\" should \"success\" in {\n    // Generate list with 20 size whose element is between 10 and 100\n    val g = Gen.listOfN(20, Gen.choose(10, 100))\n    val p = Prop.forAll(g) { r =>\n      // Writing what you want to test, make sure it last result is boolean.\n      val s = r.sorted\n      val h = s.headOption\n      h.map(rs => !r.exists(_ < rs)).getOrElse(true)\n    }\n    // In default, test function will run checked function with 10 test cases.\n    assert(p.test())\n  }\n}\n```\nBecause test function return a boolean value, if the value is true, representing the all test cases passed, you can combine it with scala-test assert. At same time, `Prop.test` also println some test information in console. If all test cases passed, it will print `[info] OK, 10 testcases passed`, otherwise will print `[error] test case failure, case by...,But success n times`.\n\nyou can also generate a list with random size by `Gen.listOfN(Gen.choose(10, 20), Gen.choose(10, 100))`.\n\n## Incremental Testing\nSometimes, once or twice testing don't test whether a bug in checked function. We may want a test way, which can increase the test cases gradually until run enough times we assigned. `SProp` is born in time!\n\nFor example, If you want to test a sorted function and want to test it 20 times with test cases increasing gradually. You can choose `SProp`, you can refer following code:\n```Scala\npackage test.prop.sgen\n\nimport org.scalatest.FlatSpec\nimport prop.gen._\n\nclass SPropFixedStepSpec extends FlatSpec {\n  \"test SProp with sorted function by fixed step increasing\" should \"success\" in {\n    // geneate a list with random size whose element is random\n    val g = Gen.listOfN(Gen.choose(100, 200), Gen.choose(300, 400))\n    // conver Gen into SGen, it is very simply\n    val sg = g.unsized\n    // similar with Prop.forAll, just return a boolean result\n    val p = SProp.forAll(sg) { r =>\n      val s = r.sorted\n      val h = s.headOption\n      h.map(rs => !r.exists(_ < rs)).getOrElse(true)\n    }\n    // run the checked function\n    assert(\n      p.test(\n        // the minimal test cases will be run first\n        minTestCase = 10,\n        // the step the test cases will increase by\n        step = 1,\n        // how many time the function will be run\n        testTimes = 20,\n        // whether use random step\n        randomStep = false\n      ))\n  }\n}\n```\n\nThe function will take 10 test cases first, then increase test cases by step 1 unitl it run 20 times. In this way, it will reduce testing fortuity.\n\nBut sometimes, fixed step could be stiff, So we also prepare a random step between 1 and n which you assigned. You just need\nassign `randomStep=true`, we will genereate random step between 1 and `n`\n\nWe has give some default parameters to `test` function, So you can not pass any parameters to `test` function.\n\n## Bugs\nThe `Gen` is so easy and elegant, but it has some bugs:\nIf you want to test `Gen.listOfN` with a big size list, it will throw `stack overflow`. The tempoary  solution is you can increase stack size by jvm prameters with `-Xss500M`. You can write it in a file named `.jvmopts` in sbt project root directory.\n\nI will try to fix it in the future!\n## How to Get\nYou can add following code in your build.sbt file to get it:\n```Scala\n// https://mvnrepository.com/artifact/com.github.knewhow/scalaprop\nlibraryDependencies += \"com.github.knewhow\" %% \"scalaprop\" % \"1.0\"\n```\n\n## Touch Me\nThe project Github address is: https://github.com/KnewHow/ScalaProp, If you has some problems about it or you hava a better solution, you could touch me by email for help or give issues. Thank you!\n","source":"_posts/2018/10/ScalaProp.md","raw":"---\ntitle: ScalaProp Usage Guide\ndate: 2018/10/14\ncategories: 指导手册\ntags:\n- Scala\n- 会使用\n---\n\nScala-tes-prop provides test cases generator then run test function with them. Finally it will println test result information and return a boolean value to tell you test result which can be asserted by scala test. Now, let't see how to use it!\n\n## Generator\nGenerator is basic component in scala-test-prop, which can generate test cases you want. For example, if you want to get a range integer, you see following code:\n```Scala\nimport prop.gen.Gen\n\n// return a Gen[Int] with integer range in (1,10), but the range exclusive 10\nGen.choose(1, 10)\n```\nIt also can generate other generator, such as `Gen.odd(10,100)`, `Gen.listOf(10, Gen.choose(10,100))`. The first function will return random odd integer from 10 to 100, but inclusive 100. The second function will return a list with 10 size whose\nelements range is between 10 and 100 but exclusive 100. You can find more in [Object Gen](https://github.com/KnewHow/ScalaProp/blob/master/src/main/scala/prop/Gen.scala)\n<!-- more -->\n## Executor\nNow, you have knew how to obtain a generator, but how to run testing function with them? The Executor match to `Gen` is `Prop`. `Prop` is running parameters to testing result container. You can do `&&` or `||` with two `Prop`, the implement you can refer: https://github.com/KnewHow/ScalaProp/blob/master/src/main/scala/prop/Prop.scala\n\nYou can call `Prop.test(n,rng)` to get test result. The first parameter is how many test cases will be taken to test. The second parameter is random number generator. You can get it by `RNG.get`. We have provided some default value to make you use it eaisily.\n\nIf you want to test a sorted function, you can generate a `Gen[List[A]]` first, then test it by `Prop`, you can refer following code:\n```Scala\npackage test.prop.gen\nimport org.scalatest.FlatSpec\nimport prop.gen._\n\nclass ListOfFixedSizeSpec extends FlatSpec {\n  \"test listOf with fixed size\" should \"success\" in {\n    // Generate list with 20 size whose element is between 10 and 100\n    val g = Gen.listOfN(20, Gen.choose(10, 100))\n    val p = Prop.forAll(g) { r =>\n      // Writing what you want to test, make sure it last result is boolean.\n      val s = r.sorted\n      val h = s.headOption\n      h.map(rs => !r.exists(_ < rs)).getOrElse(true)\n    }\n    // In default, test function will run checked function with 10 test cases.\n    assert(p.test())\n  }\n}\n```\nBecause test function return a boolean value, if the value is true, representing the all test cases passed, you can combine it with scala-test assert. At same time, `Prop.test` also println some test information in console. If all test cases passed, it will print `[info] OK, 10 testcases passed`, otherwise will print `[error] test case failure, case by...,But success n times`.\n\nyou can also generate a list with random size by `Gen.listOfN(Gen.choose(10, 20), Gen.choose(10, 100))`.\n\n## Incremental Testing\nSometimes, once or twice testing don't test whether a bug in checked function. We may want a test way, which can increase the test cases gradually until run enough times we assigned. `SProp` is born in time!\n\nFor example, If you want to test a sorted function and want to test it 20 times with test cases increasing gradually. You can choose `SProp`, you can refer following code:\n```Scala\npackage test.prop.sgen\n\nimport org.scalatest.FlatSpec\nimport prop.gen._\n\nclass SPropFixedStepSpec extends FlatSpec {\n  \"test SProp with sorted function by fixed step increasing\" should \"success\" in {\n    // geneate a list with random size whose element is random\n    val g = Gen.listOfN(Gen.choose(100, 200), Gen.choose(300, 400))\n    // conver Gen into SGen, it is very simply\n    val sg = g.unsized\n    // similar with Prop.forAll, just return a boolean result\n    val p = SProp.forAll(sg) { r =>\n      val s = r.sorted\n      val h = s.headOption\n      h.map(rs => !r.exists(_ < rs)).getOrElse(true)\n    }\n    // run the checked function\n    assert(\n      p.test(\n        // the minimal test cases will be run first\n        minTestCase = 10,\n        // the step the test cases will increase by\n        step = 1,\n        // how many time the function will be run\n        testTimes = 20,\n        // whether use random step\n        randomStep = false\n      ))\n  }\n}\n```\n\nThe function will take 10 test cases first, then increase test cases by step 1 unitl it run 20 times. In this way, it will reduce testing fortuity.\n\nBut sometimes, fixed step could be stiff, So we also prepare a random step between 1 and n which you assigned. You just need\nassign `randomStep=true`, we will genereate random step between 1 and `n`\n\nWe has give some default parameters to `test` function, So you can not pass any parameters to `test` function.\n\n## Bugs\nThe `Gen` is so easy and elegant, but it has some bugs:\nIf you want to test `Gen.listOfN` with a big size list, it will throw `stack overflow`. The tempoary  solution is you can increase stack size by jvm prameters with `-Xss500M`. You can write it in a file named `.jvmopts` in sbt project root directory.\n\nI will try to fix it in the future!\n## How to Get\nYou can add following code in your build.sbt file to get it:\n```Scala\n// https://mvnrepository.com/artifact/com.github.knewhow/scalaprop\nlibraryDependencies += \"com.github.knewhow\" %% \"scalaprop\" % \"1.0\"\n```\n\n## Touch Me\nThe project Github address is: https://github.com/KnewHow/ScalaProp, If you has some problems about it or you hava a better solution, you could touch me by email for help or give issues. Thank you!\n","slug":"2018/10/ScalaProp","published":1,"updated":"2018-10-14T10:00:10.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpnc000zmc55lbm3nnmb","content":"<p>Scala-tes-prop provides test cases generator then run test function with them. Finally it will println test result information and return a boolean value to tell you test result which can be asserted by scala test. Now, let’t see how to use it!</p>\n<h2 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h2><p>Generator is basic component in scala-test-prop, which can generate test cases you want. For example, if you want to get a range integer, you see following code:<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> prop.gen.<span class=\"type\">Gen</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// return a Gen[Int] with integer range in (1,10), but the range exclusive 10</span></span><br><span class=\"line\"><span class=\"type\">Gen</span>.choose(<span class=\"number\">1</span>, <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure></p>\n<p>It also can generate other generator, such as <code>Gen.odd(10,100)</code>, <code>Gen.listOf(10, Gen.choose(10,100))</code>. The first function will return random odd integer from 10 to 100, but inclusive 100. The second function will return a list with 10 size whose<br>elements range is between 10 and 100 but exclusive 100. You can find more in <a href=\"https://github.com/KnewHow/ScalaProp/blob/master/src/main/scala/prop/Gen.scala\" target=\"_blank\" rel=\"noopener\">Object Gen</a><br><a id=\"more\"></a></p>\n<h2 id=\"Executor\"><a href=\"#Executor\" class=\"headerlink\" title=\"Executor\"></a>Executor</h2><p>Now, you have knew how to obtain a generator, but how to run testing function with them? The Executor match to <code>Gen</code> is <code>Prop</code>. <code>Prop</code> is running parameters to testing result container. You can do <code>&amp;&amp;</code> or <code>||</code> with two <code>Prop</code>, the implement you can refer: <a href=\"https://github.com/KnewHow/ScalaProp/blob/master/src/main/scala/prop/Prop.scala\" target=\"_blank\" rel=\"noopener\">https://github.com/KnewHow/ScalaProp/blob/master/src/main/scala/prop/Prop.scala</a></p>\n<p>You can call <code>Prop.test(n,rng)</code> to get test result. The first parameter is how many test cases will be taken to test. The second parameter is random number generator. You can get it by <code>RNG.get</code>. We have provided some default value to make you use it eaisily.</p>\n<p>If you want to test a sorted function, you can generate a <code>Gen[List[A]]</code> first, then test it by <code>Prop</code>, you can refer following code:<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.prop.gen</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.scalatest.<span class=\"type\">FlatSpec</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> prop.gen._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListOfFixedSizeSpec</span> <span class=\"keyword\">extends</span> <span class=\"title\">FlatSpec</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"string\">\"test listOf with fixed size\"</span> should <span class=\"string\">\"success\"</span> in &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Generate list with 20 size whose element is between 10 and 100</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> g = <span class=\"type\">Gen</span>.listOfN(<span class=\"number\">20</span>, <span class=\"type\">Gen</span>.choose(<span class=\"number\">10</span>, <span class=\"number\">100</span>))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"type\">Prop</span>.forAll(g) &#123; r =&gt;</span><br><span class=\"line\">      <span class=\"comment\">// Writing what you want to test, make sure it last result is boolean.</span></span><br><span class=\"line\">      <span class=\"keyword\">val</span> s = r.sorted</span><br><span class=\"line\">      <span class=\"keyword\">val</span> h = s.headOption</span><br><span class=\"line\">      h.map(rs =&gt; !r.exists(_ &lt; rs)).getOrElse(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// In default, test function will run checked function with 10 test cases.</span></span><br><span class=\"line\">    assert(p.test())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Because test function return a boolean value, if the value is true, representing the all test cases passed, you can combine it with scala-test assert. At same time, <code>Prop.test</code> also println some test information in console. If all test cases passed, it will print <code>[info] OK, 10 testcases passed</code>, otherwise will print <code>[error] test case failure, case by...,But success n times</code>.</p>\n<p>you can also generate a list with random size by <code>Gen.listOfN(Gen.choose(10, 20), Gen.choose(10, 100))</code>.</p>\n<h2 id=\"Incremental-Testing\"><a href=\"#Incremental-Testing\" class=\"headerlink\" title=\"Incremental Testing\"></a>Incremental Testing</h2><p>Sometimes, once or twice testing don’t test whether a bug in checked function. We may want a test way, which can increase the test cases gradually until run enough times we assigned. <code>SProp</code> is born in time!</p>\n<p>For example, If you want to test a sorted function and want to test it 20 times with test cases increasing gradually. You can choose <code>SProp</code>, you can refer following code:<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.prop.sgen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.scalatest.<span class=\"type\">FlatSpec</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> prop.gen._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SPropFixedStepSpec</span> <span class=\"keyword\">extends</span> <span class=\"title\">FlatSpec</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"string\">\"test SProp with sorted function by fixed step increasing\"</span> should <span class=\"string\">\"success\"</span> in &#123;</span><br><span class=\"line\">    <span class=\"comment\">// geneate a list with random size whose element is random</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> g = <span class=\"type\">Gen</span>.listOfN(<span class=\"type\">Gen</span>.choose(<span class=\"number\">100</span>, <span class=\"number\">200</span>), <span class=\"type\">Gen</span>.choose(<span class=\"number\">300</span>, <span class=\"number\">400</span>))</span><br><span class=\"line\">    <span class=\"comment\">// conver Gen into SGen, it is very simply</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> sg = g.unsized</span><br><span class=\"line\">    <span class=\"comment\">// similar with Prop.forAll, just return a boolean result</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"type\">SProp</span>.forAll(sg) &#123; r =&gt;</span><br><span class=\"line\">      <span class=\"keyword\">val</span> s = r.sorted</span><br><span class=\"line\">      <span class=\"keyword\">val</span> h = s.headOption</span><br><span class=\"line\">      h.map(rs =&gt; !r.exists(_ &lt; rs)).getOrElse(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// run the checked function</span></span><br><span class=\"line\">    assert(</span><br><span class=\"line\">      p.test(</span><br><span class=\"line\">        <span class=\"comment\">// the minimal test cases will be run first</span></span><br><span class=\"line\">        minTestCase = <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"comment\">// the step the test cases will increase by</span></span><br><span class=\"line\">        step = <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"comment\">// how many time the function will be run</span></span><br><span class=\"line\">        testTimes = <span class=\"number\">20</span>,</span><br><span class=\"line\">        <span class=\"comment\">// whether use random step</span></span><br><span class=\"line\">        randomStep = <span class=\"literal\">false</span></span><br><span class=\"line\">      ))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The function will take 10 test cases first, then increase test cases by step 1 unitl it run 20 times. In this way, it will reduce testing fortuity.</p>\n<p>But sometimes, fixed step could be stiff, So we also prepare a random step between 1 and n which you assigned. You just need<br>assign <code>randomStep=true</code>, we will genereate random step between 1 and <code>n</code></p>\n<p>We has give some default parameters to <code>test</code> function, So you can not pass any parameters to <code>test</code> function.</p>\n<h2 id=\"Bugs\"><a href=\"#Bugs\" class=\"headerlink\" title=\"Bugs\"></a>Bugs</h2><p>The <code>Gen</code> is so easy and elegant, but it has some bugs:<br>If you want to test <code>Gen.listOfN</code> with a big size list, it will throw <code>stack overflow</code>. The tempoary  solution is you can increase stack size by jvm prameters with <code>-Xss500M</code>. You can write it in a file named <code>.jvmopts</code> in sbt project root directory.</p>\n<p>I will try to fix it in the future!</p>\n<h2 id=\"How-to-Get\"><a href=\"#How-to-Get\" class=\"headerlink\" title=\"How to Get\"></a>How to Get</h2><p>You can add following code in your build.sbt file to get it:<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://mvnrepository.com/artifact/com.github.knewhow/scalaprop</span></span><br><span class=\"line\">libraryDependencies += <span class=\"string\">\"com.github.knewhow\"</span> %% <span class=\"string\">\"scalaprop\"</span> % <span class=\"string\">\"1.0\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Touch-Me\"><a href=\"#Touch-Me\" class=\"headerlink\" title=\"Touch Me\"></a>Touch Me</h2><p>The project Github address is: <a href=\"https://github.com/KnewHow/ScalaProp\" target=\"_blank\" rel=\"noopener\">https://github.com/KnewHow/ScalaProp</a>, If you has some problems about it or you hava a better solution, you could touch me by email for help or give issues. Thank you!</p>\n","site":{"data":{}},"excerpt":"<p>Scala-tes-prop provides test cases generator then run test function with them. Finally it will println test result information and return a boolean value to tell you test result which can be asserted by scala test. Now, let’t see how to use it!</p>\n<h2 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h2><p>Generator is basic component in scala-test-prop, which can generate test cases you want. For example, if you want to get a range integer, you see following code:<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> prop.gen.<span class=\"type\">Gen</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// return a Gen[Int] with integer range in (1,10), but the range exclusive 10</span></span><br><span class=\"line\"><span class=\"type\">Gen</span>.choose(<span class=\"number\">1</span>, <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure></p>\n<p>It also can generate other generator, such as <code>Gen.odd(10,100)</code>, <code>Gen.listOf(10, Gen.choose(10,100))</code>. The first function will return random odd integer from 10 to 100, but inclusive 100. The second function will return a list with 10 size whose<br>elements range is between 10 and 100 but exclusive 100. You can find more in <a href=\"https://github.com/KnewHow/ScalaProp/blob/master/src/main/scala/prop/Gen.scala\" target=\"_blank\" rel=\"noopener\">Object Gen</a><br>","more":"</p>\n<h2 id=\"Executor\"><a href=\"#Executor\" class=\"headerlink\" title=\"Executor\"></a>Executor</h2><p>Now, you have knew how to obtain a generator, but how to run testing function with them? The Executor match to <code>Gen</code> is <code>Prop</code>. <code>Prop</code> is running parameters to testing result container. You can do <code>&amp;&amp;</code> or <code>||</code> with two <code>Prop</code>, the implement you can refer: <a href=\"https://github.com/KnewHow/ScalaProp/blob/master/src/main/scala/prop/Prop.scala\" target=\"_blank\" rel=\"noopener\">https://github.com/KnewHow/ScalaProp/blob/master/src/main/scala/prop/Prop.scala</a></p>\n<p>You can call <code>Prop.test(n,rng)</code> to get test result. The first parameter is how many test cases will be taken to test. The second parameter is random number generator. You can get it by <code>RNG.get</code>. We have provided some default value to make you use it eaisily.</p>\n<p>If you want to test a sorted function, you can generate a <code>Gen[List[A]]</code> first, then test it by <code>Prop</code>, you can refer following code:<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.prop.gen</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.scalatest.<span class=\"type\">FlatSpec</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> prop.gen._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListOfFixedSizeSpec</span> <span class=\"keyword\">extends</span> <span class=\"title\">FlatSpec</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"string\">\"test listOf with fixed size\"</span> should <span class=\"string\">\"success\"</span> in &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Generate list with 20 size whose element is between 10 and 100</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> g = <span class=\"type\">Gen</span>.listOfN(<span class=\"number\">20</span>, <span class=\"type\">Gen</span>.choose(<span class=\"number\">10</span>, <span class=\"number\">100</span>))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"type\">Prop</span>.forAll(g) &#123; r =&gt;</span><br><span class=\"line\">      <span class=\"comment\">// Writing what you want to test, make sure it last result is boolean.</span></span><br><span class=\"line\">      <span class=\"keyword\">val</span> s = r.sorted</span><br><span class=\"line\">      <span class=\"keyword\">val</span> h = s.headOption</span><br><span class=\"line\">      h.map(rs =&gt; !r.exists(_ &lt; rs)).getOrElse(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// In default, test function will run checked function with 10 test cases.</span></span><br><span class=\"line\">    assert(p.test())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Because test function return a boolean value, if the value is true, representing the all test cases passed, you can combine it with scala-test assert. At same time, <code>Prop.test</code> also println some test information in console. If all test cases passed, it will print <code>[info] OK, 10 testcases passed</code>, otherwise will print <code>[error] test case failure, case by...,But success n times</code>.</p>\n<p>you can also generate a list with random size by <code>Gen.listOfN(Gen.choose(10, 20), Gen.choose(10, 100))</code>.</p>\n<h2 id=\"Incremental-Testing\"><a href=\"#Incremental-Testing\" class=\"headerlink\" title=\"Incremental Testing\"></a>Incremental Testing</h2><p>Sometimes, once or twice testing don’t test whether a bug in checked function. We may want a test way, which can increase the test cases gradually until run enough times we assigned. <code>SProp</code> is born in time!</p>\n<p>For example, If you want to test a sorted function and want to test it 20 times with test cases increasing gradually. You can choose <code>SProp</code>, you can refer following code:<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test.prop.sgen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.scalatest.<span class=\"type\">FlatSpec</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> prop.gen._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SPropFixedStepSpec</span> <span class=\"keyword\">extends</span> <span class=\"title\">FlatSpec</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"string\">\"test SProp with sorted function by fixed step increasing\"</span> should <span class=\"string\">\"success\"</span> in &#123;</span><br><span class=\"line\">    <span class=\"comment\">// geneate a list with random size whose element is random</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> g = <span class=\"type\">Gen</span>.listOfN(<span class=\"type\">Gen</span>.choose(<span class=\"number\">100</span>, <span class=\"number\">200</span>), <span class=\"type\">Gen</span>.choose(<span class=\"number\">300</span>, <span class=\"number\">400</span>))</span><br><span class=\"line\">    <span class=\"comment\">// conver Gen into SGen, it is very simply</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> sg = g.unsized</span><br><span class=\"line\">    <span class=\"comment\">// similar with Prop.forAll, just return a boolean result</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"type\">SProp</span>.forAll(sg) &#123; r =&gt;</span><br><span class=\"line\">      <span class=\"keyword\">val</span> s = r.sorted</span><br><span class=\"line\">      <span class=\"keyword\">val</span> h = s.headOption</span><br><span class=\"line\">      h.map(rs =&gt; !r.exists(_ &lt; rs)).getOrElse(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// run the checked function</span></span><br><span class=\"line\">    assert(</span><br><span class=\"line\">      p.test(</span><br><span class=\"line\">        <span class=\"comment\">// the minimal test cases will be run first</span></span><br><span class=\"line\">        minTestCase = <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"comment\">// the step the test cases will increase by</span></span><br><span class=\"line\">        step = <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"comment\">// how many time the function will be run</span></span><br><span class=\"line\">        testTimes = <span class=\"number\">20</span>,</span><br><span class=\"line\">        <span class=\"comment\">// whether use random step</span></span><br><span class=\"line\">        randomStep = <span class=\"literal\">false</span></span><br><span class=\"line\">      ))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The function will take 10 test cases first, then increase test cases by step 1 unitl it run 20 times. In this way, it will reduce testing fortuity.</p>\n<p>But sometimes, fixed step could be stiff, So we also prepare a random step between 1 and n which you assigned. You just need<br>assign <code>randomStep=true</code>, we will genereate random step between 1 and <code>n</code></p>\n<p>We has give some default parameters to <code>test</code> function, So you can not pass any parameters to <code>test</code> function.</p>\n<h2 id=\"Bugs\"><a href=\"#Bugs\" class=\"headerlink\" title=\"Bugs\"></a>Bugs</h2><p>The <code>Gen</code> is so easy and elegant, but it has some bugs:<br>If you want to test <code>Gen.listOfN</code> with a big size list, it will throw <code>stack overflow</code>. The tempoary  solution is you can increase stack size by jvm prameters with <code>-Xss500M</code>. You can write it in a file named <code>.jvmopts</code> in sbt project root directory.</p>\n<p>I will try to fix it in the future!</p>\n<h2 id=\"How-to-Get\"><a href=\"#How-to-Get\" class=\"headerlink\" title=\"How to Get\"></a>How to Get</h2><p>You can add following code in your build.sbt file to get it:<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://mvnrepository.com/artifact/com.github.knewhow/scalaprop</span></span><br><span class=\"line\">libraryDependencies += <span class=\"string\">\"com.github.knewhow\"</span> %% <span class=\"string\">\"scalaprop\"</span> % <span class=\"string\">\"1.0\"</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Touch-Me\"><a href=\"#Touch-Me\" class=\"headerlink\" title=\"Touch Me\"></a>Touch Me</h2><p>The project Github address is: <a href=\"https://github.com/KnewHow/ScalaProp\" target=\"_blank\" rel=\"noopener\">https://github.com/KnewHow/ScalaProp</a>, If you has some problems about it or you hava a better solution, you could touch me by email for help or give issues. Thank you!</p>"},{"title":"Scala 高等类型——你就是你","date":"2018-10-21T16:00:00.000Z","_content":"\n# Java List 的一个设计缺陷\n在 Java 中，`ArrayList`是我们常用的一个容器，它有一个方法，`subList(int fromIndex, int toIndex)` 可以获取到一个该 list 的一个子序列。我们可以使用如下的代码来测试它：\n```Java\n@Test\npublic void subListSpec() {\n    ArrayList<Integer> a = new ArrayList<Integer>();\n    a.add(1);\n    a.add(2);\n    ArrayList<Integer> r = (ArrayList<Integer>) a.subList(0, 1);\n    assertEquals(r, new ArrayList<Integer>().add(2));\n}\n```\n然后我们运行上述代码，竟然会报错了(JDK 版本为1.8，操作系统为 Ubuntu 16.04):\n```Java\njava.lang.ClassCastException: java.util.ArrayList$SubList cannot be cast to java.util.ArrayList\n```\n其实上面的代码在设计上就有一点小问题：\n* 对于`ArrayList[A]`来说，它的`subList`方法返回的竟然是`List[A]`类型。 这个让人感觉到有点诧异，一个对象的`subValue`难道不应该是自身类型吗？ 就像`String`对象调用`substring(b,e)`方法返回的应该是`String`对象本身的类型。\n* 强制转换`List[A]`类型为`ArrayList[A]`导致运行期抛出异常。\n","source":"_posts/2018/10/scala-Highter-kind-type.md","raw":"---\ntitle: Scala 高等类型——你就是你\ndate: 2018/10/22\ncategories: 编程语言\ntags:\n- Scala\n- 知原理\n---\n\n# Java List 的一个设计缺陷\n在 Java 中，`ArrayList`是我们常用的一个容器，它有一个方法，`subList(int fromIndex, int toIndex)` 可以获取到一个该 list 的一个子序列。我们可以使用如下的代码来测试它：\n```Java\n@Test\npublic void subListSpec() {\n    ArrayList<Integer> a = new ArrayList<Integer>();\n    a.add(1);\n    a.add(2);\n    ArrayList<Integer> r = (ArrayList<Integer>) a.subList(0, 1);\n    assertEquals(r, new ArrayList<Integer>().add(2));\n}\n```\n然后我们运行上述代码，竟然会报错了(JDK 版本为1.8，操作系统为 Ubuntu 16.04):\n```Java\njava.lang.ClassCastException: java.util.ArrayList$SubList cannot be cast to java.util.ArrayList\n```\n其实上面的代码在设计上就有一点小问题：\n* 对于`ArrayList[A]`来说，它的`subList`方法返回的竟然是`List[A]`类型。 这个让人感觉到有点诧异，一个对象的`subValue`难道不应该是自身类型吗？ 就像`String`对象调用`substring(b,e)`方法返回的应该是`String`对象本身的类型。\n* 强制转换`List[A]`类型为`ArrayList[A]`导致运行期抛出异常。\n","slug":"2018/10/scala-Highter-kind-type","published":1,"updated":"2018-10-22T23:54:19.051Z","_id":"cjnkdcpnd0010mc55x0gn6pp6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Java-List-的一个设计缺陷\"><a href=\"#Java-List-的一个设计缺陷\" class=\"headerlink\" title=\"Java List 的一个设计缺陷\"></a>Java List 的一个设计缺陷</h1><p>在 Java 中，<code>ArrayList</code>是我们常用的一个容器，它有一个方法，<code>subList(int fromIndex, int toIndex)</code> 可以获取到一个该 list 的一个子序列。我们可以使用如下的代码来测试它：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subListSpec</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; a = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">    a.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">    a.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; r = (ArrayList&lt;Integer&gt;) a.subList(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    assertEquals(r, <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;().add(<span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后我们运行上述代码，竟然会报错了(JDK 版本为1.8，操作系统为 Ubuntu 16.04):<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.ClassCastException: java.util.ArrayList$SubList cannot be cast to java.util.ArrayList</span><br></pre></td></tr></table></figure></p>\n<p>其实上面的代码在设计上就有一点小问题：</p>\n<ul>\n<li>对于<code>ArrayList[A]</code>来说，它的<code>subList</code>方法返回的竟然是<code>List[A]</code>类型。 这个让人感觉到有点诧异，一个对象的<code>subValue</code>难道不应该是自身类型吗？ 就像<code>String</code>对象调用<code>substring(b,e)</code>方法返回的应该是<code>String</code>对象本身的类型。</li>\n<li>强制转换<code>List[A]</code>类型为<code>ArrayList[A]</code>导致运行期抛出异常。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java-List-的一个设计缺陷\"><a href=\"#Java-List-的一个设计缺陷\" class=\"headerlink\" title=\"Java List 的一个设计缺陷\"></a>Java List 的一个设计缺陷</h1><p>在 Java 中，<code>ArrayList</code>是我们常用的一个容器，它有一个方法，<code>subList(int fromIndex, int toIndex)</code> 可以获取到一个该 list 的一个子序列。我们可以使用如下的代码来测试它：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subListSpec</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; a = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">    a.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">    a.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; r = (ArrayList&lt;Integer&gt;) a.subList(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    assertEquals(r, <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;().add(<span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后我们运行上述代码，竟然会报错了(JDK 版本为1.8，操作系统为 Ubuntu 16.04):<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.ClassCastException: java.util.ArrayList$SubList cannot be cast to java.util.ArrayList</span><br></pre></td></tr></table></figure></p>\n<p>其实上面的代码在设计上就有一点小问题：</p>\n<ul>\n<li>对于<code>ArrayList[A]</code>来说，它的<code>subList</code>方法返回的竟然是<code>List[A]</code>类型。 这个让人感觉到有点诧异，一个对象的<code>subValue</code>难道不应该是自身类型吗？ 就像<code>String</code>对象调用<code>substring(b,e)</code>方法返回的应该是<code>String</code>对象本身的类型。</li>\n<li>强制转换<code>List[A]</code>类型为<code>ArrayList[A]</code>导致运行期抛出异常。</li>\n</ul>\n"},{"title":"后端工程师入门前端页面重构（二）：心法 I","date":"2018-01-04T16:00:00.000Z","_content":"\n上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：\n\n**从左到右，从上到下，化整为零。**\n\n那么在接下来的几篇文章中，我们就来聊聊页面布局的「心法」和一些具体的「招式」。\n\n那么什么是心法呢？\n\n<!-- more -->\n\n如果说口诀是页面布局的原则，那么心法就是对页面布局中一些重要概念的认识。\n\n在上一篇文章，我们一直推荐使用高效的浮动布局，类似大家都玩过的磁铁，在磁铁的周围，所有的铁块会被磁铁所吸引。\n\n那么浮动就好比页面上的一块磁铁，它会吸引页面上的元素块，让它们朝一个方向进行组合、包含、交叠，进而完成整个页面的布局。\n\n下面就让我们来看看页面中元素有什么类型。\n\n## HTML 块状元素和行内元素\n\n在我们熟知的页面布局中，网页的标题，logo等都是有高度和宽度的。我们来看下面的豆瓣首页的切图：\n\n![豆瓣首页切图](/image/back-2-font-xinfa-1/douban-index.png)\n\n在上面的图片中，我们使用红色的线条和文字标注豆瓣 logo 的高度和宽度。不仅仅是 logo 图有高度和宽度，搜索框，热搜主题等其它元素，几乎都有高度和宽度。\n\n那么在 HTML 语言中，我们如何指定元素的高度和宽度呢？\n\n我们先来写一段 HTML：\n\n```html\n<div>这是 div 标签里面的内容</div>\n<span>这是 span 标签的内容</span>\n```\n\n然后给它们定义样式：\n\n```css\ndiv {\n  background-color: red;\n  height: 100px;\n  width: 100px;\n}\nspan {\n  background-color: green;\n  height: 100px;\n  width: 100px;\n```\n\n效果如下：\n\n![效果图](/image/back-2-font-xinfa-1/html-css-show.png)\n\n发现一个问题：\n\n**我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？**\n\n\n其实在 HTML 中，我们可以把标签分为「块状元素」和「行内元素」，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。\n\n那么这两类元素有什么区别呢？\n\n从我们的代码的效果图里面我们已经看出来一个区别了：**块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。**\n\n我们把上面元素的宽度和高度都删除，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。\n\n![效果图](/image/back-2-font-xinfa-1/block-inline-elemet.png)\n\n是不是又看出来一个区别呢？\n\n**块状元素是独占一行的，而行内元素只占本身内容的大小。**\n\n看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。\n\n![效果图](/image/back-2-font-xinfa-1/block-element.jpg)\n\n**即使我们设置了块状元素的高度和宽度，它还是独占一行的**。真的是霸道啊！\n\n然而，现实中的网页（如豆瓣），很多内容块都是拼接的，如果我们使用块状元素来表示这些内容块，如果消除它独占一行的情况呢？\n\n\n关于这个问题，似乎有两种解决方案。\n\n\n### inline-block\n\n其实在 css 的 diplay 属性中，有一个属性值 `inline-block` 可以将标签呈现出「块状元素」和「行内元素」之间的中间态，即它可以拥有宽高度的同时，也可以具备行内元素的占位属性。\n\n```html\n<div>123</div>\n<div>123</div>\n```\n\n然后给它们定义样式：\n\n```css\ndiv {\n    background-color: red;\n    display: inline-block;\n}\n```\n\n看效果：\n![行内元素误差效果显示](/image/back-2-font-xinfa-1/inline-element-error.png)\n\n我们发现**虽然两个 div 可以变成行内元素在一行显示，但是它们之间还是存在空白，不能完美的相邻在一起。这点空白会让我们的布局很不美观！**\n\n### 浮动\n上面我们说了，浮动可以把页面上的元素往某一个方向吸引，那么如何吸引呢？\n在 CSS 中，我们可以通过 `float:left` 把元素往左边吸引\n\n```html\n<div style=\"background-color: red\">这是第一个区块</div>\n<div style=\"background-color: green\">这是第二个区块</div>\n```\n\n使用浮动：\n\n```css\ndiv {\n    width: 200px;\n    height: 200px;\n    float: left;\n}\n```\n看效果：\n\n![简单浮动效果图](/image/back-2-font-xinfa-1/float-layout-show-1.png)\n\n我们发现，通过浮动，可以使两个原本很难相邻在一起的块状元素，**完美** 的相邻在一起。\n\n使用 `left` 是把元素往左边吸引，而 `right` 是把元素往右边吸引。\n\n那么当浮动和元素嵌套结合会发生什么呢？\n\n## 父元素高度\n在页面布局中，元素嵌套使用是非常常见的，如下面的代码。\n```html\n<div class=\"parent\">\n  <div class=\"child1\">\n    first child\n  </div>\n</div>\n```\n```css\n.child1 {\n  background-color: red;\n}\n```\n![](/image/back-2-font-xinfa-1/first-child.png)\n此时，子元素的高度是**自适应的**，也就是当前浏览器显示的文字高度，如果对页面进行缩放，子元素高度就会变化。\n\n而父元素包含着子元素，而且父元素里面没有其它元素，因此父元素的高度等于子元素的高度。\n\n我们也可以使用 `height `来设置子元素的高度，让它不自适应。\n\n在实际开发中，经常需要使用一个父元素嵌套一些浮动元素，现在我们就来设置子元素为浮动元素。\n\n```css\n.child1 {\n  background-color: red;\n  float: left;\n  height: 100px;\n}\n```\n![](/image/back-2-font-xinfa-1/child1-float.png)\n\n我们发现父元素的高度竟然变成了０。\n\n我们尝试再添加一个**非浮动**的子元素时，我们发现，父元素的高度等于第二个非浮动子元素的高度，完全忽视了第一个浮动子元素的存在。\n\n```html\n<div class=\"child2\">\n  second child\n</div>\n```\n\n```css\n.child2 {\n  background-color: green;\n  height: 50px;\n}\n```\n![](/image/back-2-font-xinfa-1/parent-child2.png)\n\n而当我们把第二个子元素设置为浮动的时候，父元素的高度又再度变成了０。\n\n按照上面的方法，添加第三个元素的时候，效果也是相同的。\n\n通过上面的例子，我们可以得出一个结论：**父元素的高度由最后一个非浮动子元素的占位空间所决定。**\n\n但是在页面布局中，**浮动布局的占位空间**往往是我们理想的容器父元素的高度，那么我们如何解决这个问题呢？\n\n## 清除浮动\n使用**清除浮动**就可以解决上面的问题，具体的做法是在父元素的最后添加一个空的元素，并在设置它为清除浮动。\n\n```html\n<div class=\"child3\">\n</div>\n```\n```css\n.child3 {\n  clear: left;\n}\n```\n\n![](/image/back-2-font-xinfa-1/clear-float-1.png)\n\n我们发现父元素的高度等于浮动元素的占位空间。\n\n\n `clear: left;` 就是让左浮动元素持有占位空间\n\n让我们再来拓展一下，`clear` 除了可以设置为 `left`，还可以设置为 `right` 和 `both`。\n\n`right` 就是让右浮动元素持有占位空间。\n\n`both` 就是让两边的浮动元素都持有占位空间。\n\n### 浮动布局--最佳实践\n\n在上面的代码中，我们是直接手动的在父元素最后添加空元素。那么能不能有一种方法，可以自动的帮我们添加元素并在设置清除浮动呢？\n\n回答是肯定的！\n\n在 CSS 中，我们可以使用 「after 选择器」 来实现添加元素，并且设置属性，具体的用法可以参考:[W3C after 选择器](http://www.w3school.com.cn/cssref/selector_after.asp)\n\n下面直接给出代码： \n\n```css\n.clearfix:after {\n  content: \" \";\n  display: block;\n  clear: both;\n  height: 0;\n}\n.clearfix {\n  zoom: 1;\n}\n```   \n\n- 在IE6, 7下 `zoom: 1` 会触发 hasLayout，从而使元素闭合内部的浮动。\n\n- 在标准浏览器下，`.clearfix:after` 这个伪类会在应用到 `.clearfix` 的元素后面插入一个 `clear: both` 的块级元素，从而达到清除浮动的作用。     \n\n只要父元素引用了这个 class，就可以自动的实现清除浮动，再也不用担心高度和子元素的占位问题了。\n\n## 心法小结\n最后，我们再来回顾一下文章介绍的一些心法：\n\n**1. HTML 分为块状元素和行内元素的，块状元素是独占一行的**\n\n**2. 浮动布局相对行内元素的布局，往往更利于精确计算间距**\n\n**3. 默认情况下，父元素的高度由最后一个非浮动子元素的占位空间所决定**\n\n**4. 浮动布局的占位空间往往是我们理想的容器父元素的高度**\n\n**5. 清除浮动可以解决浮动元素的占位空间问题**\n\n文章中的一些招式可能说的太粗糙，先不用捉急，我们先学心法，招式到后面再专门的学习。\n\n我会在下一篇博文继续介绍心法 II。\n\n","source":"_posts/2017/12/back-2-font-xinfa-1.md","raw":"\n---\ntitle: 后端工程师入门前端页面重构（二）：心法 I\ndate: 2018/01/05\ncategories: 前端页面重构系列\ntags:\n- 前端\n---\n\n上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：\n\n**从左到右，从上到下，化整为零。**\n\n那么在接下来的几篇文章中，我们就来聊聊页面布局的「心法」和一些具体的「招式」。\n\n那么什么是心法呢？\n\n<!-- more -->\n\n如果说口诀是页面布局的原则，那么心法就是对页面布局中一些重要概念的认识。\n\n在上一篇文章，我们一直推荐使用高效的浮动布局，类似大家都玩过的磁铁，在磁铁的周围，所有的铁块会被磁铁所吸引。\n\n那么浮动就好比页面上的一块磁铁，它会吸引页面上的元素块，让它们朝一个方向进行组合、包含、交叠，进而完成整个页面的布局。\n\n下面就让我们来看看页面中元素有什么类型。\n\n## HTML 块状元素和行内元素\n\n在我们熟知的页面布局中，网页的标题，logo等都是有高度和宽度的。我们来看下面的豆瓣首页的切图：\n\n![豆瓣首页切图](/image/back-2-font-xinfa-1/douban-index.png)\n\n在上面的图片中，我们使用红色的线条和文字标注豆瓣 logo 的高度和宽度。不仅仅是 logo 图有高度和宽度，搜索框，热搜主题等其它元素，几乎都有高度和宽度。\n\n那么在 HTML 语言中，我们如何指定元素的高度和宽度呢？\n\n我们先来写一段 HTML：\n\n```html\n<div>这是 div 标签里面的内容</div>\n<span>这是 span 标签的内容</span>\n```\n\n然后给它们定义样式：\n\n```css\ndiv {\n  background-color: red;\n  height: 100px;\n  width: 100px;\n}\nspan {\n  background-color: green;\n  height: 100px;\n  width: 100px;\n```\n\n效果如下：\n\n![效果图](/image/back-2-font-xinfa-1/html-css-show.png)\n\n发现一个问题：\n\n**我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？**\n\n\n其实在 HTML 中，我们可以把标签分为「块状元素」和「行内元素」，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。\n\n那么这两类元素有什么区别呢？\n\n从我们的代码的效果图里面我们已经看出来一个区别了：**块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。**\n\n我们把上面元素的宽度和高度都删除，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。\n\n![效果图](/image/back-2-font-xinfa-1/block-inline-elemet.png)\n\n是不是又看出来一个区别呢？\n\n**块状元素是独占一行的，而行内元素只占本身内容的大小。**\n\n看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。\n\n![效果图](/image/back-2-font-xinfa-1/block-element.jpg)\n\n**即使我们设置了块状元素的高度和宽度，它还是独占一行的**。真的是霸道啊！\n\n然而，现实中的网页（如豆瓣），很多内容块都是拼接的，如果我们使用块状元素来表示这些内容块，如果消除它独占一行的情况呢？\n\n\n关于这个问题，似乎有两种解决方案。\n\n\n### inline-block\n\n其实在 css 的 diplay 属性中，有一个属性值 `inline-block` 可以将标签呈现出「块状元素」和「行内元素」之间的中间态，即它可以拥有宽高度的同时，也可以具备行内元素的占位属性。\n\n```html\n<div>123</div>\n<div>123</div>\n```\n\n然后给它们定义样式：\n\n```css\ndiv {\n    background-color: red;\n    display: inline-block;\n}\n```\n\n看效果：\n![行内元素误差效果显示](/image/back-2-font-xinfa-1/inline-element-error.png)\n\n我们发现**虽然两个 div 可以变成行内元素在一行显示，但是它们之间还是存在空白，不能完美的相邻在一起。这点空白会让我们的布局很不美观！**\n\n### 浮动\n上面我们说了，浮动可以把页面上的元素往某一个方向吸引，那么如何吸引呢？\n在 CSS 中，我们可以通过 `float:left` 把元素往左边吸引\n\n```html\n<div style=\"background-color: red\">这是第一个区块</div>\n<div style=\"background-color: green\">这是第二个区块</div>\n```\n\n使用浮动：\n\n```css\ndiv {\n    width: 200px;\n    height: 200px;\n    float: left;\n}\n```\n看效果：\n\n![简单浮动效果图](/image/back-2-font-xinfa-1/float-layout-show-1.png)\n\n我们发现，通过浮动，可以使两个原本很难相邻在一起的块状元素，**完美** 的相邻在一起。\n\n使用 `left` 是把元素往左边吸引，而 `right` 是把元素往右边吸引。\n\n那么当浮动和元素嵌套结合会发生什么呢？\n\n## 父元素高度\n在页面布局中，元素嵌套使用是非常常见的，如下面的代码。\n```html\n<div class=\"parent\">\n  <div class=\"child1\">\n    first child\n  </div>\n</div>\n```\n```css\n.child1 {\n  background-color: red;\n}\n```\n![](/image/back-2-font-xinfa-1/first-child.png)\n此时，子元素的高度是**自适应的**，也就是当前浏览器显示的文字高度，如果对页面进行缩放，子元素高度就会变化。\n\n而父元素包含着子元素，而且父元素里面没有其它元素，因此父元素的高度等于子元素的高度。\n\n我们也可以使用 `height `来设置子元素的高度，让它不自适应。\n\n在实际开发中，经常需要使用一个父元素嵌套一些浮动元素，现在我们就来设置子元素为浮动元素。\n\n```css\n.child1 {\n  background-color: red;\n  float: left;\n  height: 100px;\n}\n```\n![](/image/back-2-font-xinfa-1/child1-float.png)\n\n我们发现父元素的高度竟然变成了０。\n\n我们尝试再添加一个**非浮动**的子元素时，我们发现，父元素的高度等于第二个非浮动子元素的高度，完全忽视了第一个浮动子元素的存在。\n\n```html\n<div class=\"child2\">\n  second child\n</div>\n```\n\n```css\n.child2 {\n  background-color: green;\n  height: 50px;\n}\n```\n![](/image/back-2-font-xinfa-1/parent-child2.png)\n\n而当我们把第二个子元素设置为浮动的时候，父元素的高度又再度变成了０。\n\n按照上面的方法，添加第三个元素的时候，效果也是相同的。\n\n通过上面的例子，我们可以得出一个结论：**父元素的高度由最后一个非浮动子元素的占位空间所决定。**\n\n但是在页面布局中，**浮动布局的占位空间**往往是我们理想的容器父元素的高度，那么我们如何解决这个问题呢？\n\n## 清除浮动\n使用**清除浮动**就可以解决上面的问题，具体的做法是在父元素的最后添加一个空的元素，并在设置它为清除浮动。\n\n```html\n<div class=\"child3\">\n</div>\n```\n```css\n.child3 {\n  clear: left;\n}\n```\n\n![](/image/back-2-font-xinfa-1/clear-float-1.png)\n\n我们发现父元素的高度等于浮动元素的占位空间。\n\n\n `clear: left;` 就是让左浮动元素持有占位空间\n\n让我们再来拓展一下，`clear` 除了可以设置为 `left`，还可以设置为 `right` 和 `both`。\n\n`right` 就是让右浮动元素持有占位空间。\n\n`both` 就是让两边的浮动元素都持有占位空间。\n\n### 浮动布局--最佳实践\n\n在上面的代码中，我们是直接手动的在父元素最后添加空元素。那么能不能有一种方法，可以自动的帮我们添加元素并在设置清除浮动呢？\n\n回答是肯定的！\n\n在 CSS 中，我们可以使用 「after 选择器」 来实现添加元素，并且设置属性，具体的用法可以参考:[W3C after 选择器](http://www.w3school.com.cn/cssref/selector_after.asp)\n\n下面直接给出代码： \n\n```css\n.clearfix:after {\n  content: \" \";\n  display: block;\n  clear: both;\n  height: 0;\n}\n.clearfix {\n  zoom: 1;\n}\n```   \n\n- 在IE6, 7下 `zoom: 1` 会触发 hasLayout，从而使元素闭合内部的浮动。\n\n- 在标准浏览器下，`.clearfix:after` 这个伪类会在应用到 `.clearfix` 的元素后面插入一个 `clear: both` 的块级元素，从而达到清除浮动的作用。     \n\n只要父元素引用了这个 class，就可以自动的实现清除浮动，再也不用担心高度和子元素的占位问题了。\n\n## 心法小结\n最后，我们再来回顾一下文章介绍的一些心法：\n\n**1. HTML 分为块状元素和行内元素的，块状元素是独占一行的**\n\n**2. 浮动布局相对行内元素的布局，往往更利于精确计算间距**\n\n**3. 默认情况下，父元素的高度由最后一个非浮动子元素的占位空间所决定**\n\n**4. 浮动布局的占位空间往往是我们理想的容器父元素的高度**\n\n**5. 清除浮动可以解决浮动元素的占位空间问题**\n\n文章中的一些招式可能说的太粗糙，先不用捉急，我们先学心法，招式到后面再专门的学习。\n\n我会在下一篇博文继续介绍心法 II。\n\n","slug":"2017/12/back-2-font-xinfa-1","published":1,"updated":"2018-02-18T08:12:37.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpnf0014mc55w23dcez2","content":"<p>上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：</p>\n<p><strong>从左到右，从上到下，化整为零。</strong></p>\n<p>那么在接下来的几篇文章中，我们就来聊聊页面布局的「心法」和一些具体的「招式」。</p>\n<p>那么什么是心法呢？</p>\n<a id=\"more\"></a>\n<p>如果说口诀是页面布局的原则，那么心法就是对页面布局中一些重要概念的认识。</p>\n<p>在上一篇文章，我们一直推荐使用高效的浮动布局，类似大家都玩过的磁铁，在磁铁的周围，所有的铁块会被磁铁所吸引。</p>\n<p>那么浮动就好比页面上的一块磁铁，它会吸引页面上的元素块，让它们朝一个方向进行组合、包含、交叠，进而完成整个页面的布局。</p>\n<p>下面就让我们来看看页面中元素有什么类型。</p>\n<h2 id=\"HTML-块状元素和行内元素\"><a href=\"#HTML-块状元素和行内元素\" class=\"headerlink\" title=\"HTML 块状元素和行内元素\"></a>HTML 块状元素和行内元素</h2><p>在我们熟知的页面布局中，网页的标题，logo等都是有高度和宽度的。我们来看下面的豆瓣首页的切图：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-index.png\" alt=\"豆瓣首页切图\"></p>\n<p>在上面的图片中，我们使用红色的线条和文字标注豆瓣 logo 的高度和宽度。不仅仅是 logo 图有高度和宽度，搜索框，热搜主题等其它元素，几乎都有高度和宽度。</p>\n<p>那么在 HTML 语言中，我们如何指定元素的高度和宽度呢？</p>\n<p>我们先来写一段 HTML：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这是 div 标签里面的内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是 span 标签的内容<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后给它们定义样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/html-css-show.png\" alt=\"效果图\"></p>\n<p>发现一个问题：</p>\n<p><strong>我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？</strong></p>\n<p>其实在 HTML 中，我们可以把标签分为「块状元素」和「行内元素」，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。</p>\n<p>那么这两类元素有什么区别呢？</p>\n<p>从我们的代码的效果图里面我们已经看出来一个区别了：<strong>块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。</strong></p>\n<p>我们把上面元素的宽度和高度都删除，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-inline-elemet.png\" alt=\"效果图\"></p>\n<p>是不是又看出来一个区别呢？</p>\n<p><strong>块状元素是独占一行的，而行内元素只占本身内容的大小。</strong></p>\n<p>看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-element.jpg\" alt=\"效果图\"></p>\n<p><strong>即使我们设置了块状元素的高度和宽度，它还是独占一行的</strong>。真的是霸道啊！</p>\n<p>然而，现实中的网页（如豆瓣），很多内容块都是拼接的，如果我们使用块状元素来表示这些内容块，如果消除它独占一行的情况呢？</p>\n<p>关于这个问题，似乎有两种解决方案。</p>\n<h3 id=\"inline-block\"><a href=\"#inline-block\" class=\"headerlink\" title=\"inline-block\"></a>inline-block</h3><p>其实在 css 的 diplay 属性中，有一个属性值 <code>inline-block</code> 可以将标签呈现出「块状元素」和「行内元素」之间的中间态，即它可以拥有宽高度的同时，也可以具备行内元素的占位属性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后给它们定义样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看效果：<br><img src=\"/image/back-2-font-xinfa-1/inline-element-error.png\" alt=\"行内元素误差效果显示\"></p>\n<p>我们发现<strong>虽然两个 div 可以变成行内元素在一行显示，但是它们之间还是存在空白，不能完美的相邻在一起。这点空白会让我们的布局很不美观！</strong></p>\n<h3 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h3><p>上面我们说了，浮动可以把页面上的元素往某一个方向吸引，那么如何吸引呢？<br>在 CSS 中，我们可以通过 <code>float:left</code> 把元素往左边吸引</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color: red\"</span>&gt;</span>这是第一个区块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color: green\"</span>&gt;</span>这是第二个区块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用浮动：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-1.png\" alt=\"简单浮动效果图\"></p>\n<p>我们发现，通过浮动，可以使两个原本很难相邻在一起的块状元素，<strong>完美</strong> 的相邻在一起。</p>\n<p>使用 <code>left</code> 是把元素往左边吸引，而 <code>right</code> 是把元素往右边吸引。</p>\n<p>那么当浮动和元素嵌套结合会发生什么呢？</p>\n<h2 id=\"父元素高度\"><a href=\"#父元素高度\" class=\"headerlink\" title=\"父元素高度\"></a>父元素高度</h2><p>在页面布局中，元素嵌套使用是非常常见的，如下面的代码。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span></span><br><span class=\"line\">    first child</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.child1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/first-child.png\" alt=\"\"><br>此时，子元素的高度是<strong>自适应的</strong>，也就是当前浏览器显示的文字高度，如果对页面进行缩放，子元素高度就会变化。</p>\n<p>而父元素包含着子元素，而且父元素里面没有其它元素，因此父元素的高度等于子元素的高度。</p>\n<p>我们也可以使用 <code>height</code>来设置子元素的高度，让它不自适应。</p>\n<p>在实际开发中，经常需要使用一个父元素嵌套一些浮动元素，现在我们就来设置子元素为浮动元素。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.child1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/child1-float.png\" alt=\"\"></p>\n<p>我们发现父元素的高度竟然变成了０。</p>\n<p>我们尝试再添加一个<strong>非浮动</strong>的子元素时，我们发现，父元素的高度等于第二个非浮动子元素的高度，完全忽视了第一个浮动子元素的存在。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span></span><br><span class=\"line\">  second child</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.child2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/parent-child2.png\" alt=\"\"></p>\n<p>而当我们把第二个子元素设置为浮动的时候，父元素的高度又再度变成了０。</p>\n<p>按照上面的方法，添加第三个元素的时候，效果也是相同的。</p>\n<p>通过上面的例子，我们可以得出一个结论：<strong>父元素的高度由最后一个非浮动子元素的占位空间所决定。</strong></p>\n<p>但是在页面布局中，<strong>浮动布局的占位空间</strong>往往是我们理想的容器父元素的高度，那么我们如何解决这个问题呢？</p>\n<h2 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h2><p>使用<strong>清除浮动</strong>就可以解决上面的问题，具体的做法是在父元素的最后添加一个空的元素，并在设置它为清除浮动。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child3\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.child3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/clear-float-1.png\" alt=\"\"></p>\n<p>我们发现父元素的高度等于浮动元素的占位空间。</p>\n<p> <code>clear: left;</code> 就是让左浮动元素持有占位空间</p>\n<p>让我们再来拓展一下，<code>clear</code> 除了可以设置为 <code>left</code>，还可以设置为 <code>right</code> 和 <code>both</code>。</p>\n<p><code>right</code> 就是让右浮动元素持有占位空间。</p>\n<p><code>both</code> 就是让两边的浮动元素都持有占位空间。</p>\n<h3 id=\"浮动布局–最佳实践\"><a href=\"#浮动布局–最佳实践\" class=\"headerlink\" title=\"浮动布局–最佳实践\"></a>浮动布局–最佳实践</h3><p>在上面的代码中，我们是直接手动的在父元素最后添加空元素。那么能不能有一种方法，可以自动的帮我们添加元素并在设置清除浮动呢？</p>\n<p>回答是肯定的！</p>\n<p>在 CSS 中，我们可以使用 「after 选择器」 来实现添加元素，并且设置属性，具体的用法可以参考:<a href=\"http://www.w3school.com.cn/cssref/selector_after.asp\" target=\"_blank\" rel=\"noopener\">W3C after 选择器</a></p>\n<p>下面直接给出代码： </p>\n<pre><code class=\"css\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> {\n  <span class=\"attribute\">content</span>: <span class=\"string\">\" \"</span>;\n  <span class=\"attribute\">display</span>: block;\n  <span class=\"attribute\">clear</span>: both;\n  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;\n}\n<span class=\"selector-class\">.clearfix</span> {\n  <span class=\"attribute\">zoom</span>: <span class=\"number\">1</span>;\n}\n</code></pre>\n<ul>\n<li><p>在IE6, 7下 <code>zoom: 1</code> 会触发 hasLayout，从而使元素闭合内部的浮动。</p>\n</li>\n<li><p>在标准浏览器下，<code>.clearfix:after</code> 这个伪类会在应用到 <code>.clearfix</code> 的元素后面插入一个 <code>clear: both</code> 的块级元素，从而达到清除浮动的作用。     </p>\n</li>\n</ul>\n<p>只要父元素引用了这个 class，就可以自动的实现清除浮动，再也不用担心高度和子元素的占位问题了。</p>\n<h2 id=\"心法小结\"><a href=\"#心法小结\" class=\"headerlink\" title=\"心法小结\"></a>心法小结</h2><p>最后，我们再来回顾一下文章介绍的一些心法：</p>\n<p><strong>1. HTML 分为块状元素和行内元素的，块状元素是独占一行的</strong></p>\n<p><strong>2. 浮动布局相对行内元素的布局，往往更利于精确计算间距</strong></p>\n<p><strong>3. 默认情况下，父元素的高度由最后一个非浮动子元素的占位空间所决定</strong></p>\n<p><strong>4. 浮动布局的占位空间往往是我们理想的容器父元素的高度</strong></p>\n<p><strong>5. 清除浮动可以解决浮动元素的占位空间问题</strong></p>\n<p>文章中的一些招式可能说的太粗糙，先不用捉急，我们先学心法，招式到后面再专门的学习。</p>\n<p>我会在下一篇博文继续介绍心法 II。</p>\n","site":{"data":{}},"excerpt":"<p>上一篇博客是我们《后端工程师入门前端页面重构》系列的第一篇，我们介绍了页面布局的口诀：</p>\n<p><strong>从左到右，从上到下，化整为零。</strong></p>\n<p>那么在接下来的几篇文章中，我们就来聊聊页面布局的「心法」和一些具体的「招式」。</p>\n<p>那么什么是心法呢？</p>","more":"<p>如果说口诀是页面布局的原则，那么心法就是对页面布局中一些重要概念的认识。</p>\n<p>在上一篇文章，我们一直推荐使用高效的浮动布局，类似大家都玩过的磁铁，在磁铁的周围，所有的铁块会被磁铁所吸引。</p>\n<p>那么浮动就好比页面上的一块磁铁，它会吸引页面上的元素块，让它们朝一个方向进行组合、包含、交叠，进而完成整个页面的布局。</p>\n<p>下面就让我们来看看页面中元素有什么类型。</p>\n<h2 id=\"HTML-块状元素和行内元素\"><a href=\"#HTML-块状元素和行内元素\" class=\"headerlink\" title=\"HTML 块状元素和行内元素\"></a>HTML 块状元素和行内元素</h2><p>在我们熟知的页面布局中，网页的标题，logo等都是有高度和宽度的。我们来看下面的豆瓣首页的切图：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/douban-index.png\" alt=\"豆瓣首页切图\"></p>\n<p>在上面的图片中，我们使用红色的线条和文字标注豆瓣 logo 的高度和宽度。不仅仅是 logo 图有高度和宽度，搜索框，热搜主题等其它元素，几乎都有高度和宽度。</p>\n<p>那么在 HTML 语言中，我们如何指定元素的高度和宽度呢？</p>\n<p>我们先来写一段 HTML：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这是 div 标签里面的内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>这是 span 标签的内容<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后给它们定义样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/html-css-show.png\" alt=\"效果图\"></p>\n<p>发现一个问题：</p>\n<p><strong>我们设置的高度和宽度只对 div 标签产生效果，对 span 标签没有产生效果。这是为什么呢？</strong></p>\n<p>其实在 HTML 中，我们可以把标签分为「块状元素」和「行内元素」，上面代码中的 div 标签就是块状元素，而 span 标签就是行内元素。</p>\n<p>那么这两类元素有什么区别呢？</p>\n<p>从我们的代码的效果图里面我们已经看出来一个区别了：<strong>块状元素可以设置它的高度和宽度，行内元素对的高度和宽度的设置是无效。</strong></p>\n<p>我们把上面元素的宽度和高度都删除，让 div 标签和 span 标签保持原始的高度和宽度来看看效果。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-inline-elemet.png\" alt=\"效果图\"></p>\n<p>是不是又看出来一个区别呢？</p>\n<p><strong>块状元素是独占一行的，而行内元素只占本身内容的大小。</strong></p>\n<p>看看我们之前设置高度和宽度的例子，我们用浏览器检查一下看看。</p>\n<p><img src=\"/image/back-2-font-xinfa-1/block-element.jpg\" alt=\"效果图\"></p>\n<p><strong>即使我们设置了块状元素的高度和宽度，它还是独占一行的</strong>。真的是霸道啊！</p>\n<p>然而，现实中的网页（如豆瓣），很多内容块都是拼接的，如果我们使用块状元素来表示这些内容块，如果消除它独占一行的情况呢？</p>\n<p>关于这个问题，似乎有两种解决方案。</p>\n<h3 id=\"inline-block\"><a href=\"#inline-block\" class=\"headerlink\" title=\"inline-block\"></a>inline-block</h3><p>其实在 css 的 diplay 属性中，有一个属性值 <code>inline-block</code> 可以将标签呈现出「块状元素」和「行内元素」之间的中间态，即它可以拥有宽高度的同时，也可以具备行内元素的占位属性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后给它们定义样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看效果：<br><img src=\"/image/back-2-font-xinfa-1/inline-element-error.png\" alt=\"行内元素误差效果显示\"></p>\n<p>我们发现<strong>虽然两个 div 可以变成行内元素在一行显示，但是它们之间还是存在空白，不能完美的相邻在一起。这点空白会让我们的布局很不美观！</strong></p>\n<h3 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h3><p>上面我们说了，浮动可以把页面上的元素往某一个方向吸引，那么如何吸引呢？<br>在 CSS 中，我们可以通过 <code>float:left</code> 把元素往左边吸引</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color: red\"</span>&gt;</span>这是第一个区块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color: green\"</span>&gt;</span>这是第二个区块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用浮动：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看效果：</p>\n<p><img src=\"/image/back-2-font-xinfa-1/float-layout-show-1.png\" alt=\"简单浮动效果图\"></p>\n<p>我们发现，通过浮动，可以使两个原本很难相邻在一起的块状元素，<strong>完美</strong> 的相邻在一起。</p>\n<p>使用 <code>left</code> 是把元素往左边吸引，而 <code>right</code> 是把元素往右边吸引。</p>\n<p>那么当浮动和元素嵌套结合会发生什么呢？</p>\n<h2 id=\"父元素高度\"><a href=\"#父元素高度\" class=\"headerlink\" title=\"父元素高度\"></a>父元素高度</h2><p>在页面布局中，元素嵌套使用是非常常见的，如下面的代码。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child1\"</span>&gt;</span></span><br><span class=\"line\">    first child</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.child1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/first-child.png\" alt=\"\"><br>此时，子元素的高度是<strong>自适应的</strong>，也就是当前浏览器显示的文字高度，如果对页面进行缩放，子元素高度就会变化。</p>\n<p>而父元素包含着子元素，而且父元素里面没有其它元素，因此父元素的高度等于子元素的高度。</p>\n<p>我们也可以使用 <code>height</code>来设置子元素的高度，让它不自适应。</p>\n<p>在实际开发中，经常需要使用一个父元素嵌套一些浮动元素，现在我们就来设置子元素为浮动元素。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.child1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/child1-float.png\" alt=\"\"></p>\n<p>我们发现父元素的高度竟然变成了０。</p>\n<p>我们尝试再添加一个<strong>非浮动</strong>的子元素时，我们发现，父元素的高度等于第二个非浮动子元素的高度，完全忽视了第一个浮动子元素的存在。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child2\"</span>&gt;</span></span><br><span class=\"line\">  second child</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.child2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/parent-child2.png\" alt=\"\"></p>\n<p>而当我们把第二个子元素设置为浮动的时候，父元素的高度又再度变成了０。</p>\n<p>按照上面的方法，添加第三个元素的时候，效果也是相同的。</p>\n<p>通过上面的例子，我们可以得出一个结论：<strong>父元素的高度由最后一个非浮动子元素的占位空间所决定。</strong></p>\n<p>但是在页面布局中，<strong>浮动布局的占位空间</strong>往往是我们理想的容器父元素的高度，那么我们如何解决这个问题呢？</p>\n<h2 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h2><p>使用<strong>清除浮动</strong>就可以解决上面的问题，具体的做法是在父元素的最后添加一个空的元素，并在设置它为清除浮动。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child3\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.child3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/image/back-2-font-xinfa-1/clear-float-1.png\" alt=\"\"></p>\n<p>我们发现父元素的高度等于浮动元素的占位空间。</p>\n<p> <code>clear: left;</code> 就是让左浮动元素持有占位空间</p>\n<p>让我们再来拓展一下，<code>clear</code> 除了可以设置为 <code>left</code>，还可以设置为 <code>right</code> 和 <code>both</code>。</p>\n<p><code>right</code> 就是让右浮动元素持有占位空间。</p>\n<p><code>both</code> 就是让两边的浮动元素都持有占位空间。</p>\n<h3 id=\"浮动布局–最佳实践\"><a href=\"#浮动布局–最佳实践\" class=\"headerlink\" title=\"浮动布局–最佳实践\"></a>浮动布局–最佳实践</h3><p>在上面的代码中，我们是直接手动的在父元素最后添加空元素。那么能不能有一种方法，可以自动的帮我们添加元素并在设置清除浮动呢？</p>\n<p>回答是肯定的！</p>\n<p>在 CSS 中，我们可以使用 「after 选择器」 来实现添加元素，并且设置属性，具体的用法可以参考:<a href=\"http://www.w3school.com.cn/cssref/selector_after.asp\" target=\"_blank\" rel=\"noopener\">W3C after 选择器</a></p>\n<p>下面直接给出代码： </p>\n<pre><code class=\"css\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> {\n  <span class=\"attribute\">content</span>: <span class=\"string\">\" \"</span>;\n  <span class=\"attribute\">display</span>: block;\n  <span class=\"attribute\">clear</span>: both;\n  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;\n}\n<span class=\"selector-class\">.clearfix</span> {\n  <span class=\"attribute\">zoom</span>: <span class=\"number\">1</span>;\n}\n</code></pre>\n<ul>\n<li><p>在IE6, 7下 <code>zoom: 1</code> 会触发 hasLayout，从而使元素闭合内部的浮动。</p>\n</li>\n<li><p>在标准浏览器下，<code>.clearfix:after</code> 这个伪类会在应用到 <code>.clearfix</code> 的元素后面插入一个 <code>clear: both</code> 的块级元素，从而达到清除浮动的作用。     </p>\n</li>\n</ul>\n<p>只要父元素引用了这个 class，就可以自动的实现清除浮动，再也不用担心高度和子元素的占位问题了。</p>\n<h2 id=\"心法小结\"><a href=\"#心法小结\" class=\"headerlink\" title=\"心法小结\"></a>心法小结</h2><p>最后，我们再来回顾一下文章介绍的一些心法：</p>\n<p><strong>1. HTML 分为块状元素和行内元素的，块状元素是独占一行的</strong></p>\n<p><strong>2. 浮动布局相对行内元素的布局，往往更利于精确计算间距</strong></p>\n<p><strong>3. 默认情况下，父元素的高度由最后一个非浮动子元素的占位空间所决定</strong></p>\n<p><strong>4. 浮动布局的占位空间往往是我们理想的容器父元素的高度</strong></p>\n<p><strong>5. 清除浮动可以解决浮动元素的占位空间问题</strong></p>\n<p>文章中的一些招式可能说的太粗糙，先不用捉急，我们先学心法，招式到后面再专门的学习。</p>\n<p>我会在下一篇博文继续介绍心法 II。</p>"},{"_content":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>这是网页的主题</title>\n</head>\n<body>\n\t这是网页的内容\n</body>\n</html>","source":"_drafts/code/xinfan-1/simple.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>这是网页的主题</title>\n</head>\n<body>\n\t这是网页的内容\n</body>\n</html>","slug":"code/xinfan-1/simple","published":0,"date":"2018-02-18T08:12:37.445Z","updated":"2018-02-18T08:12:37.445Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpnh0015mc55i7btup1d","content":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>这是网页的主题</title>\n</head>\n<body>\n\t这是网页的内容\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>这是网页的主题</title>\n</head>\n<body>\n\t这是网页的内容\n</body>\n</html>"},{"title":"从 Java 到 Scala（一）：面向对象谈起","date":"2018-02-09T16:00:00.000Z","_content":"去年我加入[水滴团队](https://scala.cool/2017/03/hello-scala/)，面试中，面试官问：“你了解 Scala 吗？”\n\n“不了解(尴尬)。”\n\n“你知道 Spark 吗？它就是使用 Scala 编写的，不过在我们团队中，Scala 主要作为后端语言，我们 90% 以上的业务代码都是使用 Scala 编写。Scala 在国内使用的比较少，但是在国外用的还是蛮多的，如 Twitter 就是使用 Scala 写的后端。”\n\n自那以后，我便开始了 Scala 的学习之旅。\n\n> Scala 是由德国的计算机科学家和编程方法教授 [Martin Odersky](https://en.wikipedia.org/wiki/Martin_Odersky) 设计出来的，它的设计原理严格遵循数学的逻辑推理。因此它是一门优秀的编程语言，它不仅仅在工业界被广泛使用，在学术界也占用很高的研究地位。\n\n由于之前的 Java 背景，我经常拿 Scala 与 Java 这两门语言比较。 Scala 和 Java 都基于 JVM，因此 Java 的类库，Scala　都可以直接使用。但是我对 Scala 印象最深的点，并不是「面向对象」，而是它还拥抱「函数式」，尤其是它的「高阶」。\n\n**如果我们把「面向对象」比作站在地面上观察事物的原理，并且使用这些原理解决问题，那么「高阶」就是让你站在山上去看待事物，对问题进行更高层次的抽象。**\n\n因此不管是解决实际问题，还是提高对编程语言的认知，Scala 都是一们值得学习的语言。\n\n我是从《快学 Scala》这本书开始学习 Scala 的，受此书启发，我想能不能书写一个「从 Java 到 Scala 系列」，寻找一棵从 Java 通往 Scala 的连续的知识树，通过对知识树的讲解，来学习 Scala。\n\n好了，这就是本系列的第一篇，那么我们如何谈起呢？\n\n既然 Java 和 Scala 都是「面向对象」的，那我们就来探索一下什么是「面向对象」吧。\n<!-- more -->\n## 模板和对象\n「模板」是在代码层面描述一类对象的「行为」或者「状态」的**代码**，它是抽象的。如 Java 中的类，C 语言中的结构体，它们都是「模板」。\n\n「对象」是在运行期间通过模板在内存中生成的一个个**实体**，它是具体的。如 Java 在运行期间通过 new 在内存中产生的实体就叫做「对象」。\n\n如果你说共享单车，那么它就是一个「模板」；如果你说这辆共享单车和那辆共享单车，那它们就是「对象」。\n\n在代码层面，「对象」的行为可以定义为「方法」，「对象」的状态可以定义为「属性」，那我们如何去描述一类「对象」的方法或者属性呢？－**封装**。\n\n例如共享单车，它有车轮，二维码等属性，有开锁和关锁等行为。那么我们可以有三种方式来封装共享单车。\n### 基于对象的封装\n这种方式就是直接封装，最典型的例子就是 C 语言中的结构体。\n封装共享单车的「模板」如下：\n\n```C\nstruct SharedBicycle{\n  车轮;\n  二维码;\n  开锁;\n  关锁;\n}; \n```\n### 基于类的封装\n大多数「面向对象」的语言，如 Java，Scala，C++等，都使用这种方式封装，「模板」如下：\n```Scala\nclass SharedBicycle{\n  属性：车轮;\n  属性：二维码;\n  方法：开锁;\n  方法：关锁;\n}\n```\n### 基于原型的封装\nJavaScript 就是使用这种封装方式，「模板」如下：\n```javascript\nfunction SharedBicycle(){\n  this.车轮 = xxx;\n  this.二维码 = xxx;\n}\n//添加原型方法\nSharedBicycle.prototype.开锁 = function(){...};\nSharedBicycle.prototype.关锁 = function(){...};\n```\n\n### 纯面向对象\n\n我们已经得知，可以用多种实现面向对象的不同技术，那么什么是纯面向对象的语言呢？\n\n我们知道 Java 是一门「面向对象」的语言，那么在 Java 中是否真的「万物皆对象」？\t\n\n在 Java 中，我们可以写这么一段代码 `int a = 3;`　然后我们发现 `a`  并没有封装任何的属性或者方法。\n\n因此我们可以说 `a` 不是一个「对象」，Java 不是一门「纯粹面向对象」的语言。\n\n再看看 Scala ，不论是低阶的 `Int`，`Double`，还是高阶类型，都封装有属性或者方法，因此 Scala 才是一门「纯粹面向对象」的语言。\n\n那么是什么支持 Scala 一切皆为「对象」的呢？－**Scala 的通用类型系统。**\n\n## Scala 通用类型系统\n### 顶类型\n我们知道，在 Java 中，所有「对象」的「顶类型」都是 `java.lang.Object`，但是 Java 却忽略了 `int`，`double`等 JVM 「原始类型」,它们并没有继承 `java.lang.Object`。\n\n但是在 Scala 中，存在一个通用的「顶类型」－　Any。\n\n![](/image/java2Scala-1-oop/scala-unified-types.png)\n\nScala 引入了`Any` 作为所有类型共同的顶类型。`Any` 是 `AnyRef` 和 `AnyVal` 的超类。\n\n`AnyRef` 面向 Java（JVM）的对象世界，它对应 `java.lang.Object` ，是所有对象的超类。\n\n`AnyVal` 则代表了 Java 的值世界，例如 `int` 以及其它 JVM 原始类型。\n\n正是依赖这种继承设计，我们才能够使用 `Any` 定义方法，同时兼容 `scala.int` 以及 `java.lang.String` 的实例。\n\n```Scala\nclass Person\n\nval allThings = ArrayBuffer[Any]()\n\nval myInt = 42             // Int, kept as low-level `int` during runtime\n\nallThings += myInt         // Int (extends AnyVal)\n\nallThings += new Person()  // Person (extends AnyRef), no magic here\n```\n\n正是通过这种「通用类型系统」的设计，使得 Scala 摆脱「原始类型」这种边缘情况的纠缠，从而实现「纯粹的面向对象」。\n\n说完了「顶类型」，我们再来看看「底类型」。\n\n### 底类型\n我们知道在 Java 中比较闹心的就是异常处理，当我们调用一个抛出异常的方法，我们必须抛出或者处理异常。\n\n但是在 Scala 中，我们知道一切表达式皆有类型，难道「抛异常」也是有类型的？\n\n```Scala\nscala> val a = Try(throw new Exception(\"123\"))\na: scala.util.Try[Nothing] = Failure(java.lang.Exception: 123)\n```\n我们发现「抛异常」竟然是 `Nothing` 类型，在 Scala 中，难道 `Nothing` 仅仅是作为「抛异常」的类型？\n\n```Scala\nscala>  def fun(flag:Boolean)={\n          if(flag){\n            1                          // Int\n          }else{\n           throw new Exception(\"123\") //Nothing\n          }\n        }\nfun: (flag: Boolean)Int\n\n```\n我们发现 `fun` 函数并没有报错，而且返回值类型竟然是 `Int`，这让我们有一个大胆的猜测：**`Nothing` 是 `Int` 的子类型。**\n\n```Scala\n[Int] -> ... -> AnyVal -> Any\nNothing -> [Int] -> ... -> AnyVal -> Any\n```\n其实在 Scala 中， `Nothing` 不仅仅是 `Int` 的子类型，它更是**所有类型的子类型。** 这让我们又产生了一个大胆的猜测：难道 `Nothing` 继承了所有的类型？咳咳，这个问题我们以后在讨论。\n\n在 Scala 中，还有一个类型 `Null` 遵循着和 `Nothing` 一样的原理。\n\n```Scala\nscala> def fun2(flag:Boolean)={\n          if(flag){\n            \"123\"  //String\n          }else{\n            null   //Null\n          }\n        }\nfun2: (flag: Boolean)String\n```\n同理，我们可以得出 `Null` 是 `String的子类型`\n```Scala\n[String] -> AnyRef -> Any\nNull -> [String] -> AnyRef -> Any\n```\n那我们看看 `Null` 是否可以兼容 `Int`。\n```\nscala>  def fun3(flag:Boolean)={\n          if(flag){\n            123  //Int\n          }else{\n            null   //Null\n          }\n        }\nfun3: (flag: Boolean)Any\n```\n我们发现 `fun3` 的返回值类型竟然是 `Any`，说明 `Null` 不能兼容 Scala 的「值类型」，其实从 Scala 的帮助手册中我们就可以得出结论：`Null` 继承了AnyRef，因此 `Null` 是所有**引用类型**的子类型。\n\n```Scala\nabstract final class Null extends AnyRef\n```\n正因如此，`fun3` 的返回值类型才是 `Any`，因为 `Any` 才是 `AnyVal` 和 `AnyRef` 公共的超类。\n\n<<<<<<< HEAD\n## 总结\n=======\n「通用类型系统」我们就先介绍到这里，下面我们小结一下。\n## 小结\n\n1.模板是封装属性或者方法的一种抽象。\n2.对象是具有属性或者方法的一种实体。\n3.封装的方式有三种：基于对象、基于类、基于原型。\n4.「面向对象」是一种设计程序的方式，它要求工程师以**对象**为最小单位设计程序。\n5.「纯粹面向对象」要求一切变量皆为对象，Scala 是，Java 不是。\n6.Scala 的「顶类型」是 `Any`，它有两个直接的子类型：`AnyRef` 面向 JVM 对象的世界，`AnyVal` 面向 JVM 值的世界。\n7.Scala 有两个「底类型 \t」，`Nothing` 所有类型的底类型，`Null` 所有引用类型的底类型。\n6.「通用类型系统」的设计使得 Scala 摆脱 JVM 原始类型的纠缠，从而实现「纯粹面向对象」。\n>>>>>>> a51c6619bb7b02ebf128c63cc9a28b20a4f015ce\n\n本文以面向对象为引子，找到了一个 Java 和 Scala 共有的知识节点，从而引出 Scala 的通用类型系统。那么在下一篇文章中，我们由此展开进一步思考，到底什么是所谓的「类型」，以及 Scala 在类型方面存在哪些与 Java 不同的有趣的地方。\n\n>[Scala 类型的类型（一）。](https://scala.cool/2017/03/scala-types-of-types-part-1/)\n","source":"_posts/2018/02/Form-Java2Scala-1-oop.md","raw":"---\ntitle: 从 Java 到 Scala（一）：面向对象谈起\ndate: 2018/02/10\ncategories: 编程语言\ntags:\n- Java2Scala\n---\n去年我加入[水滴团队](https://scala.cool/2017/03/hello-scala/)，面试中，面试官问：“你了解 Scala 吗？”\n\n“不了解(尴尬)。”\n\n“你知道 Spark 吗？它就是使用 Scala 编写的，不过在我们团队中，Scala 主要作为后端语言，我们 90% 以上的业务代码都是使用 Scala 编写。Scala 在国内使用的比较少，但是在国外用的还是蛮多的，如 Twitter 就是使用 Scala 写的后端。”\n\n自那以后，我便开始了 Scala 的学习之旅。\n\n> Scala 是由德国的计算机科学家和编程方法教授 [Martin Odersky](https://en.wikipedia.org/wiki/Martin_Odersky) 设计出来的，它的设计原理严格遵循数学的逻辑推理。因此它是一门优秀的编程语言，它不仅仅在工业界被广泛使用，在学术界也占用很高的研究地位。\n\n由于之前的 Java 背景，我经常拿 Scala 与 Java 这两门语言比较。 Scala 和 Java 都基于 JVM，因此 Java 的类库，Scala　都可以直接使用。但是我对 Scala 印象最深的点，并不是「面向对象」，而是它还拥抱「函数式」，尤其是它的「高阶」。\n\n**如果我们把「面向对象」比作站在地面上观察事物的原理，并且使用这些原理解决问题，那么「高阶」就是让你站在山上去看待事物，对问题进行更高层次的抽象。**\n\n因此不管是解决实际问题，还是提高对编程语言的认知，Scala 都是一们值得学习的语言。\n\n我是从《快学 Scala》这本书开始学习 Scala 的，受此书启发，我想能不能书写一个「从 Java 到 Scala 系列」，寻找一棵从 Java 通往 Scala 的连续的知识树，通过对知识树的讲解，来学习 Scala。\n\n好了，这就是本系列的第一篇，那么我们如何谈起呢？\n\n既然 Java 和 Scala 都是「面向对象」的，那我们就来探索一下什么是「面向对象」吧。\n<!-- more -->\n## 模板和对象\n「模板」是在代码层面描述一类对象的「行为」或者「状态」的**代码**，它是抽象的。如 Java 中的类，C 语言中的结构体，它们都是「模板」。\n\n「对象」是在运行期间通过模板在内存中生成的一个个**实体**，它是具体的。如 Java 在运行期间通过 new 在内存中产生的实体就叫做「对象」。\n\n如果你说共享单车，那么它就是一个「模板」；如果你说这辆共享单车和那辆共享单车，那它们就是「对象」。\n\n在代码层面，「对象」的行为可以定义为「方法」，「对象」的状态可以定义为「属性」，那我们如何去描述一类「对象」的方法或者属性呢？－**封装**。\n\n例如共享单车，它有车轮，二维码等属性，有开锁和关锁等行为。那么我们可以有三种方式来封装共享单车。\n### 基于对象的封装\n这种方式就是直接封装，最典型的例子就是 C 语言中的结构体。\n封装共享单车的「模板」如下：\n\n```C\nstruct SharedBicycle{\n  车轮;\n  二维码;\n  开锁;\n  关锁;\n}; \n```\n### 基于类的封装\n大多数「面向对象」的语言，如 Java，Scala，C++等，都使用这种方式封装，「模板」如下：\n```Scala\nclass SharedBicycle{\n  属性：车轮;\n  属性：二维码;\n  方法：开锁;\n  方法：关锁;\n}\n```\n### 基于原型的封装\nJavaScript 就是使用这种封装方式，「模板」如下：\n```javascript\nfunction SharedBicycle(){\n  this.车轮 = xxx;\n  this.二维码 = xxx;\n}\n//添加原型方法\nSharedBicycle.prototype.开锁 = function(){...};\nSharedBicycle.prototype.关锁 = function(){...};\n```\n\n### 纯面向对象\n\n我们已经得知，可以用多种实现面向对象的不同技术，那么什么是纯面向对象的语言呢？\n\n我们知道 Java 是一门「面向对象」的语言，那么在 Java 中是否真的「万物皆对象」？\t\n\n在 Java 中，我们可以写这么一段代码 `int a = 3;`　然后我们发现 `a`  并没有封装任何的属性或者方法。\n\n因此我们可以说 `a` 不是一个「对象」，Java 不是一门「纯粹面向对象」的语言。\n\n再看看 Scala ，不论是低阶的 `Int`，`Double`，还是高阶类型，都封装有属性或者方法，因此 Scala 才是一门「纯粹面向对象」的语言。\n\n那么是什么支持 Scala 一切皆为「对象」的呢？－**Scala 的通用类型系统。**\n\n## Scala 通用类型系统\n### 顶类型\n我们知道，在 Java 中，所有「对象」的「顶类型」都是 `java.lang.Object`，但是 Java 却忽略了 `int`，`double`等 JVM 「原始类型」,它们并没有继承 `java.lang.Object`。\n\n但是在 Scala 中，存在一个通用的「顶类型」－　Any。\n\n![](/image/java2Scala-1-oop/scala-unified-types.png)\n\nScala 引入了`Any` 作为所有类型共同的顶类型。`Any` 是 `AnyRef` 和 `AnyVal` 的超类。\n\n`AnyRef` 面向 Java（JVM）的对象世界，它对应 `java.lang.Object` ，是所有对象的超类。\n\n`AnyVal` 则代表了 Java 的值世界，例如 `int` 以及其它 JVM 原始类型。\n\n正是依赖这种继承设计，我们才能够使用 `Any` 定义方法，同时兼容 `scala.int` 以及 `java.lang.String` 的实例。\n\n```Scala\nclass Person\n\nval allThings = ArrayBuffer[Any]()\n\nval myInt = 42             // Int, kept as low-level `int` during runtime\n\nallThings += myInt         // Int (extends AnyVal)\n\nallThings += new Person()  // Person (extends AnyRef), no magic here\n```\n\n正是通过这种「通用类型系统」的设计，使得 Scala 摆脱「原始类型」这种边缘情况的纠缠，从而实现「纯粹的面向对象」。\n\n说完了「顶类型」，我们再来看看「底类型」。\n\n### 底类型\n我们知道在 Java 中比较闹心的就是异常处理，当我们调用一个抛出异常的方法，我们必须抛出或者处理异常。\n\n但是在 Scala 中，我们知道一切表达式皆有类型，难道「抛异常」也是有类型的？\n\n```Scala\nscala> val a = Try(throw new Exception(\"123\"))\na: scala.util.Try[Nothing] = Failure(java.lang.Exception: 123)\n```\n我们发现「抛异常」竟然是 `Nothing` 类型，在 Scala 中，难道 `Nothing` 仅仅是作为「抛异常」的类型？\n\n```Scala\nscala>  def fun(flag:Boolean)={\n          if(flag){\n            1                          // Int\n          }else{\n           throw new Exception(\"123\") //Nothing\n          }\n        }\nfun: (flag: Boolean)Int\n\n```\n我们发现 `fun` 函数并没有报错，而且返回值类型竟然是 `Int`，这让我们有一个大胆的猜测：**`Nothing` 是 `Int` 的子类型。**\n\n```Scala\n[Int] -> ... -> AnyVal -> Any\nNothing -> [Int] -> ... -> AnyVal -> Any\n```\n其实在 Scala 中， `Nothing` 不仅仅是 `Int` 的子类型，它更是**所有类型的子类型。** 这让我们又产生了一个大胆的猜测：难道 `Nothing` 继承了所有的类型？咳咳，这个问题我们以后在讨论。\n\n在 Scala 中，还有一个类型 `Null` 遵循着和 `Nothing` 一样的原理。\n\n```Scala\nscala> def fun2(flag:Boolean)={\n          if(flag){\n            \"123\"  //String\n          }else{\n            null   //Null\n          }\n        }\nfun2: (flag: Boolean)String\n```\n同理，我们可以得出 `Null` 是 `String的子类型`\n```Scala\n[String] -> AnyRef -> Any\nNull -> [String] -> AnyRef -> Any\n```\n那我们看看 `Null` 是否可以兼容 `Int`。\n```\nscala>  def fun3(flag:Boolean)={\n          if(flag){\n            123  //Int\n          }else{\n            null   //Null\n          }\n        }\nfun3: (flag: Boolean)Any\n```\n我们发现 `fun3` 的返回值类型竟然是 `Any`，说明 `Null` 不能兼容 Scala 的「值类型」，其实从 Scala 的帮助手册中我们就可以得出结论：`Null` 继承了AnyRef，因此 `Null` 是所有**引用类型**的子类型。\n\n```Scala\nabstract final class Null extends AnyRef\n```\n正因如此，`fun3` 的返回值类型才是 `Any`，因为 `Any` 才是 `AnyVal` 和 `AnyRef` 公共的超类。\n\n<<<<<<< HEAD\n## 总结\n=======\n「通用类型系统」我们就先介绍到这里，下面我们小结一下。\n## 小结\n\n1.模板是封装属性或者方法的一种抽象。\n2.对象是具有属性或者方法的一种实体。\n3.封装的方式有三种：基于对象、基于类、基于原型。\n4.「面向对象」是一种设计程序的方式，它要求工程师以**对象**为最小单位设计程序。\n5.「纯粹面向对象」要求一切变量皆为对象，Scala 是，Java 不是。\n6.Scala 的「顶类型」是 `Any`，它有两个直接的子类型：`AnyRef` 面向 JVM 对象的世界，`AnyVal` 面向 JVM 值的世界。\n7.Scala 有两个「底类型 \t」，`Nothing` 所有类型的底类型，`Null` 所有引用类型的底类型。\n6.「通用类型系统」的设计使得 Scala 摆脱 JVM 原始类型的纠缠，从而实现「纯粹面向对象」。\n>>>>>>> a51c6619bb7b02ebf128c63cc9a28b20a4f015ce\n\n本文以面向对象为引子，找到了一个 Java 和 Scala 共有的知识节点，从而引出 Scala 的通用类型系统。那么在下一篇文章中，我们由此展开进一步思考，到底什么是所谓的「类型」，以及 Scala 在类型方面存在哪些与 Java 不同的有趣的地方。\n\n>[Scala 类型的类型（一）。](https://scala.cool/2017/03/scala-types-of-types-part-1/)\n","slug":"2018/02/Form-Java2Scala-1-oop","published":1,"updated":"2018-03-25T14:33:19.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpnj0017mc55n4jdm4ie","content":"<p>去年我加入<a href=\"https://scala.cool/2017/03/hello-scala/\" target=\"_blank\" rel=\"noopener\">水滴团队</a>，面试中，面试官问：“你了解 Scala 吗？”</p>\n<p>“不了解(尴尬)。”</p>\n<p>“你知道 Spark 吗？它就是使用 Scala 编写的，不过在我们团队中，Scala 主要作为后端语言，我们 90% 以上的业务代码都是使用 Scala 编写。Scala 在国内使用的比较少，但是在国外用的还是蛮多的，如 Twitter 就是使用 Scala 写的后端。”</p>\n<p>自那以后，我便开始了 Scala 的学习之旅。</p>\n<blockquote>\n<p>Scala 是由德国的计算机科学家和编程方法教授 <a href=\"https://en.wikipedia.org/wiki/Martin_Odersky\" target=\"_blank\" rel=\"noopener\">Martin Odersky</a> 设计出来的，它的设计原理严格遵循数学的逻辑推理。因此它是一门优秀的编程语言，它不仅仅在工业界被广泛使用，在学术界也占用很高的研究地位。</p>\n</blockquote>\n<p>由于之前的 Java 背景，我经常拿 Scala 与 Java 这两门语言比较。 Scala 和 Java 都基于 JVM，因此 Java 的类库，Scala　都可以直接使用。但是我对 Scala 印象最深的点，并不是「面向对象」，而是它还拥抱「函数式」，尤其是它的「高阶」。</p>\n<p><strong>如果我们把「面向对象」比作站在地面上观察事物的原理，并且使用这些原理解决问题，那么「高阶」就是让你站在山上去看待事物，对问题进行更高层次的抽象。</strong></p>\n<p>因此不管是解决实际问题，还是提高对编程语言的认知，Scala 都是一们值得学习的语言。</p>\n<p>我是从《快学 Scala》这本书开始学习 Scala 的，受此书启发，我想能不能书写一个「从 Java 到 Scala 系列」，寻找一棵从 Java 通往 Scala 的连续的知识树，通过对知识树的讲解，来学习 Scala。</p>\n<p>好了，这就是本系列的第一篇，那么我们如何谈起呢？</p>\n<p>既然 Java 和 Scala 都是「面向对象」的，那我们就来探索一下什么是「面向对象」吧。<br><a id=\"more\"></a></p>\n<h2 id=\"模板和对象\"><a href=\"#模板和对象\" class=\"headerlink\" title=\"模板和对象\"></a>模板和对象</h2><p>「模板」是在代码层面描述一类对象的「行为」或者「状态」的<strong>代码</strong>，它是抽象的。如 Java 中的类，C 语言中的结构体，它们都是「模板」。</p>\n<p>「对象」是在运行期间通过模板在内存中生成的一个个<strong>实体</strong>，它是具体的。如 Java 在运行期间通过 new 在内存中产生的实体就叫做「对象」。</p>\n<p>如果你说共享单车，那么它就是一个「模板」；如果你说这辆共享单车和那辆共享单车，那它们就是「对象」。</p>\n<p>在代码层面，「对象」的行为可以定义为「方法」，「对象」的状态可以定义为「属性」，那我们如何去描述一类「对象」的方法或者属性呢？－<strong>封装</strong>。</p>\n<p>例如共享单车，它有车轮，二维码等属性，有开锁和关锁等行为。那么我们可以有三种方式来封装共享单车。</p>\n<h3 id=\"基于对象的封装\"><a href=\"#基于对象的封装\" class=\"headerlink\" title=\"基于对象的封装\"></a>基于对象的封装</h3><p>这种方式就是直接封装，最典型的例子就是 C 语言中的结构体。<br>封装共享单车的「模板」如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SharedBicycle</span>&#123;</span></span><br><span class=\"line\">  车轮;</span><br><span class=\"line\">  二维码;</span><br><span class=\"line\">  开锁;</span><br><span class=\"line\">  关锁;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于类的封装\"><a href=\"#基于类的封装\" class=\"headerlink\" title=\"基于类的封装\"></a>基于类的封装</h3><p>大多数「面向对象」的语言，如 Java，Scala，C++等，都使用这种方式封装，「模板」如下：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SharedBicycle</span></span>&#123;</span><br><span class=\"line\">  属性：车轮;</span><br><span class=\"line\">  属性：二维码;</span><br><span class=\"line\">  方法：开锁;</span><br><span class=\"line\">  方法：关锁;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"基于原型的封装\"><a href=\"#基于原型的封装\" class=\"headerlink\" title=\"基于原型的封装\"></a>基于原型的封装</h3><p>JavaScript 就是使用这种封装方式，「模板」如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SharedBicycle</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.车轮 = xxx;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.二维码 = xxx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//添加原型方法</span></span><br><span class=\"line\">SharedBicycle.prototype.开锁 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;;</span><br><span class=\"line\">SharedBicycle.prototype.关锁 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"纯面向对象\"><a href=\"#纯面向对象\" class=\"headerlink\" title=\"纯面向对象\"></a>纯面向对象</h3><p>我们已经得知，可以用多种实现面向对象的不同技术，那么什么是纯面向对象的语言呢？</p>\n<p>我们知道 Java 是一门「面向对象」的语言，那么在 Java 中是否真的「万物皆对象」？    </p>\n<p>在 Java 中，我们可以写这么一段代码 <code>int a = 3;</code>　然后我们发现 <code>a</code>  并没有封装任何的属性或者方法。</p>\n<p>因此我们可以说 <code>a</code> 不是一个「对象」，Java 不是一门「纯粹面向对象」的语言。</p>\n<p>再看看 Scala ，不论是低阶的 <code>Int</code>，<code>Double</code>，还是高阶类型，都封装有属性或者方法，因此 Scala 才是一门「纯粹面向对象」的语言。</p>\n<p>那么是什么支持 Scala 一切皆为「对象」的呢？－<strong>Scala 的通用类型系统。</strong></p>\n<h2 id=\"Scala-通用类型系统\"><a href=\"#Scala-通用类型系统\" class=\"headerlink\" title=\"Scala 通用类型系统\"></a>Scala 通用类型系统</h2><h3 id=\"顶类型\"><a href=\"#顶类型\" class=\"headerlink\" title=\"顶类型\"></a>顶类型</h3><p>我们知道，在 Java 中，所有「对象」的「顶类型」都是 <code>java.lang.Object</code>，但是 Java 却忽略了 <code>int</code>，<code>double</code>等 JVM 「原始类型」,它们并没有继承 <code>java.lang.Object</code>。</p>\n<p>但是在 Scala 中，存在一个通用的「顶类型」－　Any。</p>\n<p><img src=\"/image/java2Scala-1-oop/scala-unified-types.png\" alt=\"\"></p>\n<p>Scala 引入了<code>Any</code> 作为所有类型共同的顶类型。<code>Any</code> 是 <code>AnyRef</code> 和 <code>AnyVal</code> 的超类。</p>\n<p><code>AnyRef</code> 面向 Java（JVM）的对象世界，它对应 <code>java.lang.Object</code> ，是所有对象的超类。</p>\n<p><code>AnyVal</code> 则代表了 Java 的值世界，例如 <code>int</code> 以及其它 JVM 原始类型。</p>\n<p>正是依赖这种继承设计，我们才能够使用 <code>Any</code> 定义方法，同时兼容 <code>scala.int</code> 以及 <code>java.lang.String</code> 的实例。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">allThings</span> </span>= <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Any</span>]()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> myInt = <span class=\"number\">42</span>             <span class=\"comment\">// Int, kept as low-level `int` during runtime</span></span><br><span class=\"line\"></span><br><span class=\"line\">allThings += myInt         <span class=\"comment\">// Int (extends AnyVal)</span></span><br><span class=\"line\"></span><br><span class=\"line\">allThings += <span class=\"keyword\">new</span> <span class=\"type\">Person</span>()  <span class=\"comment\">// Person (extends AnyRef), no magic here</span></span><br></pre></td></tr></table></figure>\n<p>正是通过这种「通用类型系统」的设计，使得 Scala 摆脱「原始类型」这种边缘情况的纠缠，从而实现「纯粹的面向对象」。</p>\n<p>说完了「顶类型」，我们再来看看「底类型」。</p>\n<h3 id=\"底类型\"><a href=\"#底类型\" class=\"headerlink\" title=\"底类型\"></a>底类型</h3><p>我们知道在 Java 中比较闹心的就是异常处理，当我们调用一个抛出异常的方法，我们必须抛出或者处理异常。</p>\n<p>但是在 Scala 中，我们知道一切表达式皆有类型，难道「抛异常」也是有类型的？</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> a = <span class=\"type\">Try</span>(<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">Exception</span>(<span class=\"string\">\"123\"</span>))</span><br><span class=\"line\">a: scala.util.<span class=\"type\">Try</span>[<span class=\"type\">Nothing</span>] = <span class=\"type\">Failure</span>(java.lang.<span class=\"type\">Exception</span>: <span class=\"number\">123</span>)</span><br></pre></td></tr></table></figure>\n<p>我们发现「抛异常」竟然是 <code>Nothing</code> 类型，在 Scala 中，难道 <code>Nothing</code> 仅仅是作为「抛异常」的类型？</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scala&gt;  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun</span></span>(flag:<span class=\"type\">Boolean</span>)=&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">            <span class=\"number\">1</span>                          <span class=\"comment\">// Int</span></span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">Exception</span>(<span class=\"string\">\"123\"</span>) <span class=\"comment\">//Nothing</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">fun: (flag: <span class=\"type\">Boolean</span>)<span class=\"type\">Int</span></span><br></pre></td></tr></table></figure>\n<p>我们发现 <code>fun</code> 函数并没有报错，而且返回值类型竟然是 <code>Int</code>，这让我们有一个大胆的猜测：<strong><code>Nothing</code> 是 <code>Int</code> 的子类型。</strong></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">Int</span>] -&gt; ... -&gt; <span class=\"type\">AnyVal</span> -&gt; <span class=\"type\">Any</span></span><br><span class=\"line\"><span class=\"type\">Nothing</span> -&gt; [<span class=\"type\">Int</span>] -&gt; ... -&gt; <span class=\"type\">AnyVal</span> -&gt; <span class=\"type\">Any</span></span><br></pre></td></tr></table></figure>\n<p>其实在 Scala 中， <code>Nothing</code> 不仅仅是 <code>Int</code> 的子类型，它更是<strong>所有类型的子类型。</strong> 这让我们又产生了一个大胆的猜测：难道 <code>Nothing</code> 继承了所有的类型？咳咳，这个问题我们以后在讨论。</p>\n<p>在 Scala 中，还有一个类型 <code>Null</code> 遵循着和 <code>Nothing</code> 一样的原理。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun2</span></span>(flag:<span class=\"type\">Boolean</span>)=&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">            <span class=\"string\">\"123\"</span>  <span class=\"comment\">//String</span></span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"literal\">null</span>   <span class=\"comment\">//Null</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">fun2: (flag: <span class=\"type\">Boolean</span>)<span class=\"type\">String</span></span><br></pre></td></tr></table></figure>\n<p>同理，我们可以得出 <code>Null</code> 是 <code>String的子类型</code><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">String</span>] -&gt; <span class=\"type\">AnyRef</span> -&gt; <span class=\"type\">Any</span></span><br><span class=\"line\"><span class=\"type\">Null</span> -&gt; [<span class=\"type\">String</span>] -&gt; <span class=\"type\">AnyRef</span> -&gt; <span class=\"type\">Any</span></span><br></pre></td></tr></table></figure></p>\n<p>那我们看看 <code>Null</code> 是否可以兼容 <code>Int</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scala&gt;  def fun3(flag:Boolean)=&#123;</span><br><span class=\"line\">          if(flag)&#123;</span><br><span class=\"line\">            123  //Int</span><br><span class=\"line\">          &#125;else&#123;</span><br><span class=\"line\">            null   //Null</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">fun3: (flag: Boolean)Any</span><br></pre></td></tr></table></figure></p>\n<p>我们发现 <code>fun3</code> 的返回值类型竟然是 <code>Any</code>，说明 <code>Null</code> 不能兼容 Scala 的「值类型」，其实从 Scala 的帮助手册中我们就可以得出结论：<code>Null</code> 继承了AnyRef，因此 <code>Null</code> 是所有<strong>引用类型</strong>的子类型。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Null</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnyRef</span></span></span><br></pre></td></tr></table></figure>\n<p>正因如此，<code>fun3</code> 的返回值类型才是 <code>Any</code>，因为 <code>Any</code> 才是 <code>AnyVal</code> 和 <code>AnyRef</code> 公共的超类。</p>\n<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>=======<br>「通用类型系统」我们就先介绍到这里，下面我们小结一下。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>1.模板是封装属性或者方法的一种抽象。<br>2.对象是具有属性或者方法的一种实体。<br>3.封装的方式有三种：基于对象、基于类、基于原型。<br>4.「面向对象」是一种设计程序的方式，它要求工程师以<strong>对象</strong>为最小单位设计程序。<br>5.「纯粹面向对象」要求一切变量皆为对象，Scala 是，Java 不是。<br>6.Scala 的「顶类型」是 <code>Any</code>，它有两个直接的子类型：<code>AnyRef</code> 面向 JVM 对象的世界，<code>AnyVal</code> 面向 JVM 值的世界。<br>7.Scala 有两个「底类型     」，<code>Nothing</code> 所有类型的底类型，<code>Null</code> 所有引用类型的底类型。<br>6.「通用类型系统」的设计使得 Scala 摆脱 JVM 原始类型的纠缠，从而实现「纯粹面向对象」。</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>a51c6619bb7b02ebf128c63cc9a28b20a4f015ce</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>本文以面向对象为引子，找到了一个 Java 和 Scala 共有的知识节点，从而引出 Scala 的通用类型系统。那么在下一篇文章中，我们由此展开进一步思考，到底什么是所谓的「类型」，以及 Scala 在类型方面存在哪些与 Java 不同的有趣的地方。</p>\n<blockquote>\n<p><a href=\"https://scala.cool/2017/03/scala-types-of-types-part-1/\" target=\"_blank\" rel=\"noopener\">Scala 类型的类型（一）。</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>去年我加入<a href=\"https://scala.cool/2017/03/hello-scala/\" target=\"_blank\" rel=\"noopener\">水滴团队</a>，面试中，面试官问：“你了解 Scala 吗？”</p>\n<p>“不了解(尴尬)。”</p>\n<p>“你知道 Spark 吗？它就是使用 Scala 编写的，不过在我们团队中，Scala 主要作为后端语言，我们 90% 以上的业务代码都是使用 Scala 编写。Scala 在国内使用的比较少，但是在国外用的还是蛮多的，如 Twitter 就是使用 Scala 写的后端。”</p>\n<p>自那以后，我便开始了 Scala 的学习之旅。</p>\n<blockquote>\n<p>Scala 是由德国的计算机科学家和编程方法教授 <a href=\"https://en.wikipedia.org/wiki/Martin_Odersky\" target=\"_blank\" rel=\"noopener\">Martin Odersky</a> 设计出来的，它的设计原理严格遵循数学的逻辑推理。因此它是一门优秀的编程语言，它不仅仅在工业界被广泛使用，在学术界也占用很高的研究地位。</p>\n</blockquote>\n<p>由于之前的 Java 背景，我经常拿 Scala 与 Java 这两门语言比较。 Scala 和 Java 都基于 JVM，因此 Java 的类库，Scala　都可以直接使用。但是我对 Scala 印象最深的点，并不是「面向对象」，而是它还拥抱「函数式」，尤其是它的「高阶」。</p>\n<p><strong>如果我们把「面向对象」比作站在地面上观察事物的原理，并且使用这些原理解决问题，那么「高阶」就是让你站在山上去看待事物，对问题进行更高层次的抽象。</strong></p>\n<p>因此不管是解决实际问题，还是提高对编程语言的认知，Scala 都是一们值得学习的语言。</p>\n<p>我是从《快学 Scala》这本书开始学习 Scala 的，受此书启发，我想能不能书写一个「从 Java 到 Scala 系列」，寻找一棵从 Java 通往 Scala 的连续的知识树，通过对知识树的讲解，来学习 Scala。</p>\n<p>好了，这就是本系列的第一篇，那么我们如何谈起呢？</p>\n<p>既然 Java 和 Scala 都是「面向对象」的，那我们就来探索一下什么是「面向对象」吧。<br>","more":"</p>\n<h2 id=\"模板和对象\"><a href=\"#模板和对象\" class=\"headerlink\" title=\"模板和对象\"></a>模板和对象</h2><p>「模板」是在代码层面描述一类对象的「行为」或者「状态」的<strong>代码</strong>，它是抽象的。如 Java 中的类，C 语言中的结构体，它们都是「模板」。</p>\n<p>「对象」是在运行期间通过模板在内存中生成的一个个<strong>实体</strong>，它是具体的。如 Java 在运行期间通过 new 在内存中产生的实体就叫做「对象」。</p>\n<p>如果你说共享单车，那么它就是一个「模板」；如果你说这辆共享单车和那辆共享单车，那它们就是「对象」。</p>\n<p>在代码层面，「对象」的行为可以定义为「方法」，「对象」的状态可以定义为「属性」，那我们如何去描述一类「对象」的方法或者属性呢？－<strong>封装</strong>。</p>\n<p>例如共享单车，它有车轮，二维码等属性，有开锁和关锁等行为。那么我们可以有三种方式来封装共享单车。</p>\n<h3 id=\"基于对象的封装\"><a href=\"#基于对象的封装\" class=\"headerlink\" title=\"基于对象的封装\"></a>基于对象的封装</h3><p>这种方式就是直接封装，最典型的例子就是 C 语言中的结构体。<br>封装共享单车的「模板」如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SharedBicycle</span>&#123;</span></span><br><span class=\"line\">  车轮;</span><br><span class=\"line\">  二维码;</span><br><span class=\"line\">  开锁;</span><br><span class=\"line\">  关锁;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于类的封装\"><a href=\"#基于类的封装\" class=\"headerlink\" title=\"基于类的封装\"></a>基于类的封装</h3><p>大多数「面向对象」的语言，如 Java，Scala，C++等，都使用这种方式封装，「模板」如下：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SharedBicycle</span></span>&#123;</span><br><span class=\"line\">  属性：车轮;</span><br><span class=\"line\">  属性：二维码;</span><br><span class=\"line\">  方法：开锁;</span><br><span class=\"line\">  方法：关锁;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"基于原型的封装\"><a href=\"#基于原型的封装\" class=\"headerlink\" title=\"基于原型的封装\"></a>基于原型的封装</h3><p>JavaScript 就是使用这种封装方式，「模板」如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SharedBicycle</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.车轮 = xxx;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.二维码 = xxx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//添加原型方法</span></span><br><span class=\"line\">SharedBicycle.prototype.开锁 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;;</span><br><span class=\"line\">SharedBicycle.prototype.关锁 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"纯面向对象\"><a href=\"#纯面向对象\" class=\"headerlink\" title=\"纯面向对象\"></a>纯面向对象</h3><p>我们已经得知，可以用多种实现面向对象的不同技术，那么什么是纯面向对象的语言呢？</p>\n<p>我们知道 Java 是一门「面向对象」的语言，那么在 Java 中是否真的「万物皆对象」？    </p>\n<p>在 Java 中，我们可以写这么一段代码 <code>int a = 3;</code>　然后我们发现 <code>a</code>  并没有封装任何的属性或者方法。</p>\n<p>因此我们可以说 <code>a</code> 不是一个「对象」，Java 不是一门「纯粹面向对象」的语言。</p>\n<p>再看看 Scala ，不论是低阶的 <code>Int</code>，<code>Double</code>，还是高阶类型，都封装有属性或者方法，因此 Scala 才是一门「纯粹面向对象」的语言。</p>\n<p>那么是什么支持 Scala 一切皆为「对象」的呢？－<strong>Scala 的通用类型系统。</strong></p>\n<h2 id=\"Scala-通用类型系统\"><a href=\"#Scala-通用类型系统\" class=\"headerlink\" title=\"Scala 通用类型系统\"></a>Scala 通用类型系统</h2><h3 id=\"顶类型\"><a href=\"#顶类型\" class=\"headerlink\" title=\"顶类型\"></a>顶类型</h3><p>我们知道，在 Java 中，所有「对象」的「顶类型」都是 <code>java.lang.Object</code>，但是 Java 却忽略了 <code>int</code>，<code>double</code>等 JVM 「原始类型」,它们并没有继承 <code>java.lang.Object</code>。</p>\n<p>但是在 Scala 中，存在一个通用的「顶类型」－　Any。</p>\n<p><img src=\"/image/java2Scala-1-oop/scala-unified-types.png\" alt=\"\"></p>\n<p>Scala 引入了<code>Any</code> 作为所有类型共同的顶类型。<code>Any</code> 是 <code>AnyRef</code> 和 <code>AnyVal</code> 的超类。</p>\n<p><code>AnyRef</code> 面向 Java（JVM）的对象世界，它对应 <code>java.lang.Object</code> ，是所有对象的超类。</p>\n<p><code>AnyVal</code> 则代表了 Java 的值世界，例如 <code>int</code> 以及其它 JVM 原始类型。</p>\n<p>正是依赖这种继承设计，我们才能够使用 <code>Any</code> 定义方法，同时兼容 <code>scala.int</code> 以及 <code>java.lang.String</code> 的实例。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">allThings</span> </span>= <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Any</span>]()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> myInt = <span class=\"number\">42</span>             <span class=\"comment\">// Int, kept as low-level `int` during runtime</span></span><br><span class=\"line\"></span><br><span class=\"line\">allThings += myInt         <span class=\"comment\">// Int (extends AnyVal)</span></span><br><span class=\"line\"></span><br><span class=\"line\">allThings += <span class=\"keyword\">new</span> <span class=\"type\">Person</span>()  <span class=\"comment\">// Person (extends AnyRef), no magic here</span></span><br></pre></td></tr></table></figure>\n<p>正是通过这种「通用类型系统」的设计，使得 Scala 摆脱「原始类型」这种边缘情况的纠缠，从而实现「纯粹的面向对象」。</p>\n<p>说完了「顶类型」，我们再来看看「底类型」。</p>\n<h3 id=\"底类型\"><a href=\"#底类型\" class=\"headerlink\" title=\"底类型\"></a>底类型</h3><p>我们知道在 Java 中比较闹心的就是异常处理，当我们调用一个抛出异常的方法，我们必须抛出或者处理异常。</p>\n<p>但是在 Scala 中，我们知道一切表达式皆有类型，难道「抛异常」也是有类型的？</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> a = <span class=\"type\">Try</span>(<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">Exception</span>(<span class=\"string\">\"123\"</span>))</span><br><span class=\"line\">a: scala.util.<span class=\"type\">Try</span>[<span class=\"type\">Nothing</span>] = <span class=\"type\">Failure</span>(java.lang.<span class=\"type\">Exception</span>: <span class=\"number\">123</span>)</span><br></pre></td></tr></table></figure>\n<p>我们发现「抛异常」竟然是 <code>Nothing</code> 类型，在 Scala 中，难道 <code>Nothing</code> 仅仅是作为「抛异常」的类型？</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scala&gt;  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun</span></span>(flag:<span class=\"type\">Boolean</span>)=&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">            <span class=\"number\">1</span>                          <span class=\"comment\">// Int</span></span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">Exception</span>(<span class=\"string\">\"123\"</span>) <span class=\"comment\">//Nothing</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">fun: (flag: <span class=\"type\">Boolean</span>)<span class=\"type\">Int</span></span><br></pre></td></tr></table></figure>\n<p>我们发现 <code>fun</code> 函数并没有报错，而且返回值类型竟然是 <code>Int</code>，这让我们有一个大胆的猜测：<strong><code>Nothing</code> 是 <code>Int</code> 的子类型。</strong></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">Int</span>] -&gt; ... -&gt; <span class=\"type\">AnyVal</span> -&gt; <span class=\"type\">Any</span></span><br><span class=\"line\"><span class=\"type\">Nothing</span> -&gt; [<span class=\"type\">Int</span>] -&gt; ... -&gt; <span class=\"type\">AnyVal</span> -&gt; <span class=\"type\">Any</span></span><br></pre></td></tr></table></figure>\n<p>其实在 Scala 中， <code>Nothing</code> 不仅仅是 <code>Int</code> 的子类型，它更是<strong>所有类型的子类型。</strong> 这让我们又产生了一个大胆的猜测：难道 <code>Nothing</code> 继承了所有的类型？咳咳，这个问题我们以后在讨论。</p>\n<p>在 Scala 中，还有一个类型 <code>Null</code> 遵循着和 <code>Nothing</code> 一样的原理。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun2</span></span>(flag:<span class=\"type\">Boolean</span>)=&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">            <span class=\"string\">\"123\"</span>  <span class=\"comment\">//String</span></span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"literal\">null</span>   <span class=\"comment\">//Null</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">fun2: (flag: <span class=\"type\">Boolean</span>)<span class=\"type\">String</span></span><br></pre></td></tr></table></figure>\n<p>同理，我们可以得出 <code>Null</code> 是 <code>String的子类型</code><br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">String</span>] -&gt; <span class=\"type\">AnyRef</span> -&gt; <span class=\"type\">Any</span></span><br><span class=\"line\"><span class=\"type\">Null</span> -&gt; [<span class=\"type\">String</span>] -&gt; <span class=\"type\">AnyRef</span> -&gt; <span class=\"type\">Any</span></span><br></pre></td></tr></table></figure></p>\n<p>那我们看看 <code>Null</code> 是否可以兼容 <code>Int</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scala&gt;  def fun3(flag:Boolean)=&#123;</span><br><span class=\"line\">          if(flag)&#123;</span><br><span class=\"line\">            123  //Int</span><br><span class=\"line\">          &#125;else&#123;</span><br><span class=\"line\">            null   //Null</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">fun3: (flag: Boolean)Any</span><br></pre></td></tr></table></figure></p>\n<p>我们发现 <code>fun3</code> 的返回值类型竟然是 <code>Any</code>，说明 <code>Null</code> 不能兼容 Scala 的「值类型」，其实从 Scala 的帮助手册中我们就可以得出结论：<code>Null</code> 继承了AnyRef，因此 <code>Null</code> 是所有<strong>引用类型</strong>的子类型。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Null</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnyRef</span></span></span><br></pre></td></tr></table></figure>\n<p>正因如此，<code>fun3</code> 的返回值类型才是 <code>Any</code>，因为 <code>Any</code> 才是 <code>AnyVal</code> 和 <code>AnyRef</code> 公共的超类。</p>\n<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>=======<br>「通用类型系统」我们就先介绍到这里，下面我们小结一下。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>1.模板是封装属性或者方法的一种抽象。<br>2.对象是具有属性或者方法的一种实体。<br>3.封装的方式有三种：基于对象、基于类、基于原型。<br>4.「面向对象」是一种设计程序的方式，它要求工程师以<strong>对象</strong>为最小单位设计程序。<br>5.「纯粹面向对象」要求一切变量皆为对象，Scala 是，Java 不是。<br>6.Scala 的「顶类型」是 <code>Any</code>，它有两个直接的子类型：<code>AnyRef</code> 面向 JVM 对象的世界，<code>AnyVal</code> 面向 JVM 值的世界。<br>7.Scala 有两个「底类型     」，<code>Nothing</code> 所有类型的底类型，<code>Null</code> 所有引用类型的底类型。<br>6.「通用类型系统」的设计使得 Scala 摆脱 JVM 原始类型的纠缠，从而实现「纯粹面向对象」。</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>a51c6619bb7b02ebf128c63cc9a28b20a4f015ce</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>本文以面向对象为引子，找到了一个 Java 和 Scala 共有的知识节点，从而引出 Scala 的通用类型系统。那么在下一篇文章中，我们由此展开进一步思考，到底什么是所谓的「类型」，以及 Scala 在类型方面存在哪些与 Java 不同的有趣的地方。</p>\n<blockquote>\n<p><a href=\"https://scala.cool/2017/03/scala-types-of-types-part-1/\" target=\"_blank\" rel=\"noopener\">Scala 类型的类型（一）。</a></p>\n</blockquote>"},{"title":"后端工程师入门前端页面重构（二）：心法 II","date":"2018-03-23T16:00:00.000Z","_content":"\n上一篇博客，我们介绍了前端页面重构应遵循的第一个心法－「清除浮动」，那么这篇我们就来聊聊第二个心法－「语义化」\n\n## Web 应用的交互性\n如果你在百度或者谷歌的输入框中输入「Scala」并且按下回车，那么百度或者谷歌就会给你展示很多条和「Scala」相关的搜索结果，那么百度是如何知道这些 Web 应用是和「Scala」相关的呢？\n<!-- more -->\n不仅仅是搜索引擎，分类信息网和网络爬虫等其它搜集 Web 应用信息的应用也需要这样的功能。此外对于 Web 应用的搭建者，他们更希望其它 Web 应用可以获取自己的 Web 应用信息，甚至精确到每个页面，这样它们的应用才能得到推广。\n\n因此在当今 Web 应用迅速的发展时期，不仅仅要在用户和 Web 应用之间搭建沟通的桥梁，Web 应用之间同样需要“沟通交流”。\n\n那么如何实现不同 Web 应用之间的交流呢？\n\n## 语义化\n第一种实现方式是让 Web 应用(尤其是搜索引擎)往人工智能方向发展，让 Web 应用尽可能智能化。这种实现方式的成本有点高，并且还得依赖于人工智能的发展，而且不是所有的 Web 应用都能拥有搜索引擎背后那雄厚的资源。\n\n第二种实现方式是让我们的代码更加**语义化**。我们最终展现给用户看到的是通过 CSS 渲染和添加了 JS 事件的 HTML，但是对于网页内容描述的只有 HTML 代码，而且搜索引擎最终读取的也是 HTML 代码　。\n\n因此在我们设计 Web 应用的时候，必须要回到内容本身，将内容本身的语义合理地表述出来，而不考虑它最终呈现给用户的是什么样子。\n\n那我们如何通过 HTML 将内容本身的语义合理的表达出来呢？\n\n### 精确的表达你想描述的内容\n这是一个「是什么」的概念，你描述的内容到底是什么？一段视频？一段文字？需要通过对应的 HTML 标签来精确的表达这些内容。\n\n例如你想表示这是一篇文章，那么你需要使用「article」标签，如果你想表示文章的标题或者子标题，那么你应该使用「hx」标签，如果你想表示这是文章中的一幅图片，你应该使用「img」标签，如果你想给文章加上页眉和页脚，那么你需要使用「header」和「footer」标签……\n\n总之，对内容本意描述的越精确越好。\n\n但是我们知道，主流的页面布局使用的是 DIV+CSS 的方式，「div」表达是是一个区块，它是一个抽象的概念，并没有的具体的语义。那么如何用它们来表达语义呢？\n\n我们可以给「div」添加 `id` 或者 `class` 属性来增强它的语义，虽然这种语义和上面的相比有点弱，但是还是可以被识别的，而且它们是表达并列关系语义的一种较好的方式。\n\n### 处理好层级关系\n「关系」在页面布局中是一个重要的概念，而且 HTML 的嵌套本身就表达一种包含关系。\n\n例如，在一篇文章中，文章的内容都是文章这个概念的子集，段落中或许有图片。\n\n因此我们需要使用「article」标签来包含所有的文章内容，在 「p」中嵌入「img」。\n\n就像这样：\n\n```html\n    <article>\n        <h1></h1>\n        <p>\n            <img/>\n        </p>\n        ...\n    </article>\n```\n当然，我们也可以通过 `class` 来增强它们的语义。但是如果父元素的 `class` 已经表示某些内容，那么子元素的 `class` 不需要重复的去表示。\n\n如父元素为`<article class=\"acticle\"></article>`，那么子元素使用`<h1 class=\"h1\"></h1>` 即可，使用`<h1 class=\"acticle-h1\"></h1>`反而显得赘余。\n\n除了包含关系，并列关系在页面布局中也很常见。文章中段落是并列的关系，我们使用 `p` 标签来表达它们的语义，可以使用 `class` 属性来增强它们属于同一个「类别」。\n\n```html\n<p class=\"paragraph\"></p>\n<p class=\"paragraph\"></p>\n<p class=\"paragraph\"></p>\n```\n### 资源的语义化\n上面的两种方法，都是针对具体的代码来实现语义化，可是对于整个 Web 应用而言，资源的划分是以 URL 为最小单位的，因此 URL 的语义化，会让搜索引擎可以更好的把握 Web 应用的功能，迅速的定位到具体的功能页面。\n\nURL 的设计应能展现 Web 应用的资源结构，下面的 URL 就很好的展现了 [dripower](https://drip.im/) 不同的「解决方案」：\n```html\nhttps://weixin.drip.im/solution/crm\nhttps://weixin.drip.im/solution/payment\nhttps://weixin.drip.im/solution/marketing\n```\n而且 URL 应该被纯粹的表达。如下面的例子：\n```html\nhttps://weixin.drip.im/index.php/solution/crm\nhttps://weixin.drip.im/solution/crm\n```\n虽然两个 URL 都能访问，但是明显第二个 URL 更好些，因为它更纯粹，更是技术无关性的。\n\n「心法篇」到这里就介绍完了，可是对于页面布局中的各种疑难杂症该如何解决呢？请大家继续关注这个系列的「招式篇」。\n\n>[知乎](https://www.zhihu.com/question/20455165)\n>[Understanding Semantic Web and Ontologies](https://pdfs.semanticscholar.org/fc3f/c9be203aeaf72b4737c28e4f4ac1ea3dadd1.pdf)\n","source":"_posts/2018/03/back-2-front-xinfa-2.md","raw":"---\ntitle: 后端工程师入门前端页面重构（二）：心法 II\ndate: 2018/03/24\ncategories: 前端页面重构系列\ntags:\n- 前端\n---\n\n上一篇博客，我们介绍了前端页面重构应遵循的第一个心法－「清除浮动」，那么这篇我们就来聊聊第二个心法－「语义化」\n\n## Web 应用的交互性\n如果你在百度或者谷歌的输入框中输入「Scala」并且按下回车，那么百度或者谷歌就会给你展示很多条和「Scala」相关的搜索结果，那么百度是如何知道这些 Web 应用是和「Scala」相关的呢？\n<!-- more -->\n不仅仅是搜索引擎，分类信息网和网络爬虫等其它搜集 Web 应用信息的应用也需要这样的功能。此外对于 Web 应用的搭建者，他们更希望其它 Web 应用可以获取自己的 Web 应用信息，甚至精确到每个页面，这样它们的应用才能得到推广。\n\n因此在当今 Web 应用迅速的发展时期，不仅仅要在用户和 Web 应用之间搭建沟通的桥梁，Web 应用之间同样需要“沟通交流”。\n\n那么如何实现不同 Web 应用之间的交流呢？\n\n## 语义化\n第一种实现方式是让 Web 应用(尤其是搜索引擎)往人工智能方向发展，让 Web 应用尽可能智能化。这种实现方式的成本有点高，并且还得依赖于人工智能的发展，而且不是所有的 Web 应用都能拥有搜索引擎背后那雄厚的资源。\n\n第二种实现方式是让我们的代码更加**语义化**。我们最终展现给用户看到的是通过 CSS 渲染和添加了 JS 事件的 HTML，但是对于网页内容描述的只有 HTML 代码，而且搜索引擎最终读取的也是 HTML 代码　。\n\n因此在我们设计 Web 应用的时候，必须要回到内容本身，将内容本身的语义合理地表述出来，而不考虑它最终呈现给用户的是什么样子。\n\n那我们如何通过 HTML 将内容本身的语义合理的表达出来呢？\n\n### 精确的表达你想描述的内容\n这是一个「是什么」的概念，你描述的内容到底是什么？一段视频？一段文字？需要通过对应的 HTML 标签来精确的表达这些内容。\n\n例如你想表示这是一篇文章，那么你需要使用「article」标签，如果你想表示文章的标题或者子标题，那么你应该使用「hx」标签，如果你想表示这是文章中的一幅图片，你应该使用「img」标签，如果你想给文章加上页眉和页脚，那么你需要使用「header」和「footer」标签……\n\n总之，对内容本意描述的越精确越好。\n\n但是我们知道，主流的页面布局使用的是 DIV+CSS 的方式，「div」表达是是一个区块，它是一个抽象的概念，并没有的具体的语义。那么如何用它们来表达语义呢？\n\n我们可以给「div」添加 `id` 或者 `class` 属性来增强它的语义，虽然这种语义和上面的相比有点弱，但是还是可以被识别的，而且它们是表达并列关系语义的一种较好的方式。\n\n### 处理好层级关系\n「关系」在页面布局中是一个重要的概念，而且 HTML 的嵌套本身就表达一种包含关系。\n\n例如，在一篇文章中，文章的内容都是文章这个概念的子集，段落中或许有图片。\n\n因此我们需要使用「article」标签来包含所有的文章内容，在 「p」中嵌入「img」。\n\n就像这样：\n\n```html\n    <article>\n        <h1></h1>\n        <p>\n            <img/>\n        </p>\n        ...\n    </article>\n```\n当然，我们也可以通过 `class` 来增强它们的语义。但是如果父元素的 `class` 已经表示某些内容，那么子元素的 `class` 不需要重复的去表示。\n\n如父元素为`<article class=\"acticle\"></article>`，那么子元素使用`<h1 class=\"h1\"></h1>` 即可，使用`<h1 class=\"acticle-h1\"></h1>`反而显得赘余。\n\n除了包含关系，并列关系在页面布局中也很常见。文章中段落是并列的关系，我们使用 `p` 标签来表达它们的语义，可以使用 `class` 属性来增强它们属于同一个「类别」。\n\n```html\n<p class=\"paragraph\"></p>\n<p class=\"paragraph\"></p>\n<p class=\"paragraph\"></p>\n```\n### 资源的语义化\n上面的两种方法，都是针对具体的代码来实现语义化，可是对于整个 Web 应用而言，资源的划分是以 URL 为最小单位的，因此 URL 的语义化，会让搜索引擎可以更好的把握 Web 应用的功能，迅速的定位到具体的功能页面。\n\nURL 的设计应能展现 Web 应用的资源结构，下面的 URL 就很好的展现了 [dripower](https://drip.im/) 不同的「解决方案」：\n```html\nhttps://weixin.drip.im/solution/crm\nhttps://weixin.drip.im/solution/payment\nhttps://weixin.drip.im/solution/marketing\n```\n而且 URL 应该被纯粹的表达。如下面的例子：\n```html\nhttps://weixin.drip.im/index.php/solution/crm\nhttps://weixin.drip.im/solution/crm\n```\n虽然两个 URL 都能访问，但是明显第二个 URL 更好些，因为它更纯粹，更是技术无关性的。\n\n「心法篇」到这里就介绍完了，可是对于页面布局中的各种疑难杂症该如何解决呢？请大家继续关注这个系列的「招式篇」。\n\n>[知乎](https://www.zhihu.com/question/20455165)\n>[Understanding Semantic Web and Ontologies](https://pdfs.semanticscholar.org/fc3f/c9be203aeaf72b4737c28e4f4ac1ea3dadd1.pdf)\n","slug":"2018/03/back-2-front-xinfa-2","published":1,"updated":"2018-04-01T03:04:19.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpnl001amc55xqpp7fd7","content":"<p>上一篇博客，我们介绍了前端页面重构应遵循的第一个心法－「清除浮动」，那么这篇我们就来聊聊第二个心法－「语义化」</p>\n<h2 id=\"Web-应用的交互性\"><a href=\"#Web-应用的交互性\" class=\"headerlink\" title=\"Web 应用的交互性\"></a>Web 应用的交互性</h2><p>如果你在百度或者谷歌的输入框中输入「Scala」并且按下回车，那么百度或者谷歌就会给你展示很多条和「Scala」相关的搜索结果，那么百度是如何知道这些 Web 应用是和「Scala」相关的呢？<br><a id=\"more\"></a><br>不仅仅是搜索引擎，分类信息网和网络爬虫等其它搜集 Web 应用信息的应用也需要这样的功能。此外对于 Web 应用的搭建者，他们更希望其它 Web 应用可以获取自己的 Web 应用信息，甚至精确到每个页面，这样它们的应用才能得到推广。</p>\n<p>因此在当今 Web 应用迅速的发展时期，不仅仅要在用户和 Web 应用之间搭建沟通的桥梁，Web 应用之间同样需要“沟通交流”。</p>\n<p>那么如何实现不同 Web 应用之间的交流呢？</p>\n<h2 id=\"语义化\"><a href=\"#语义化\" class=\"headerlink\" title=\"语义化\"></a>语义化</h2><p>第一种实现方式是让 Web 应用(尤其是搜索引擎)往人工智能方向发展，让 Web 应用尽可能智能化。这种实现方式的成本有点高，并且还得依赖于人工智能的发展，而且不是所有的 Web 应用都能拥有搜索引擎背后那雄厚的资源。</p>\n<p>第二种实现方式是让我们的代码更加<strong>语义化</strong>。我们最终展现给用户看到的是通过 CSS 渲染和添加了 JS 事件的 HTML，但是对于网页内容描述的只有 HTML 代码，而且搜索引擎最终读取的也是 HTML 代码　。</p>\n<p>因此在我们设计 Web 应用的时候，必须要回到内容本身，将内容本身的语义合理地表述出来，而不考虑它最终呈现给用户的是什么样子。</p>\n<p>那我们如何通过 HTML 将内容本身的语义合理的表达出来呢？</p>\n<h3 id=\"精确的表达你想描述的内容\"><a href=\"#精确的表达你想描述的内容\" class=\"headerlink\" title=\"精确的表达你想描述的内容\"></a>精确的表达你想描述的内容</h3><p>这是一个「是什么」的概念，你描述的内容到底是什么？一段视频？一段文字？需要通过对应的 HTML 标签来精确的表达这些内容。</p>\n<p>例如你想表示这是一篇文章，那么你需要使用「article」标签，如果你想表示文章的标题或者子标题，那么你应该使用「hx」标签，如果你想表示这是文章中的一幅图片，你应该使用「img」标签，如果你想给文章加上页眉和页脚，那么你需要使用「header」和「footer」标签……</p>\n<p>总之，对内容本意描述的越精确越好。</p>\n<p>但是我们知道，主流的页面布局使用的是 DIV+CSS 的方式，「div」表达是是一个区块，它是一个抽象的概念，并没有的具体的语义。那么如何用它们来表达语义呢？</p>\n<p>我们可以给「div」添加 <code>id</code> 或者 <code>class</code> 属性来增强它的语义，虽然这种语义和上面的相比有点弱，但是还是可以被识别的，而且它们是表达并列关系语义的一种较好的方式。</p>\n<h3 id=\"处理好层级关系\"><a href=\"#处理好层级关系\" class=\"headerlink\" title=\"处理好层级关系\"></a>处理好层级关系</h3><p>「关系」在页面布局中是一个重要的概念，而且 HTML 的嵌套本身就表达一种包含关系。</p>\n<p>例如，在一篇文章中，文章的内容都是文章这个概念的子集，段落中或许有图片。</p>\n<p>因此我们需要使用「article」标签来包含所有的文章内容，在 「p」中嵌入「img」。</p>\n<p>就像这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当然，我们也可以通过 <code>class</code> 来增强它们的语义。但是如果父元素的 <code>class</code> 已经表示某些内容，那么子元素的 <code>class</code> 不需要重复的去表示。</p>\n<p>如父元素为<code>&lt;article class=&quot;acticle&quot;&gt;&lt;/article&gt;</code>，那么子元素使用<code>&lt;h1 class=&quot;h1&quot;&gt;&lt;/h1&gt;</code> 即可，使用<code>&lt;h1 class=&quot;acticle-h1&quot;&gt;&lt;/h1&gt;</code>反而显得赘余。</p>\n<p>除了包含关系，并列关系在页面布局中也很常见。文章中段落是并列的关系，我们使用 <code>p</code> 标签来表达它们的语义，可以使用 <code>class</code> 属性来增强它们属于同一个「类别」。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"paragraph\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"paragraph\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"paragraph\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"资源的语义化\"><a href=\"#资源的语义化\" class=\"headerlink\" title=\"资源的语义化\"></a>资源的语义化</h3><p>上面的两种方法，都是针对具体的代码来实现语义化，可是对于整个 Web 应用而言，资源的划分是以 URL 为最小单位的，因此 URL 的语义化，会让搜索引擎可以更好的把握 Web 应用的功能，迅速的定位到具体的功能页面。</p>\n<p>URL 的设计应能展现 Web 应用的资源结构，下面的 URL 就很好的展现了 <a href=\"https://drip.im/\" target=\"_blank\" rel=\"noopener\">dripower</a> 不同的「解决方案」：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://weixin.drip.im/solution/crm</span><br><span class=\"line\">https://weixin.drip.im/solution/payment</span><br><span class=\"line\">https://weixin.drip.im/solution/marketing</span><br></pre></td></tr></table></figure></p>\n<p>而且 URL 应该被纯粹的表达。如下面的例子：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://weixin.drip.im/index.php/solution/crm</span><br><span class=\"line\">https://weixin.drip.im/solution/crm</span><br></pre></td></tr></table></figure></p>\n<p>虽然两个 URL 都能访问，但是明显第二个 URL 更好些，因为它更纯粹，更是技术无关性的。</p>\n<p>「心法篇」到这里就介绍完了，可是对于页面布局中的各种疑难杂症该如何解决呢？请大家继续关注这个系列的「招式篇」。</p>\n<blockquote>\n<p><a href=\"https://www.zhihu.com/question/20455165\" target=\"_blank\" rel=\"noopener\">知乎</a><br><a href=\"https://pdfs.semanticscholar.org/fc3f/c9be203aeaf72b4737c28e4f4ac1ea3dadd1.pdf\" target=\"_blank\" rel=\"noopener\">Understanding Semantic Web and Ontologies</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>上一篇博客，我们介绍了前端页面重构应遵循的第一个心法－「清除浮动」，那么这篇我们就来聊聊第二个心法－「语义化」</p>\n<h2 id=\"Web-应用的交互性\"><a href=\"#Web-应用的交互性\" class=\"headerlink\" title=\"Web 应用的交互性\"></a>Web 应用的交互性</h2><p>如果你在百度或者谷歌的输入框中输入「Scala」并且按下回车，那么百度或者谷歌就会给你展示很多条和「Scala」相关的搜索结果，那么百度是如何知道这些 Web 应用是和「Scala」相关的呢？<br>","more":"<br>不仅仅是搜索引擎，分类信息网和网络爬虫等其它搜集 Web 应用信息的应用也需要这样的功能。此外对于 Web 应用的搭建者，他们更希望其它 Web 应用可以获取自己的 Web 应用信息，甚至精确到每个页面，这样它们的应用才能得到推广。</p>\n<p>因此在当今 Web 应用迅速的发展时期，不仅仅要在用户和 Web 应用之间搭建沟通的桥梁，Web 应用之间同样需要“沟通交流”。</p>\n<p>那么如何实现不同 Web 应用之间的交流呢？</p>\n<h2 id=\"语义化\"><a href=\"#语义化\" class=\"headerlink\" title=\"语义化\"></a>语义化</h2><p>第一种实现方式是让 Web 应用(尤其是搜索引擎)往人工智能方向发展，让 Web 应用尽可能智能化。这种实现方式的成本有点高，并且还得依赖于人工智能的发展，而且不是所有的 Web 应用都能拥有搜索引擎背后那雄厚的资源。</p>\n<p>第二种实现方式是让我们的代码更加<strong>语义化</strong>。我们最终展现给用户看到的是通过 CSS 渲染和添加了 JS 事件的 HTML，但是对于网页内容描述的只有 HTML 代码，而且搜索引擎最终读取的也是 HTML 代码　。</p>\n<p>因此在我们设计 Web 应用的时候，必须要回到内容本身，将内容本身的语义合理地表述出来，而不考虑它最终呈现给用户的是什么样子。</p>\n<p>那我们如何通过 HTML 将内容本身的语义合理的表达出来呢？</p>\n<h3 id=\"精确的表达你想描述的内容\"><a href=\"#精确的表达你想描述的内容\" class=\"headerlink\" title=\"精确的表达你想描述的内容\"></a>精确的表达你想描述的内容</h3><p>这是一个「是什么」的概念，你描述的内容到底是什么？一段视频？一段文字？需要通过对应的 HTML 标签来精确的表达这些内容。</p>\n<p>例如你想表示这是一篇文章，那么你需要使用「article」标签，如果你想表示文章的标题或者子标题，那么你应该使用「hx」标签，如果你想表示这是文章中的一幅图片，你应该使用「img」标签，如果你想给文章加上页眉和页脚，那么你需要使用「header」和「footer」标签……</p>\n<p>总之，对内容本意描述的越精确越好。</p>\n<p>但是我们知道，主流的页面布局使用的是 DIV+CSS 的方式，「div」表达是是一个区块，它是一个抽象的概念，并没有的具体的语义。那么如何用它们来表达语义呢？</p>\n<p>我们可以给「div」添加 <code>id</code> 或者 <code>class</code> 属性来增强它的语义，虽然这种语义和上面的相比有点弱，但是还是可以被识别的，而且它们是表达并列关系语义的一种较好的方式。</p>\n<h3 id=\"处理好层级关系\"><a href=\"#处理好层级关系\" class=\"headerlink\" title=\"处理好层级关系\"></a>处理好层级关系</h3><p>「关系」在页面布局中是一个重要的概念，而且 HTML 的嵌套本身就表达一种包含关系。</p>\n<p>例如，在一篇文章中，文章的内容都是文章这个概念的子集，段落中或许有图片。</p>\n<p>因此我们需要使用「article」标签来包含所有的文章内容，在 「p」中嵌入「img」。</p>\n<p>就像这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当然，我们也可以通过 <code>class</code> 来增强它们的语义。但是如果父元素的 <code>class</code> 已经表示某些内容，那么子元素的 <code>class</code> 不需要重复的去表示。</p>\n<p>如父元素为<code>&lt;article class=&quot;acticle&quot;&gt;&lt;/article&gt;</code>，那么子元素使用<code>&lt;h1 class=&quot;h1&quot;&gt;&lt;/h1&gt;</code> 即可，使用<code>&lt;h1 class=&quot;acticle-h1&quot;&gt;&lt;/h1&gt;</code>反而显得赘余。</p>\n<p>除了包含关系，并列关系在页面布局中也很常见。文章中段落是并列的关系，我们使用 <code>p</code> 标签来表达它们的语义，可以使用 <code>class</code> 属性来增强它们属于同一个「类别」。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"paragraph\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"paragraph\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"paragraph\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"资源的语义化\"><a href=\"#资源的语义化\" class=\"headerlink\" title=\"资源的语义化\"></a>资源的语义化</h3><p>上面的两种方法，都是针对具体的代码来实现语义化，可是对于整个 Web 应用而言，资源的划分是以 URL 为最小单位的，因此 URL 的语义化，会让搜索引擎可以更好的把握 Web 应用的功能，迅速的定位到具体的功能页面。</p>\n<p>URL 的设计应能展现 Web 应用的资源结构，下面的 URL 就很好的展现了 <a href=\"https://drip.im/\" target=\"_blank\" rel=\"noopener\">dripower</a> 不同的「解决方案」：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://weixin.drip.im/solution/crm</span><br><span class=\"line\">https://weixin.drip.im/solution/payment</span><br><span class=\"line\">https://weixin.drip.im/solution/marketing</span><br></pre></td></tr></table></figure></p>\n<p>而且 URL 应该被纯粹的表达。如下面的例子：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://weixin.drip.im/index.php/solution/crm</span><br><span class=\"line\">https://weixin.drip.im/solution/crm</span><br></pre></td></tr></table></figure></p>\n<p>虽然两个 URL 都能访问，但是明显第二个 URL 更好些，因为它更纯粹，更是技术无关性的。</p>\n<p>「心法篇」到这里就介绍完了，可是对于页面布局中的各种疑难杂症该如何解决呢？请大家继续关注这个系列的「招式篇」。</p>\n<blockquote>\n<p><a href=\"https://www.zhihu.com/question/20455165\" target=\"_blank\" rel=\"noopener\">知乎</a><br><a href=\"https://pdfs.semanticscholar.org/fc3f/c9be203aeaf72b4737c28e4f4ac1ea3dadd1.pdf\" target=\"_blank\" rel=\"noopener\">Understanding Semantic Web and Ontologies</a></p>\n</blockquote>"},{"title":"Kotlin Type? VS Scala Option","date":"2018-06-19T16:00:00.000Z","_content":"最近阅读一些关于 Kotlin 类型系统方面的书，发现 Kotlin 的类型系统针对 `null` 有着独特的设计哲学。在 Java 或者其它编程语言中，经常会出现 `NullPointerException`，而导致此异常的重要原因是因为你可以写 `String s = null` 这样的代码。其实可以认为这是 Java 等语言类型系统设计的一个缺陷，它们允许 `null` 可以作为任何类型的值！\n\n但是在 Kotlin 中，如果你声明 `val s: String = null`，那么编译器会给你一个 error，因为在 Kotlin 中，你不允许把一个 `null` 值赋给一个普通的类型。如果你声明一个这样的函数 `fun strLen(s: String) = {...}`，那么这个函数将不接受值为 `null` 的参数。\n<!-- more -->\n\n这个设计看起来如此的美好，他可以极大程度的减少 Kotlin 产生 `NullPointerException`，可是如果有一天，你需要调用一个方法，它的返回值可能为 `null` 也可能为 `String` ，那么在 Kotlin 中你可以声明一个可空的字符串类型：`String?`。`val s: String? = null` 此时 Kotlin 的编译器会让这行代码通过。当然它也可以接收一个普通的 `String` 类型的值 `val s: String? = \"abc\"`。\n\n可空类型(`Type?`)的设计，是 Kotlin 另一个设计哲学，它要求工程师在设计的时候就需要确定该变量是否可为空。如果不为空就使用`Type` 类型声明，否则就使用 `Type?` 类型声明。这让我想起在 Scala 中存在一个和 `Type?` 有着异曲同工之妙的一个类型—— `Option[T]`。\n\n`Option[T]` 有两个子类型：`Some[T]` 和 `None`，你可以使用 `val s: Option[String] = Some(\"123\")` 来表示一个字符串存在，当然你可以使用`val s: Option[String] = None` 来表示这个字符串不存在。\n\nScala 和 Kotlin 都是基于 JVM 的编程语言，而 `Option[T]` 和 `Type?` 的设计就是用来解决 JVM 平台出现的 `NullPointerException`。但二者的设计理念却截然不同，Scala 的 `Option[T]` 是在原有类型基础上使用 `Option` 做一层封装，而 Koltin 的 `Type?` 是使用语法糖完成的。\n\n那么这两种设计方案到底谁更好一点呢？我们将会使用以下标准来分别测试它们：\n* 是否可以完美的规避 `NullPointerException` —— 二者的设计都是为了解决 `NullPointerException`，谁可以更好的规避这个问题呢？\n* 代码的可读性 —— 如果在复杂的业务中，谁的代码可读性更好一点呢？\n* 性能\n\n## 规避空指针\n在上文中，我们曾经提过，`NullPointerException` 产生的原因是你可以把一个 `null` 的值传递给一个类型的变量，然后调用这个类型的方法。我们可以使用 Java 的代码来表示一下：`String s = null; s.length()`。\n\n在 `Type?` 的设计理念中，对于不确定是否为 `null` 类型可以使用 `Type?` 类型来声明，如`val s: String? = getString... `，此时 `s` 的类型是 `String?`，你不能直接调用 `s.length`，你需要进行安全调用`s?.length`。这个函数的返回类型是一个 `Int?`，这很正常，对于一个不确定是否为 `null` 的类型进行安全调用返回当然是一个 `Type?` 类型。如果 `s` 不为 `null` 正常返回 `s` 的长度，否则返回 `null`。除此之外， Kotlin 还针对 `Type?` 提供了 Elvis 操作和 let 函数，具体的用法可以参考 Kotlin 官方手册。\n\n而在 `Optional` 的设计哲学中，你可以使用 `Option[T]` 来包裹一个不确定是否为 `null` 的值。这里我们使用 Scala 的代码来演示：`val s: Option[String] = Option(getString...)`，此时 `s` 的类型为 `Option[String]`，你仍然不能直接调用`s.length`，你可以使用 `map` 函数：`s.map(s => s.length)`，它的返回值是一个 `Option[Int]` 类型。和 `Type?` 很类似，对一个 `Option[T]` 类型使用 `map` 函数，结果当然是一个 `Option[S]` 类型。在 Scala 中，你也可以使用模式匹配来处理 `Option` 类型。\n\n总结：二者都可以完美的规避 `NullPointerException`，`Type?` 使用安全调用来避免直接调用 `Type` 类型的方法，而 `Option` 则使用 map 函数或者模式匹配来处理。本质上都是避免直接调用值可能为 `null` 的类型变量的方法。\n\n## 代码可读性\n实际的业务是比较复杂的，例如，我们需要计算两个数字字符串的乘积，首先我们需要把他们转换为 `Int` 类型，如果其中一个字符串是转换失败，则无法计算结果。\n\n在 Kotlin 的 `Type?` 中，我们需要重新定义 `String` 类型的 `toInt` 方法，让它返回一个 `Int?` 类型，代码如下：\n```Kotlin\nfun tryString2Int(a: String) = try {\n    a.toInt()\n}catch (e:Exception){\n    null\n}\n```\n然后我们需要定义一个方法来计算两个数字字符串的乘积，这里我们使用 `Type?` 的 let 函数，它接受一个 Lambda 表达式，如果调用者的值不为 `null`，则调用 Lambda 表达式，否则直接返回 `null`。`strNumberMuti` 函数返回的是一个 `Double?` 类型，如果有任何一个字符串转换数字失败，就返回 `null`，都转换成功才计算乘积。\n```Kotlin\nfun strNumberMuti(s1: String, s2: String): Double? =\n    tryString2Int(s1)?.let{ a ->\n        tryString2Int(s2)?.let {\n            t -> a * t * 1.0 }}\n```\n这段代码的可读取有点差呀，而且在实际的业务开发过程中，可能会有更多的 `Type?` 类型，那代码岂不是要爆炸了！。幸运的是，Kotlin 允许我们使用 `if` 来代替 `let` 函数 做相同的判断，代码如下：\n```Kotlin\nfun strNumberMuti2(s1: String, s2: String):Double? {\n    val a = tryString2Int(s1)\n    val b = tryString2Int(s2)\n    return if(a!=null && b!= null) a * b * 1.0 else null\n}\n```\n这样的代码可读性就好多了，但是丢失函数式的编程美感。而且感觉 `Type?` 是一种语法糖，手动对 `Type?` 进行非空校验，就可以直接使用 `Type` 类型了！！\n\n同样的我们使用 Scala 的 `Option[T]` 来完成上面的需求，为了让 `toInt` 函数返回 `Option[T]` 类型，我们定义了一个 `Try` 函数，这个函数看不懂没关系，你只需知道它接受一个函数，并且返回一个 `Option[A]` 值即可。代码让如下：\n```Scala\ndef Try[A](a: => A): Option[A] = {\n    try Some(a)\n    catch {case e: Exception => None}\n  }\n```\n同样的，我们需要写一个函数，用来把两个字符串数字转换为整数，并且做它们的乘积，这里我们为了使代码更简洁，使用了 Scala 的 for 推导，具体的用法可以参考 Scala 官方的 Document。`strNumberNu`返回类型是 `Option[Double]`，如果有任何一个转换失败，返回 `None`，否则返回 `Some[Double]`，代码如下：\n\n```Scala\n def strNumberMuti(s1: String, s2: String): Option[Double] = {\n    for{\n      a <- Try{ s1.toInt }\n      b <- Try{ s2.toInt }\n    } yield a * b\n\n  }\n```\n可以看出，使用 Scala 的 `Option[T]` 更具有函数式的编程美感，而且代码的可读性极强，而且即使有更多的 `Option[T]`，for 推导都可以轻松应对。\n\n总结：面对比较复杂的业务场景，`Type?` 和 `Option[T]` 都可以轻松应对，但是 `Type?` 的用法就显得有些 low，还是使用 `!=null` 的套路，这也暴露了它的设计是存在缺陷的。相反的 `Option[T]` 的设计理念是完备的，而且极具函数式的编程美感。\n\n## 性能\n性能是衡量设计好坏的一个重要的方面，下面我们只做一个简单的测试：让两个字符串都是`\"999\"`，然后分别执行 Kotlin 的 `strNumberMuti` 和 Scala 的 `strNumberMuti` 一千万次，然后我们发现 Kotlin 的 `strNumberMuti` 执行时间大约在 1.9s，而 Scala 的 `strNumberMuti` 执行时间约在 5.0s。由此可以看出，Kotlin 的 `Type?` 比 Scala `Option[T]` 拥有更好的性能，其实这样很正常，因为 Kotlin 的 `Type?` 是语法糖，创建一个 `Type?` 的对象其实和创建一个 `Type` 的对象其实消耗的性能差不多，但是 `Option[T]`不仅仅需要创建 `T` 类型的对象，更需要创建 `Option[T]` 类型的对象来包裹 `T` 类型的对象，因此它的开销大一点。\n\n## 总结\n就我而言，我更喜欢 Scala 的 `Option[T]` 的设计，因为它是理论完备的，而且极具函数式的编程美感，即使它的性能要差一点。对于 Kotlin 的 `Type?` 类型，我觉得它的设计有瑕疵，就拿 `let` 函数举例，在单个 `Type?` 很好用，但是当多个 `Type?` 进行组合的时候，就显得很鸡肋。\n\n萝卜青菜，各有所爱，也许某天 Kotlin 也会让 `Type?` 具有函数式的编程美感。\n","source":"_posts/2018/06/TypeVSOptional.md","raw":"---\ntitle: Kotlin Type? VS Scala Option\ndate: 2018/06/20\ncategories: 编程语言\ntags:\n- Scala\n---\n最近阅读一些关于 Kotlin 类型系统方面的书，发现 Kotlin 的类型系统针对 `null` 有着独特的设计哲学。在 Java 或者其它编程语言中，经常会出现 `NullPointerException`，而导致此异常的重要原因是因为你可以写 `String s = null` 这样的代码。其实可以认为这是 Java 等语言类型系统设计的一个缺陷，它们允许 `null` 可以作为任何类型的值！\n\n但是在 Kotlin 中，如果你声明 `val s: String = null`，那么编译器会给你一个 error，因为在 Kotlin 中，你不允许把一个 `null` 值赋给一个普通的类型。如果你声明一个这样的函数 `fun strLen(s: String) = {...}`，那么这个函数将不接受值为 `null` 的参数。\n<!-- more -->\n\n这个设计看起来如此的美好，他可以极大程度的减少 Kotlin 产生 `NullPointerException`，可是如果有一天，你需要调用一个方法，它的返回值可能为 `null` 也可能为 `String` ，那么在 Kotlin 中你可以声明一个可空的字符串类型：`String?`。`val s: String? = null` 此时 Kotlin 的编译器会让这行代码通过。当然它也可以接收一个普通的 `String` 类型的值 `val s: String? = \"abc\"`。\n\n可空类型(`Type?`)的设计，是 Kotlin 另一个设计哲学，它要求工程师在设计的时候就需要确定该变量是否可为空。如果不为空就使用`Type` 类型声明，否则就使用 `Type?` 类型声明。这让我想起在 Scala 中存在一个和 `Type?` 有着异曲同工之妙的一个类型—— `Option[T]`。\n\n`Option[T]` 有两个子类型：`Some[T]` 和 `None`，你可以使用 `val s: Option[String] = Some(\"123\")` 来表示一个字符串存在，当然你可以使用`val s: Option[String] = None` 来表示这个字符串不存在。\n\nScala 和 Kotlin 都是基于 JVM 的编程语言，而 `Option[T]` 和 `Type?` 的设计就是用来解决 JVM 平台出现的 `NullPointerException`。但二者的设计理念却截然不同，Scala 的 `Option[T]` 是在原有类型基础上使用 `Option` 做一层封装，而 Koltin 的 `Type?` 是使用语法糖完成的。\n\n那么这两种设计方案到底谁更好一点呢？我们将会使用以下标准来分别测试它们：\n* 是否可以完美的规避 `NullPointerException` —— 二者的设计都是为了解决 `NullPointerException`，谁可以更好的规避这个问题呢？\n* 代码的可读性 —— 如果在复杂的业务中，谁的代码可读性更好一点呢？\n* 性能\n\n## 规避空指针\n在上文中，我们曾经提过，`NullPointerException` 产生的原因是你可以把一个 `null` 的值传递给一个类型的变量，然后调用这个类型的方法。我们可以使用 Java 的代码来表示一下：`String s = null; s.length()`。\n\n在 `Type?` 的设计理念中，对于不确定是否为 `null` 类型可以使用 `Type?` 类型来声明，如`val s: String? = getString... `，此时 `s` 的类型是 `String?`，你不能直接调用 `s.length`，你需要进行安全调用`s?.length`。这个函数的返回类型是一个 `Int?`，这很正常，对于一个不确定是否为 `null` 的类型进行安全调用返回当然是一个 `Type?` 类型。如果 `s` 不为 `null` 正常返回 `s` 的长度，否则返回 `null`。除此之外， Kotlin 还针对 `Type?` 提供了 Elvis 操作和 let 函数，具体的用法可以参考 Kotlin 官方手册。\n\n而在 `Optional` 的设计哲学中，你可以使用 `Option[T]` 来包裹一个不确定是否为 `null` 的值。这里我们使用 Scala 的代码来演示：`val s: Option[String] = Option(getString...)`，此时 `s` 的类型为 `Option[String]`，你仍然不能直接调用`s.length`，你可以使用 `map` 函数：`s.map(s => s.length)`，它的返回值是一个 `Option[Int]` 类型。和 `Type?` 很类似，对一个 `Option[T]` 类型使用 `map` 函数，结果当然是一个 `Option[S]` 类型。在 Scala 中，你也可以使用模式匹配来处理 `Option` 类型。\n\n总结：二者都可以完美的规避 `NullPointerException`，`Type?` 使用安全调用来避免直接调用 `Type` 类型的方法，而 `Option` 则使用 map 函数或者模式匹配来处理。本质上都是避免直接调用值可能为 `null` 的类型变量的方法。\n\n## 代码可读性\n实际的业务是比较复杂的，例如，我们需要计算两个数字字符串的乘积，首先我们需要把他们转换为 `Int` 类型，如果其中一个字符串是转换失败，则无法计算结果。\n\n在 Kotlin 的 `Type?` 中，我们需要重新定义 `String` 类型的 `toInt` 方法，让它返回一个 `Int?` 类型，代码如下：\n```Kotlin\nfun tryString2Int(a: String) = try {\n    a.toInt()\n}catch (e:Exception){\n    null\n}\n```\n然后我们需要定义一个方法来计算两个数字字符串的乘积，这里我们使用 `Type?` 的 let 函数，它接受一个 Lambda 表达式，如果调用者的值不为 `null`，则调用 Lambda 表达式，否则直接返回 `null`。`strNumberMuti` 函数返回的是一个 `Double?` 类型，如果有任何一个字符串转换数字失败，就返回 `null`，都转换成功才计算乘积。\n```Kotlin\nfun strNumberMuti(s1: String, s2: String): Double? =\n    tryString2Int(s1)?.let{ a ->\n        tryString2Int(s2)?.let {\n            t -> a * t * 1.0 }}\n```\n这段代码的可读取有点差呀，而且在实际的业务开发过程中，可能会有更多的 `Type?` 类型，那代码岂不是要爆炸了！。幸运的是，Kotlin 允许我们使用 `if` 来代替 `let` 函数 做相同的判断，代码如下：\n```Kotlin\nfun strNumberMuti2(s1: String, s2: String):Double? {\n    val a = tryString2Int(s1)\n    val b = tryString2Int(s2)\n    return if(a!=null && b!= null) a * b * 1.0 else null\n}\n```\n这样的代码可读性就好多了，但是丢失函数式的编程美感。而且感觉 `Type?` 是一种语法糖，手动对 `Type?` 进行非空校验，就可以直接使用 `Type` 类型了！！\n\n同样的我们使用 Scala 的 `Option[T]` 来完成上面的需求，为了让 `toInt` 函数返回 `Option[T]` 类型，我们定义了一个 `Try` 函数，这个函数看不懂没关系，你只需知道它接受一个函数，并且返回一个 `Option[A]` 值即可。代码让如下：\n```Scala\ndef Try[A](a: => A): Option[A] = {\n    try Some(a)\n    catch {case e: Exception => None}\n  }\n```\n同样的，我们需要写一个函数，用来把两个字符串数字转换为整数，并且做它们的乘积，这里我们为了使代码更简洁，使用了 Scala 的 for 推导，具体的用法可以参考 Scala 官方的 Document。`strNumberNu`返回类型是 `Option[Double]`，如果有任何一个转换失败，返回 `None`，否则返回 `Some[Double]`，代码如下：\n\n```Scala\n def strNumberMuti(s1: String, s2: String): Option[Double] = {\n    for{\n      a <- Try{ s1.toInt }\n      b <- Try{ s2.toInt }\n    } yield a * b\n\n  }\n```\n可以看出，使用 Scala 的 `Option[T]` 更具有函数式的编程美感，而且代码的可读性极强，而且即使有更多的 `Option[T]`，for 推导都可以轻松应对。\n\n总结：面对比较复杂的业务场景，`Type?` 和 `Option[T]` 都可以轻松应对，但是 `Type?` 的用法就显得有些 low，还是使用 `!=null` 的套路，这也暴露了它的设计是存在缺陷的。相反的 `Option[T]` 的设计理念是完备的，而且极具函数式的编程美感。\n\n## 性能\n性能是衡量设计好坏的一个重要的方面，下面我们只做一个简单的测试：让两个字符串都是`\"999\"`，然后分别执行 Kotlin 的 `strNumberMuti` 和 Scala 的 `strNumberMuti` 一千万次，然后我们发现 Kotlin 的 `strNumberMuti` 执行时间大约在 1.9s，而 Scala 的 `strNumberMuti` 执行时间约在 5.0s。由此可以看出，Kotlin 的 `Type?` 比 Scala `Option[T]` 拥有更好的性能，其实这样很正常，因为 Kotlin 的 `Type?` 是语法糖，创建一个 `Type?` 的对象其实和创建一个 `Type` 的对象其实消耗的性能差不多，但是 `Option[T]`不仅仅需要创建 `T` 类型的对象，更需要创建 `Option[T]` 类型的对象来包裹 `T` 类型的对象，因此它的开销大一点。\n\n## 总结\n就我而言，我更喜欢 Scala 的 `Option[T]` 的设计，因为它是理论完备的，而且极具函数式的编程美感，即使它的性能要差一点。对于 Kotlin 的 `Type?` 类型，我觉得它的设计有瑕疵，就拿 `let` 函数举例，在单个 `Type?` 很好用，但是当多个 `Type?` 进行组合的时候，就显得很鸡肋。\n\n萝卜青菜，各有所爱，也许某天 Kotlin 也会让 `Type?` 具有函数式的编程美感。\n","slug":"2018/06/TypeVSOptional","published":1,"updated":"2018-06-20T11:50:43.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnkdcpnm001cmc55wiwc0f2w","content":"<p>最近阅读一些关于 Kotlin 类型系统方面的书，发现 Kotlin 的类型系统针对 <code>null</code> 有着独特的设计哲学。在 Java 或者其它编程语言中，经常会出现 <code>NullPointerException</code>，而导致此异常的重要原因是因为你可以写 <code>String s = null</code> 这样的代码。其实可以认为这是 Java 等语言类型系统设计的一个缺陷，它们允许 <code>null</code> 可以作为任何类型的值！</p>\n<p>但是在 Kotlin 中，如果你声明 <code>val s: String = null</code>，那么编译器会给你一个 error，因为在 Kotlin 中，你不允许把一个 <code>null</code> 值赋给一个普通的类型。如果你声明一个这样的函数 <code>fun strLen(s: String) = {...}</code>，那么这个函数将不接受值为 <code>null</code> 的参数。<br><a id=\"more\"></a></p>\n<p>这个设计看起来如此的美好，他可以极大程度的减少 Kotlin 产生 <code>NullPointerException</code>，可是如果有一天，你需要调用一个方法，它的返回值可能为 <code>null</code> 也可能为 <code>String</code> ，那么在 Kotlin 中你可以声明一个可空的字符串类型：<code>String?</code>。<code>val s: String? = null</code> 此时 Kotlin 的编译器会让这行代码通过。当然它也可以接收一个普通的 <code>String</code> 类型的值 <code>val s: String? = &quot;abc&quot;</code>。</p>\n<p>可空类型(<code>Type?</code>)的设计，是 Kotlin 另一个设计哲学，它要求工程师在设计的时候就需要确定该变量是否可为空。如果不为空就使用<code>Type</code> 类型声明，否则就使用 <code>Type?</code> 类型声明。这让我想起在 Scala 中存在一个和 <code>Type?</code> 有着异曲同工之妙的一个类型—— <code>Option[T]</code>。</p>\n<p><code>Option[T]</code> 有两个子类型：<code>Some[T]</code> 和 <code>None</code>，你可以使用 <code>val s: Option[String] = Some(&quot;123&quot;)</code> 来表示一个字符串存在，当然你可以使用<code>val s: Option[String] = None</code> 来表示这个字符串不存在。</p>\n<p>Scala 和 Kotlin 都是基于 JVM 的编程语言，而 <code>Option[T]</code> 和 <code>Type?</code> 的设计就是用来解决 JVM 平台出现的 <code>NullPointerException</code>。但二者的设计理念却截然不同，Scala 的 <code>Option[T]</code> 是在原有类型基础上使用 <code>Option</code> 做一层封装，而 Koltin 的 <code>Type?</code> 是使用语法糖完成的。</p>\n<p>那么这两种设计方案到底谁更好一点呢？我们将会使用以下标准来分别测试它们：</p>\n<ul>\n<li>是否可以完美的规避 <code>NullPointerException</code> —— 二者的设计都是为了解决 <code>NullPointerException</code>，谁可以更好的规避这个问题呢？</li>\n<li>代码的可读性 —— 如果在复杂的业务中，谁的代码可读性更好一点呢？</li>\n<li>性能</li>\n</ul>\n<h2 id=\"规避空指针\"><a href=\"#规避空指针\" class=\"headerlink\" title=\"规避空指针\"></a>规避空指针</h2><p>在上文中，我们曾经提过，<code>NullPointerException</code> 产生的原因是你可以把一个 <code>null</code> 的值传递给一个类型的变量，然后调用这个类型的方法。我们可以使用 Java 的代码来表示一下：<code>String s = null; s.length()</code>。</p>\n<p>在 <code>Type?</code> 的设计理念中，对于不确定是否为 <code>null</code> 类型可以使用 <code>Type?</code> 类型来声明，如<code>val s: String? = getString...</code>，此时 <code>s</code> 的类型是 <code>String?</code>，你不能直接调用 <code>s.length</code>，你需要进行安全调用<code>s?.length</code>。这个函数的返回类型是一个 <code>Int?</code>，这很正常，对于一个不确定是否为 <code>null</code> 的类型进行安全调用返回当然是一个 <code>Type?</code> 类型。如果 <code>s</code> 不为 <code>null</code> 正常返回 <code>s</code> 的长度，否则返回 <code>null</code>。除此之外， Kotlin 还针对 <code>Type?</code> 提供了 Elvis 操作和 let 函数，具体的用法可以参考 Kotlin 官方手册。</p>\n<p>而在 <code>Optional</code> 的设计哲学中，你可以使用 <code>Option[T]</code> 来包裹一个不确定是否为 <code>null</code> 的值。这里我们使用 Scala 的代码来演示：<code>val s: Option[String] = Option(getString...)</code>，此时 <code>s</code> 的类型为 <code>Option[String]</code>，你仍然不能直接调用<code>s.length</code>，你可以使用 <code>map</code> 函数：<code>s.map(s =&gt; s.length)</code>，它的返回值是一个 <code>Option[Int]</code> 类型。和 <code>Type?</code> 很类似，对一个 <code>Option[T]</code> 类型使用 <code>map</code> 函数，结果当然是一个 <code>Option[S]</code> 类型。在 Scala 中，你也可以使用模式匹配来处理 <code>Option</code> 类型。</p>\n<p>总结：二者都可以完美的规避 <code>NullPointerException</code>，<code>Type?</code> 使用安全调用来避免直接调用 <code>Type</code> 类型的方法，而 <code>Option</code> 则使用 map 函数或者模式匹配来处理。本质上都是避免直接调用值可能为 <code>null</code> 的类型变量的方法。</p>\n<h2 id=\"代码可读性\"><a href=\"#代码可读性\" class=\"headerlink\" title=\"代码可读性\"></a>代码可读性</h2><p>实际的业务是比较复杂的，例如，我们需要计算两个数字字符串的乘积，首先我们需要把他们转换为 <code>Int</code> 类型，如果其中一个字符串是转换失败，则无法计算结果。</p>\n<p>在 Kotlin 的 <code>Type?</code> 中，我们需要重新定义 <code>String</code> 类型的 <code>toInt</code> 方法，让它返回一个 <code>Int?</code> 类型，代码如下：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">tryString2Int</span><span class=\"params\">(a: <span class=\"type\">String</span>)</span></span> = <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    a.toInt()</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">    <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后我们需要定义一个方法来计算两个数字字符串的乘积，这里我们使用 <code>Type?</code> 的 let 函数，它接受一个 Lambda 表达式，如果调用者的值不为 <code>null</code>，则调用 Lambda 表达式，否则直接返回 <code>null</code>。<code>strNumberMuti</code> 函数返回的是一个 <code>Double?</code> 类型，如果有任何一个字符串转换数字失败，就返回 <code>null</code>，都转换成功才计算乘积。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">strNumberMuti</span><span class=\"params\">(s1: <span class=\"type\">String</span>, s2: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Double</span>? =</span><br><span class=\"line\">    tryString2Int(s1)?.let&#123; a -&gt;</span><br><span class=\"line\">        tryString2Int(s2)?.let &#123;</span><br><span class=\"line\">            t -&gt; a * t * <span class=\"number\">1.0</span> &#125;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码的可读取有点差呀，而且在实际的业务开发过程中，可能会有更多的 <code>Type?</code> 类型，那代码岂不是要爆炸了！。幸运的是，Kotlin 允许我们使用 <code>if</code> 来代替 <code>let</code> 函数 做相同的判断，代码如下：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">strNumberMuti2</span><span class=\"params\">(s1: <span class=\"type\">String</span>, s2: <span class=\"type\">String</span>)</span></span>:<span class=\"built_in\">Double</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> a = tryString2Int(s1)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> b = tryString2Int(s2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">if</span>(a!=<span class=\"literal\">null</span> &amp;&amp; b!= <span class=\"literal\">null</span>) a * b * <span class=\"number\">1.0</span> <span class=\"keyword\">else</span> <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样的代码可读性就好多了，但是丢失函数式的编程美感。而且感觉 <code>Type?</code> 是一种语法糖，手动对 <code>Type?</code> 进行非空校验，就可以直接使用 <code>Type</code> 类型了！！</p>\n<p>同样的我们使用 Scala 的 <code>Option[T]</code> 来完成上面的需求，为了让 <code>toInt</code> 函数返回 <code>Option[T]</code> 类型，我们定义了一个 <code>Try</code> 函数，这个函数看不懂没关系，你只需知道它接受一个函数，并且返回一个 <code>Option[A]</code> 值即可。代码让如下：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Try</span></span>[<span class=\"type\">A</span>](a: =&gt; <span class=\"type\">A</span>): <span class=\"type\">Option</span>[<span class=\"type\">A</span>] = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> <span class=\"type\">Some</span>(a)</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> &#123;<span class=\"keyword\">case</span> e: <span class=\"type\">Exception</span> =&gt; <span class=\"type\">None</span>&#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>同样的，我们需要写一个函数，用来把两个字符串数字转换为整数，并且做它们的乘积，这里我们为了使代码更简洁，使用了 Scala 的 for 推导，具体的用法可以参考 Scala 官方的 Document。<code>strNumberNu</code>返回类型是 <code>Option[Double]</code>，如果有任何一个转换失败，返回 <code>None</code>，否则返回 <code>Some[Double]</code>，代码如下：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">strNumberMuti</span></span>(s1: <span class=\"type\">String</span>, s2: <span class=\"type\">String</span>): <span class=\"type\">Option</span>[<span class=\"type\">Double</span>] = &#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">     a &lt;- <span class=\"type\">Try</span>&#123; s1.toInt &#125;</span><br><span class=\"line\">     b &lt;- <span class=\"type\">Try</span>&#123; s2.toInt &#125;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">yield</span> a * b</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，使用 Scala 的 <code>Option[T]</code> 更具有函数式的编程美感，而且代码的可读性极强，而且即使有更多的 <code>Option[T]</code>，for 推导都可以轻松应对。</p>\n<p>总结：面对比较复杂的业务场景，<code>Type?</code> 和 <code>Option[T]</code> 都可以轻松应对，但是 <code>Type?</code> 的用法就显得有些 low，还是使用 <code>!=null</code> 的套路，这也暴露了它的设计是存在缺陷的。相反的 <code>Option[T]</code> 的设计理念是完备的，而且极具函数式的编程美感。</p>\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><p>性能是衡量设计好坏的一个重要的方面，下面我们只做一个简单的测试：让两个字符串都是<code>&quot;999&quot;</code>，然后分别执行 Kotlin 的 <code>strNumberMuti</code> 和 Scala 的 <code>strNumberMuti</code> 一千万次，然后我们发现 Kotlin 的 <code>strNumberMuti</code> 执行时间大约在 1.9s，而 Scala 的 <code>strNumberMuti</code> 执行时间约在 5.0s。由此可以看出，Kotlin 的 <code>Type?</code> 比 Scala <code>Option[T]</code> 拥有更好的性能，其实这样很正常，因为 Kotlin 的 <code>Type?</code> 是语法糖，创建一个 <code>Type?</code> 的对象其实和创建一个 <code>Type</code> 的对象其实消耗的性能差不多，但是 <code>Option[T]</code>不仅仅需要创建 <code>T</code> 类型的对象，更需要创建 <code>Option[T]</code> 类型的对象来包裹 <code>T</code> 类型的对象，因此它的开销大一点。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>就我而言，我更喜欢 Scala 的 <code>Option[T]</code> 的设计，因为它是理论完备的，而且极具函数式的编程美感，即使它的性能要差一点。对于 Kotlin 的 <code>Type?</code> 类型，我觉得它的设计有瑕疵，就拿 <code>let</code> 函数举例，在单个 <code>Type?</code> 很好用，但是当多个 <code>Type?</code> 进行组合的时候，就显得很鸡肋。</p>\n<p>萝卜青菜，各有所爱，也许某天 Kotlin 也会让 <code>Type?</code> 具有函数式的编程美感。</p>\n","site":{"data":{}},"excerpt":"<p>最近阅读一些关于 Kotlin 类型系统方面的书，发现 Kotlin 的类型系统针对 <code>null</code> 有着独特的设计哲学。在 Java 或者其它编程语言中，经常会出现 <code>NullPointerException</code>，而导致此异常的重要原因是因为你可以写 <code>String s = null</code> 这样的代码。其实可以认为这是 Java 等语言类型系统设计的一个缺陷，它们允许 <code>null</code> 可以作为任何类型的值！</p>\n<p>但是在 Kotlin 中，如果你声明 <code>val s: String = null</code>，那么编译器会给你一个 error，因为在 Kotlin 中，你不允许把一个 <code>null</code> 值赋给一个普通的类型。如果你声明一个这样的函数 <code>fun strLen(s: String) = {...}</code>，那么这个函数将不接受值为 <code>null</code> 的参数。<br>","more":"</p>\n<p>这个设计看起来如此的美好，他可以极大程度的减少 Kotlin 产生 <code>NullPointerException</code>，可是如果有一天，你需要调用一个方法，它的返回值可能为 <code>null</code> 也可能为 <code>String</code> ，那么在 Kotlin 中你可以声明一个可空的字符串类型：<code>String?</code>。<code>val s: String? = null</code> 此时 Kotlin 的编译器会让这行代码通过。当然它也可以接收一个普通的 <code>String</code> 类型的值 <code>val s: String? = &quot;abc&quot;</code>。</p>\n<p>可空类型(<code>Type?</code>)的设计，是 Kotlin 另一个设计哲学，它要求工程师在设计的时候就需要确定该变量是否可为空。如果不为空就使用<code>Type</code> 类型声明，否则就使用 <code>Type?</code> 类型声明。这让我想起在 Scala 中存在一个和 <code>Type?</code> 有着异曲同工之妙的一个类型—— <code>Option[T]</code>。</p>\n<p><code>Option[T]</code> 有两个子类型：<code>Some[T]</code> 和 <code>None</code>，你可以使用 <code>val s: Option[String] = Some(&quot;123&quot;)</code> 来表示一个字符串存在，当然你可以使用<code>val s: Option[String] = None</code> 来表示这个字符串不存在。</p>\n<p>Scala 和 Kotlin 都是基于 JVM 的编程语言，而 <code>Option[T]</code> 和 <code>Type?</code> 的设计就是用来解决 JVM 平台出现的 <code>NullPointerException</code>。但二者的设计理念却截然不同，Scala 的 <code>Option[T]</code> 是在原有类型基础上使用 <code>Option</code> 做一层封装，而 Koltin 的 <code>Type?</code> 是使用语法糖完成的。</p>\n<p>那么这两种设计方案到底谁更好一点呢？我们将会使用以下标准来分别测试它们：</p>\n<ul>\n<li>是否可以完美的规避 <code>NullPointerException</code> —— 二者的设计都是为了解决 <code>NullPointerException</code>，谁可以更好的规避这个问题呢？</li>\n<li>代码的可读性 —— 如果在复杂的业务中，谁的代码可读性更好一点呢？</li>\n<li>性能</li>\n</ul>\n<h2 id=\"规避空指针\"><a href=\"#规避空指针\" class=\"headerlink\" title=\"规避空指针\"></a>规避空指针</h2><p>在上文中，我们曾经提过，<code>NullPointerException</code> 产生的原因是你可以把一个 <code>null</code> 的值传递给一个类型的变量，然后调用这个类型的方法。我们可以使用 Java 的代码来表示一下：<code>String s = null; s.length()</code>。</p>\n<p>在 <code>Type?</code> 的设计理念中，对于不确定是否为 <code>null</code> 类型可以使用 <code>Type?</code> 类型来声明，如<code>val s: String? = getString...</code>，此时 <code>s</code> 的类型是 <code>String?</code>，你不能直接调用 <code>s.length</code>，你需要进行安全调用<code>s?.length</code>。这个函数的返回类型是一个 <code>Int?</code>，这很正常，对于一个不确定是否为 <code>null</code> 的类型进行安全调用返回当然是一个 <code>Type?</code> 类型。如果 <code>s</code> 不为 <code>null</code> 正常返回 <code>s</code> 的长度，否则返回 <code>null</code>。除此之外， Kotlin 还针对 <code>Type?</code> 提供了 Elvis 操作和 let 函数，具体的用法可以参考 Kotlin 官方手册。</p>\n<p>而在 <code>Optional</code> 的设计哲学中，你可以使用 <code>Option[T]</code> 来包裹一个不确定是否为 <code>null</code> 的值。这里我们使用 Scala 的代码来演示：<code>val s: Option[String] = Option(getString...)</code>，此时 <code>s</code> 的类型为 <code>Option[String]</code>，你仍然不能直接调用<code>s.length</code>，你可以使用 <code>map</code> 函数：<code>s.map(s =&gt; s.length)</code>，它的返回值是一个 <code>Option[Int]</code> 类型。和 <code>Type?</code> 很类似，对一个 <code>Option[T]</code> 类型使用 <code>map</code> 函数，结果当然是一个 <code>Option[S]</code> 类型。在 Scala 中，你也可以使用模式匹配来处理 <code>Option</code> 类型。</p>\n<p>总结：二者都可以完美的规避 <code>NullPointerException</code>，<code>Type?</code> 使用安全调用来避免直接调用 <code>Type</code> 类型的方法，而 <code>Option</code> 则使用 map 函数或者模式匹配来处理。本质上都是避免直接调用值可能为 <code>null</code> 的类型变量的方法。</p>\n<h2 id=\"代码可读性\"><a href=\"#代码可读性\" class=\"headerlink\" title=\"代码可读性\"></a>代码可读性</h2><p>实际的业务是比较复杂的，例如，我们需要计算两个数字字符串的乘积，首先我们需要把他们转换为 <code>Int</code> 类型，如果其中一个字符串是转换失败，则无法计算结果。</p>\n<p>在 Kotlin 的 <code>Type?</code> 中，我们需要重新定义 <code>String</code> 类型的 <code>toInt</code> 方法，让它返回一个 <code>Int?</code> 类型，代码如下：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">tryString2Int</span><span class=\"params\">(a: <span class=\"type\">String</span>)</span></span> = <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    a.toInt()</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (e:Exception)&#123;</span><br><span class=\"line\">    <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后我们需要定义一个方法来计算两个数字字符串的乘积，这里我们使用 <code>Type?</code> 的 let 函数，它接受一个 Lambda 表达式，如果调用者的值不为 <code>null</code>，则调用 Lambda 表达式，否则直接返回 <code>null</code>。<code>strNumberMuti</code> 函数返回的是一个 <code>Double?</code> 类型，如果有任何一个字符串转换数字失败，就返回 <code>null</code>，都转换成功才计算乘积。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">strNumberMuti</span><span class=\"params\">(s1: <span class=\"type\">String</span>, s2: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Double</span>? =</span><br><span class=\"line\">    tryString2Int(s1)?.let&#123; a -&gt;</span><br><span class=\"line\">        tryString2Int(s2)?.let &#123;</span><br><span class=\"line\">            t -&gt; a * t * <span class=\"number\">1.0</span> &#125;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码的可读取有点差呀，而且在实际的业务开发过程中，可能会有更多的 <code>Type?</code> 类型，那代码岂不是要爆炸了！。幸运的是，Kotlin 允许我们使用 <code>if</code> 来代替 <code>let</code> 函数 做相同的判断，代码如下：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">strNumberMuti2</span><span class=\"params\">(s1: <span class=\"type\">String</span>, s2: <span class=\"type\">String</span>)</span></span>:<span class=\"built_in\">Double</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> a = tryString2Int(s1)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> b = tryString2Int(s2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">if</span>(a!=<span class=\"literal\">null</span> &amp;&amp; b!= <span class=\"literal\">null</span>) a * b * <span class=\"number\">1.0</span> <span class=\"keyword\">else</span> <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样的代码可读性就好多了，但是丢失函数式的编程美感。而且感觉 <code>Type?</code> 是一种语法糖，手动对 <code>Type?</code> 进行非空校验，就可以直接使用 <code>Type</code> 类型了！！</p>\n<p>同样的我们使用 Scala 的 <code>Option[T]</code> 来完成上面的需求，为了让 <code>toInt</code> 函数返回 <code>Option[T]</code> 类型，我们定义了一个 <code>Try</code> 函数，这个函数看不懂没关系，你只需知道它接受一个函数，并且返回一个 <code>Option[A]</code> 值即可。代码让如下：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Try</span></span>[<span class=\"type\">A</span>](a: =&gt; <span class=\"type\">A</span>): <span class=\"type\">Option</span>[<span class=\"type\">A</span>] = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> <span class=\"type\">Some</span>(a)</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> &#123;<span class=\"keyword\">case</span> e: <span class=\"type\">Exception</span> =&gt; <span class=\"type\">None</span>&#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>同样的，我们需要写一个函数，用来把两个字符串数字转换为整数，并且做它们的乘积，这里我们为了使代码更简洁，使用了 Scala 的 for 推导，具体的用法可以参考 Scala 官方的 Document。<code>strNumberNu</code>返回类型是 <code>Option[Double]</code>，如果有任何一个转换失败，返回 <code>None</code>，否则返回 <code>Some[Double]</code>，代码如下：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">strNumberMuti</span></span>(s1: <span class=\"type\">String</span>, s2: <span class=\"type\">String</span>): <span class=\"type\">Option</span>[<span class=\"type\">Double</span>] = &#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">     a &lt;- <span class=\"type\">Try</span>&#123; s1.toInt &#125;</span><br><span class=\"line\">     b &lt;- <span class=\"type\">Try</span>&#123; s2.toInt &#125;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">yield</span> a * b</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，使用 Scala 的 <code>Option[T]</code> 更具有函数式的编程美感，而且代码的可读性极强，而且即使有更多的 <code>Option[T]</code>，for 推导都可以轻松应对。</p>\n<p>总结：面对比较复杂的业务场景，<code>Type?</code> 和 <code>Option[T]</code> 都可以轻松应对，但是 <code>Type?</code> 的用法就显得有些 low，还是使用 <code>!=null</code> 的套路，这也暴露了它的设计是存在缺陷的。相反的 <code>Option[T]</code> 的设计理念是完备的，而且极具函数式的编程美感。</p>\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><p>性能是衡量设计好坏的一个重要的方面，下面我们只做一个简单的测试：让两个字符串都是<code>&quot;999&quot;</code>，然后分别执行 Kotlin 的 <code>strNumberMuti</code> 和 Scala 的 <code>strNumberMuti</code> 一千万次，然后我们发现 Kotlin 的 <code>strNumberMuti</code> 执行时间大约在 1.9s，而 Scala 的 <code>strNumberMuti</code> 执行时间约在 5.0s。由此可以看出，Kotlin 的 <code>Type?</code> 比 Scala <code>Option[T]</code> 拥有更好的性能，其实这样很正常，因为 Kotlin 的 <code>Type?</code> 是语法糖，创建一个 <code>Type?</code> 的对象其实和创建一个 <code>Type</code> 的对象其实消耗的性能差不多，但是 <code>Option[T]</code>不仅仅需要创建 <code>T</code> 类型的对象，更需要创建 <code>Option[T]</code> 类型的对象来包裹 <code>T</code> 类型的对象，因此它的开销大一点。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>就我而言，我更喜欢 Scala 的 <code>Option[T]</code> 的设计，因为它是理论完备的，而且极具函数式的编程美感，即使它的性能要差一点。对于 Kotlin 的 <code>Type?</code> 类型，我觉得它的设计有瑕疵，就拿 <code>let</code> 函数举例，在单个 <code>Type?</code> 很好用，但是当多个 <code>Type?</code> 进行组合的时候，就显得很鸡肋。</p>\n<p>萝卜青菜，各有所爱，也许某天 Kotlin 也会让 <code>Type?</code> 具有函数式的编程美感。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjnkdcpk90008mc55sy6evix6","category_id":"cjnkdcpk50005mc55re47r1j6","_id":"cjnkdcpke000cmc55bey83w3m"},{"post_id":"cjnkdcpjv0003mc554iwbxrwc","category_id":"cjnkdcpk50005mc55re47r1j6","_id":"cjnkdcpke000dmc55dtbgljmg"},{"post_id":"cjnkdcplq000hmc55jhkrsssf","category_id":"cjnkdcpk50005mc55re47r1j6","_id":"cjnkdcplw000nmc556xjha5n8"},{"post_id":"cjnkdcpls000imc55ujtikndo","category_id":"cjnkdcpk50005mc55re47r1j6","_id":"cjnkdcplx000pmc55zsqnokt1"},{"post_id":"cjnkdcpna000wmc552lhjtiun","category_id":"cjnkdcpk50005mc55re47r1j6","_id":"cjnkdcpnf0011mc55prpsrd3i"},{"post_id":"cjnkdcpnf0014mc55w23dcez2","category_id":"cjnkdcpk50005mc55re47r1j6","_id":"cjnkdcpnm001bmc55fygermmn"},{"post_id":"cjnkdcpnc000zmc55lbm3nnmb","category_id":"cjnkdcpnf0012mc55bqnhsu8t","_id":"cjnkdcpnn001dmc55vp4ulp81"},{"post_id":"cjnkdcpnl001amc55xqpp7fd7","category_id":"cjnkdcpk50005mc55re47r1j6","_id":"cjnkdcpnq001imc551wqusav0"},{"post_id":"cjnkdcpnd0010mc55x0gn6pp6","category_id":"cjnkdcpnk0018mc55d4b2dzjq","_id":"cjnkdcpnr001lmc55hhde39yw"},{"post_id":"cjnkdcpnm001cmc55wiwc0f2w","category_id":"cjnkdcpnk0018mc55d4b2dzjq","_id":"cjnkdcpnr001nmc55u38senxm"},{"post_id":"cjnkdcpnj0017mc55n4jdm4ie","category_id":"cjnkdcpnk0018mc55d4b2dzjq","_id":"cjnkdcpnr001pmc55fdkfwhci"}],"PostTag":[{"post_id":"cjnkdcpk90008mc55sy6evix6","tag_id":"cjnkdcpk60006mc55wt2gflwr","_id":"cjnkdcpkd000amc55s3d3hb1i"},{"post_id":"cjnkdcpjv0003mc554iwbxrwc","tag_id":"cjnkdcpk60006mc55wt2gflwr","_id":"cjnkdcpkd000bmc555g1i8nhs"},{"post_id":"cjnkdcplq000hmc55jhkrsssf","tag_id":"cjnkdcpk60006mc55wt2gflwr","_id":"cjnkdcplu000jmc55kc10nksi"},{"post_id":"cjnkdcpls000imc55ujtikndo","tag_id":"cjnkdcpk60006mc55wt2gflwr","_id":"cjnkdcplv000lmc55rzacpi9s"},{"post_id":"cjnkdcpna000wmc552lhjtiun","tag_id":"cjnkdcpk60006mc55wt2gflwr","_id":"cjnkdcpnc000ymc55plu2t2wx"},{"post_id":"cjnkdcpnf0014mc55w23dcez2","tag_id":"cjnkdcpk60006mc55wt2gflwr","_id":"cjnkdcpnj0016mc55bx8wk4b0"},{"post_id":"cjnkdcpnl001amc55xqpp7fd7","tag_id":"cjnkdcpk60006mc55wt2gflwr","_id":"cjnkdcpnp001gmc55t85tmx4d"},{"post_id":"cjnkdcpnc000zmc55lbm3nnmb","tag_id":"cjnkdcpnf0013mc55tuhepoh2","_id":"cjnkdcpnq001hmc55ac19bnuo"},{"post_id":"cjnkdcpnc000zmc55lbm3nnmb","tag_id":"cjnkdcpnk0019mc55a5id6nju","_id":"cjnkdcpnr001kmc55necqukmv"},{"post_id":"cjnkdcpnm001cmc55wiwc0f2w","tag_id":"cjnkdcpnf0013mc55tuhepoh2","_id":"cjnkdcpnr001mmc55k8qcfdvk"},{"post_id":"cjnkdcpnd0010mc55x0gn6pp6","tag_id":"cjnkdcpnf0013mc55tuhepoh2","_id":"cjnkdcpnr001qmc55tsn5zk0v"},{"post_id":"cjnkdcpnd0010mc55x0gn6pp6","tag_id":"cjnkdcpnq001jmc55rgc8ksjq","_id":"cjnkdcpns001rmc553atp7w2i"},{"post_id":"cjnkdcpnj0017mc55n4jdm4ie","tag_id":"cjnkdcpnr001omc5578p5gfv5","_id":"cjnkdcpns001smc55lsyvtb5o"}],"Tag":[{"name":"前端","_id":"cjnkdcpk60006mc55wt2gflwr"},{"name":"Scala","_id":"cjnkdcpnf0013mc55tuhepoh2"},{"name":"会使用","_id":"cjnkdcpnk0019mc55a5id6nju"},{"name":"知原理","_id":"cjnkdcpnq001jmc55rgc8ksjq"},{"name":"Java2Scala","_id":"cjnkdcpnr001omc5578p5gfv5"}]}}