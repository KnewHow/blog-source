心法


1）div 默认状态的高度和宽度

2）div 自适应原则

3）div 父标签的大小由最后一个非浮动子元素的占位空间所决定

4）浮动布局相对行内元素的布局，往往更利于精确计算间距

5）业务中，浮动布局的占位空间往往是我们理想的容器父元素的高度

6）:after 来进行清除浮动，是最佳的实践


思路：
１）如何写一个浮动布局的案例

２）一个ＤＩＶ包含着两个浮动元素，那么它的高度和宽度是多少

３）引出ＤＩＶ标签的特色

４）业务中，所有浮动元素的高度，是我们最理想的父元素的高度

５）推理出使用:after 进行清除浮动

「前」


back:

自从浏览器出世以来，它为了称霸互联网世界，创建的两大帮派。「HTML」 帮 和 「CSS」　派。

这两大帮派在浏览器的领导下，浴血奋战，紧密配合，在许久之后终于帮助浏览器称霸了互联网世界。

在这场战争中，出现了很多厉害角色。其中　HTML 帮的大师兄「DIV」 和　CSS 派的小师妹「浮动」格外引入注目

DIV 是一名非常帅气的剑客，他的剑气很强，几乎每一剑「都独占浏览器的一行」，就像下面这样。
<code>

    <!DOCTYPE html>
    <html>
    <head>
        <title>DIV和CSS的前世今生</title>
        <style type="text/css">
            .first{
                background: red;
            }
            .second{
                background: yellow;
            }
        </style>
    </head>
    <body>
        <div class="parent">
            <div class="first">
                第一道剑气
            </div>

            <div class="second">
                第二道
                <br/>
                剑气
            </div>
        </div>
    </body>
    </html>

</code>

![效果图](/image/back-2-font-xinfa-1/div-show.png)

最强大的地方，也是最致命的弱点。DIV 每次只能朝同一个方向攻击一次。

终于有一天，他碰到一个很厉害的对手，叫做「布局」

布局：“DIV,我知道你的剑气很厉害，但是我只要站在这个地方不动，你最多只能攻击我一次”

DIV：“杀你，最多一剑！”

布局：“是吗？”

一道血色剑气划破长空。

几番交手，一道身影倒飞而出。

DIV吐了一口血：“难道今天要交代在这里了？”

布局：“小子，你太狂妄了，而狂妄的代价，就是你的这条命，去死吧！”

DIV眼看着布局的攻击将至,安静的闭上了眼睛。

说时迟，那时快，一声琴音飘过，那道攻击竟然被化解了。

布局：“是谁？”

只见一道倩影缓缓飘出，“CSS 派「浮动」”

